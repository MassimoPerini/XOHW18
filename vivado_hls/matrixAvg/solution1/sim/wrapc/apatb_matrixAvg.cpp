// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct {
        int red[20];
        int blue[20];
        int green[20];
       } cell;
       typedef cell Cell;

          typedef struct {
              int red[2];
              int blue[2];
              int green[2];
             } average;
             typedef average Average;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "agg_result_red"
#define AUTOTB_TVOUT_agg_result_red  "../tv/cdatafile/c.matrixAvg.autotvout_agg_result_red.dat"
#define AUTOTB_TVIN_agg_result_red  "../tv/cdatafile/c.matrixAvg.autotvin_agg_result_red.dat"
// wrapc file define: "agg_result_blue"
#define AUTOTB_TVOUT_agg_result_blue  "../tv/cdatafile/c.matrixAvg.autotvout_agg_result_blue.dat"
#define AUTOTB_TVIN_agg_result_blue  "../tv/cdatafile/c.matrixAvg.autotvin_agg_result_blue.dat"
// wrapc file define: "agg_result_green"
#define AUTOTB_TVOUT_agg_result_green  "../tv/cdatafile/c.matrixAvg.autotvout_agg_result_green.dat"
#define AUTOTB_TVIN_agg_result_green  "../tv/cdatafile/c.matrixAvg.autotvin_agg_result_green.dat"
// wrapc file define: "input_red"
#define AUTOTB_TVIN_input_red  "../tv/cdatafile/c.matrixAvg.autotvin_input_red.dat"
// wrapc file define: "input_blue"
#define AUTOTB_TVIN_input_blue  "../tv/cdatafile/c.matrixAvg.autotvin_input_blue.dat"
// wrapc file define: "input_green"
#define AUTOTB_TVIN_input_green  "../tv/cdatafile/c.matrixAvg.autotvin_input_green.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "agg_result_red"
#define AUTOTB_TVOUT_PC_agg_result_red  "../tv/rtldatafile/rtl.matrixAvg.autotvout_agg_result_red.dat"
// tvout file define: "agg_result_blue"
#define AUTOTB_TVOUT_PC_agg_result_blue  "../tv/rtldatafile/rtl.matrixAvg.autotvout_agg_result_blue.dat"
// tvout file define: "agg_result_green"
#define AUTOTB_TVOUT_PC_agg_result_green  "../tv/rtldatafile/rtl.matrixAvg.autotvout_agg_result_green.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			agg_result_red_depth = 0;
			agg_result_blue_depth = 0;
			agg_result_green_depth = 0;
			input_red_depth = 0;
			input_blue_depth = 0;
			input_green_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{agg_result_red " << agg_result_red_depth << "}\n";
			total_list << "{agg_result_blue " << agg_result_blue_depth << "}\n";
			total_list << "{agg_result_green " << agg_result_green_depth << "}\n";
			total_list << "{input_red " << input_red_depth << "}\n";
			total_list << "{input_blue " << input_blue_depth << "}\n";
			total_list << "{input_green " << input_green_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int agg_result_red_depth;
		int agg_result_blue_depth;
		int agg_result_green_depth;
		int input_red_depth;
		int input_blue_depth;
		int input_green_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" Average matrixAvg (
Cell input);

extern "C" Average AESL_WRAP_matrixAvg (
Cell input)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		Average AESL_return;

		// output port post check: "agg_result_red"
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_red, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_red, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_red, AESL_token); // data

			sc_bv<32> *agg_result_red_pc_buffer = new sc_bv<32>[2];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_red', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_red', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					agg_result_red_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_red, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_agg_result_red))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: agg_result_red
				{
					// bitslice(31, 0)
					// {
						// celement: agg.result.red(31, 0)
						// {
							sc_lv<32>* agg_result_red_lv0_0_1_1 = new sc_lv<32>[2];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.red(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								if (&(AESL_return.red[0]) != NULL) // check the null address if the c port is array or others
								{
									agg_result_red_lv0_0_1_1[hls_map_index].range(31, 0) = sc_bv<32>(agg_result_red_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.red(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : AESL_return.red[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : AESL_return.red[0]
								// output_left_conversion : AESL_return.red[i_0]
								// output_type_conversion : (agg_result_red_lv0_0_1_1[hls_map_index]).to_uint64()
								if (&(AESL_return.red[0]) != NULL) // check the null address if the c port is array or others
								{
									AESL_return.red[i_0] = (agg_result_red_lv0_0_1_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] agg_result_red_pc_buffer;
		}

		// output port post check: "agg_result_blue"
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_blue, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_blue, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_blue, AESL_token); // data

			sc_bv<32> *agg_result_blue_pc_buffer = new sc_bv<32>[2];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_blue', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_blue', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					agg_result_blue_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_blue, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_agg_result_blue))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: agg_result_blue
				{
					// bitslice(31, 0)
					// {
						// celement: agg.result.blue(31, 0)
						// {
							sc_lv<32>* agg_result_blue_lv0_0_1_1 = new sc_lv<32>[2];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.blue(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								if (&(AESL_return.blue[0]) != NULL) // check the null address if the c port is array or others
								{
									agg_result_blue_lv0_0_1_1[hls_map_index].range(31, 0) = sc_bv<32>(agg_result_blue_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.blue(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : AESL_return.blue[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : AESL_return.blue[0]
								// output_left_conversion : AESL_return.blue[i_0]
								// output_type_conversion : (agg_result_blue_lv0_0_1_1[hls_map_index]).to_uint64()
								if (&(AESL_return.blue[0]) != NULL) // check the null address if the c port is array or others
								{
									AESL_return.blue[i_0] = (agg_result_blue_lv0_0_1_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] agg_result_blue_pc_buffer;
		}

		// output port post check: "agg_result_green"
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_green, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_green, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_green, AESL_token); // data

			sc_bv<32> *agg_result_green_pc_buffer = new sc_bv<32>[2];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_green', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'agg_result_green', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					agg_result_green_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_agg_result_green, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_agg_result_green))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: agg_result_green
				{
					// bitslice(31, 0)
					// {
						// celement: agg.result.green(31, 0)
						// {
							sc_lv<32>* agg_result_green_lv0_0_1_1 = new sc_lv<32>[2];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.green(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								if (&(AESL_return.green[0]) != NULL) // check the null address if the c port is array or others
								{
									agg_result_green_lv0_0_1_1[hls_map_index].range(31, 0) = sc_bv<32>(agg_result_green_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: agg.result.green(31, 0)
						{
							// carray: (0) => (1) @ (1)
							for (int i_0 = 0; i_0 <= 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : AESL_return.green[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : AESL_return.green[0]
								// output_left_conversion : AESL_return.green[i_0]
								// output_type_conversion : (agg_result_green_lv0_0_1_1[hls_map_index]).to_uint64()
								if (&(AESL_return.green[0]) != NULL) // check the null address if the c port is array or others
								{
									AESL_return.green[i_0] = (agg_result_green_lv0_0_1_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] agg_result_green_pc_buffer;
		}

		AESL_transaction_pc++;

		return AESL_return;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "agg_result_red"
		char* tvin_agg_result_red = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_agg_result_red);
		char* tvout_agg_result_red = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_agg_result_red);

		// "agg_result_blue"
		char* tvin_agg_result_blue = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_agg_result_blue);
		char* tvout_agg_result_blue = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_agg_result_blue);

		// "agg_result_green"
		char* tvin_agg_result_green = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_agg_result_green);
		char* tvout_agg_result_green = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_agg_result_green);

		// "input_red"
		char* tvin_input_red = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_red);

		// "input_blue"
		char* tvin_input_blue = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_blue);

		// "input_green"
		char* tvin_input_green = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_green);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_input_red, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_red, tvin_input_red);

		sc_bv<32>* input_red_tvin_wrapc_buffer = new sc_bv<32>[20];

		// RTL Name: input_red
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input.red(31, 0)
				{
					// carray: (0) => (19) @ (1)
					for (int i_0 = 0; i_0 <= 19; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : input.red[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input.red[0]
						// regulate_c_name       : input_red
						// input_type_conversion : input.red[i_0]
						if (&(input.red[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_red_tmp_mem;
							input_red_tmp_mem = input.red[i_0];
							input_red_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_red_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 20; i++)
		{
			sprintf(tvin_input_red, "%s\n", (input_red_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_red, tvin_input_red);
		}

		tcl_file.set_num(20, &tcl_file.input_red_depth);
		sprintf(tvin_input_red, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_red, tvin_input_red);

		// release memory allocation
		delete [] input_red_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_blue, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_blue, tvin_input_blue);

		sc_bv<32>* input_blue_tvin_wrapc_buffer = new sc_bv<32>[20];

		// RTL Name: input_blue
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input.blue(31, 0)
				{
					// carray: (0) => (19) @ (1)
					for (int i_0 = 0; i_0 <= 19; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : input.blue[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input.blue[0]
						// regulate_c_name       : input_blue
						// input_type_conversion : input.blue[i_0]
						if (&(input.blue[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_blue_tmp_mem;
							input_blue_tmp_mem = input.blue[i_0];
							input_blue_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_blue_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 20; i++)
		{
			sprintf(tvin_input_blue, "%s\n", (input_blue_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_blue, tvin_input_blue);
		}

		tcl_file.set_num(20, &tcl_file.input_blue_depth);
		sprintf(tvin_input_blue, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_blue, tvin_input_blue);

		// release memory allocation
		delete [] input_blue_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_green, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_green, tvin_input_green);

		sc_bv<32>* input_green_tvin_wrapc_buffer = new sc_bv<32>[20];

		// RTL Name: input_green
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input.green(31, 0)
				{
					// carray: (0) => (19) @ (1)
					for (int i_0 = 0; i_0 <= 19; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : input.green[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input.green[0]
						// regulate_c_name       : input_green
						// input_type_conversion : input.green[i_0]
						if (&(input.green[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_green_tmp_mem;
							input_green_tmp_mem = input.green[i_0];
							input_green_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_green_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 20; i++)
		{
			sprintf(tvin_input_green, "%s\n", (input_green_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_green, tvin_input_green);
		}

		tcl_file.set_num(20, &tcl_file.input_green_depth);
		sprintf(tvin_input_green, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_green, tvin_input_green);

		// release memory allocation
		delete [] input_green_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		Average AESL_return = matrixAvg(input);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_agg_result_red, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_agg_result_red, tvout_agg_result_red);

		sc_bv<32>* agg_result_red_tvout_wrapc_buffer = new sc_bv<32>[2];

		// RTL Name: agg_result_red
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: agg.result.red(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : AESL_return.red[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : AESL_return.red[0]
						// regulate_c_name       : agg_result_red
						// input_type_conversion : AESL_return.red[i_0]
						if (&(AESL_return.red[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> agg_result_red_tmp_mem;
							agg_result_red_tmp_mem = AESL_return.red[i_0];
							agg_result_red_tvout_wrapc_buffer[hls_map_index].range(31, 0) = agg_result_red_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2; i++)
		{
			sprintf(tvout_agg_result_red, "%s\n", (agg_result_red_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_agg_result_red, tvout_agg_result_red);
		}

		tcl_file.set_num(2, &tcl_file.agg_result_red_depth);
		sprintf(tvout_agg_result_red, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_agg_result_red, tvout_agg_result_red);

		// release memory allocation
		delete [] agg_result_red_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_agg_result_blue, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_agg_result_blue, tvout_agg_result_blue);

		sc_bv<32>* agg_result_blue_tvout_wrapc_buffer = new sc_bv<32>[2];

		// RTL Name: agg_result_blue
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: agg.result.blue(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : AESL_return.blue[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : AESL_return.blue[0]
						// regulate_c_name       : agg_result_blue
						// input_type_conversion : AESL_return.blue[i_0]
						if (&(AESL_return.blue[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> agg_result_blue_tmp_mem;
							agg_result_blue_tmp_mem = AESL_return.blue[i_0];
							agg_result_blue_tvout_wrapc_buffer[hls_map_index].range(31, 0) = agg_result_blue_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2; i++)
		{
			sprintf(tvout_agg_result_blue, "%s\n", (agg_result_blue_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_agg_result_blue, tvout_agg_result_blue);
		}

		tcl_file.set_num(2, &tcl_file.agg_result_blue_depth);
		sprintf(tvout_agg_result_blue, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_agg_result_blue, tvout_agg_result_blue);

		// release memory allocation
		delete [] agg_result_blue_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_agg_result_green, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_agg_result_green, tvout_agg_result_green);

		sc_bv<32>* agg_result_green_tvout_wrapc_buffer = new sc_bv<32>[2];

		// RTL Name: agg_result_green
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: agg.result.green(31, 0)
				{
					// carray: (0) => (1) @ (1)
					for (int i_0 = 0; i_0 <= 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : AESL_return.green[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : AESL_return.green[0]
						// regulate_c_name       : agg_result_green
						// input_type_conversion : AESL_return.green[i_0]
						if (&(AESL_return.green[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> agg_result_green_tmp_mem;
							agg_result_green_tmp_mem = AESL_return.green[i_0];
							agg_result_green_tvout_wrapc_buffer[hls_map_index].range(31, 0) = agg_result_green_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2; i++)
		{
			sprintf(tvout_agg_result_green, "%s\n", (agg_result_green_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_agg_result_green, tvout_agg_result_green);
		}

		tcl_file.set_num(2, &tcl_file.agg_result_green_depth);
		sprintf(tvout_agg_result_green, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_agg_result_green, tvout_agg_result_green);

		// release memory allocation
		delete [] agg_result_green_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "agg_result_red"
		delete [] tvout_agg_result_red;
		delete [] tvin_agg_result_red;
		// release memory allocation: "agg_result_blue"
		delete [] tvout_agg_result_blue;
		delete [] tvin_agg_result_blue;
		// release memory allocation: "agg_result_green"
		delete [] tvout_agg_result_green;
		delete [] tvin_agg_result_green;
		// release memory allocation: "input_red"
		delete [] tvin_input_red;
		// release memory allocation: "input_blue"
		delete [] tvin_input_blue;
		// release memory allocation: "input_green"
		delete [] tvin_input_green;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

		return AESL_return;
	}
}


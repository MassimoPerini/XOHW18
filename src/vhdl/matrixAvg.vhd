-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixAvg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    mat_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    mat_in_TVALID : IN STD_LOGIC;
    mat_in_TREADY : OUT STD_LOGIC;
    mat_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    mat_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    mat_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mat_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    mat_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    mat_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    mat_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    mat_out_TVALID : OUT STD_LOGIC;
    mat_out_TREADY : IN STD_LOGIC;
    mat_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    mat_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    mat_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    mat_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    mat_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    mat_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matrixAvg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixAvg,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=7354,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=13,HLS_SYN_FF=3195,HLS_SYN_LUT=1708}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_384 : STD_LOGIC_VECTOR (9 downto 0) := "1110000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal mat_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_V_data_V_0_vld_in : STD_LOGIC;
    signal mat_in_V_data_V_0_vld_out : STD_LOGIC;
    signal mat_in_V_data_V_0_ack_in : STD_LOGIC;
    signal mat_in_V_data_V_0_ack_out : STD_LOGIC;
    signal mat_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal mat_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal mat_in_V_data_V_0_sel : STD_LOGIC;
    signal mat_in_V_data_V_0_load_A : STD_LOGIC;
    signal mat_in_V_data_V_0_load_B : STD_LOGIC;
    signal mat_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal mat_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal mat_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal mat_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_out_V_data_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_data_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_data_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_data_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal mat_out_V_data_V_1_sel : STD_LOGIC;
    signal mat_out_V_data_V_1_load_A : STD_LOGIC;
    signal mat_out_V_data_V_1_load_B : STD_LOGIC;
    signal mat_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal mat_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_keep_V_1_sel : STD_LOGIC;
    signal mat_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_strb_V_1_sel : STD_LOGIC;
    signal mat_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_user_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_user_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_user_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_user_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_user_V_1_sel : STD_LOGIC;
    signal mat_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_last_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_last_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_last_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_last_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal mat_out_V_last_V_1_sel : STD_LOGIC;
    signal mat_out_V_last_V_1_load_A : STD_LOGIC;
    signal mat_out_V_last_V_1_load_B : STD_LOGIC;
    signal mat_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal mat_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_id_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_id_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_id_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_id_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_id_V_1_sel : STD_LOGIC;
    signal mat_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal mat_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal mat_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal mat_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal mat_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal mat_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal mat_out_V_dest_V_1_sel : STD_LOGIC;
    signal mat_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mat_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mat_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal indvar_flatten_reg_431 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_453 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_fu_521_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_7_fu_538_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_965 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_8_fu_555_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_973 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_8_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_9_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal indvar_flatten_next_fu_584_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_reg_1006 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_4_mid2_fu_596_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_mid2_reg_1011 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_mid2_v_v_fu_610_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_mid2_v_v_reg_1017 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state10_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal sum_red_addr_1_reg_1029 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_green_addr_1_reg_1039 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_blue_addr_1_reg_1049 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_fu_636_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_10_reg_1054 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_11_fu_668_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_1062 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_10_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_1067 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_red_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_load_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_30_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_green_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_load_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_blue_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_load_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul1_reg_1137 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_32_reg_1142 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul9_reg_1147 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_35_reg_1152 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_1157 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_38_reg_1162 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_11_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_12_fu_839_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_12_fu_894_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_1185 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond2_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cell_avg_red_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_13_fu_911_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_1203 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal exitcond3_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cell_avg_green_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_14_fu_928_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_1221 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_state25 : BOOLEAN;
    signal exitcond_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal cell_avg_blue_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal red_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal red_ce0 : STD_LOGIC;
    signal red_we0 : STD_LOGIC;
    signal red_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal green_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal green_ce0 : STD_LOGIC;
    signal green_we0 : STD_LOGIC;
    signal green_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal blue_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal blue_ce0 : STD_LOGIC;
    signal blue_we0 : STD_LOGIC;
    signal blue_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_red_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cell_avg_red_ce0 : STD_LOGIC;
    signal cell_avg_red_we0 : STD_LOGIC;
    signal cell_avg_blue_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cell_avg_blue_ce0 : STD_LOGIC;
    signal cell_avg_blue_we0 : STD_LOGIC;
    signal cell_avg_green_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cell_avg_green_ce0 : STD_LOGIC;
    signal cell_avg_green_we0 : STD_LOGIC;
    signal sum_red_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_red_ce0 : STD_LOGIC;
    signal sum_red_we0 : STD_LOGIC;
    signal sum_red_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_blue_ce0 : STD_LOGIC;
    signal sum_blue_we0 : STD_LOGIC;
    signal sum_blue_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_green_ce0 : STD_LOGIC;
    signal sum_green_we0 : STD_LOGIC;
    signal sum_green_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_384 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_396 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_408 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_phi_fu_435_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal j_phi_fu_446_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_phi_fu_457_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_464 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i3_reg_475 : STD_LOGIC_VECTOR (3 downto 0);
    signal i4_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal i6_reg_497 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_5_mid2_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_s_fu_604_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_945_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_717_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal neg_mul1_fu_762_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_31_fu_767_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_18_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti1_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul2_fu_804_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_34_fu_809_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_24_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_823_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_826_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti2_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_846_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_37_fu_851_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_27_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_868_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_945_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_945_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_945_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_945_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_945_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component matrixAvg_mul_32seOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component matrixAvg_mac_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component matrixAvg_red IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixAvg_cell_avbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    red_U : component matrixAvg_red
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => red_address0,
        ce0 => red_ce0,
        we0 => red_we0,
        d0 => mat_in_V_data_V_0_data_out,
        q0 => red_q0);

    green_U : component matrixAvg_red
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => green_address0,
        ce0 => green_ce0,
        we0 => green_we0,
        d0 => mat_in_V_data_V_0_data_out,
        q0 => green_q0);

    blue_U : component matrixAvg_red
    generic map (
        DataWidth => 32,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => blue_address0,
        ce0 => blue_ce0,
        we0 => blue_we0,
        d0 => mat_in_V_data_V_0_data_out,
        q0 => blue_q0);

    cell_avg_red_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cell_avg_red_address0,
        ce0 => cell_avg_red_ce0,
        we0 => cell_avg_red_we0,
        d0 => tmp_11_reg_1167,
        q0 => cell_avg_red_q0);

    cell_avg_blue_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cell_avg_blue_address0,
        ce0 => cell_avg_blue_ce0,
        we0 => cell_avg_blue_we0,
        d0 => tmp_13_reg_1177,
        q0 => cell_avg_blue_q0);

    cell_avg_green_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cell_avg_green_address0,
        ce0 => cell_avg_green_ce0,
        we0 => cell_avg_green_we0,
        d0 => tmp_12_reg_1172,
        q0 => cell_avg_green_q0);

    sum_red_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_red_address0,
        ce0 => sum_red_ce0,
        we0 => sum_red_we0,
        d0 => sum_red_d0,
        q0 => sum_red_q0);

    sum_blue_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_blue_address0,
        ce0 => sum_blue_ce0,
        we0 => sum_blue_we0,
        d0 => sum_blue_d0,
        q0 => sum_blue_q0);

    sum_green_U : component matrixAvg_cell_avbkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_green_address0,
        ce0 => sum_green_ce0,
        we0 => sum_green_we0,
        d0 => sum_green_d0,
        q0 => sum_green_q0);

    matrixAvg_mul_32seOg_U1 : component matrixAvg_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_red_load_reg_1089,
        din1 => grp_fu_708_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_708_p2);

    matrixAvg_mul_32seOg_U2 : component matrixAvg_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_green_load_reg_1100,
        din1 => grp_fu_717_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_717_p2);

    matrixAvg_mul_32seOg_U3 : component matrixAvg_mul_32seOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_blue_load_reg_1111,
        din1 => grp_fu_726_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_726_p2);

    matrixAvg_mac_mulfYi_U4 : component matrixAvg_mac_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_945_p0,
        din1 => grp_fu_945_p1,
        din2 => grp_fu_945_p2,
        dout => grp_fu_945_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 xor ap_const_logic_1);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    mat_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_in_V_data_V_0_ack_out) and (ap_const_logic_1 = mat_in_V_data_V_0_vld_out))) then 
                                        mat_in_V_data_V_0_sel_rd <= not(mat_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_in_V_data_V_0_vld_in) and (ap_const_logic_1 = mat_in_V_data_V_0_ack_in))) then 
                                        mat_in_V_data_V_0_sel_wr <= not(mat_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    mat_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_in_V_data_V_0_vld_in) and (ap_const_logic_1 = mat_in_V_data_V_0_ack_out) and (mat_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = mat_in_V_data_V_0_vld_in) and (mat_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    mat_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_in_V_data_V_0_vld_in) and (ap_const_logic_0 = mat_in_V_data_V_0_ack_out) and (mat_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = mat_in_V_data_V_0_ack_out) and (mat_in_V_data_V_0_state = ap_const_lv2_1)))) then 
                    mat_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_in_V_data_V_0_vld_in) and (mat_in_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = mat_in_V_data_V_0_ack_out) and (mat_in_V_data_V_0_state = ap_const_lv2_1)) or ((mat_in_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = mat_in_V_data_V_0_vld_in) and (ap_const_logic_0 = mat_in_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = mat_in_V_data_V_0_vld_in) and (ap_const_logic_1 = mat_in_V_data_V_0_ack_out)))))) then 
                    mat_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    mat_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_in_V_dest_V_0_vld_in) and (ap_const_logic_1 = mat_in_V_dest_V_0_ack_out) and (ap_const_lv2_3 = mat_in_V_dest_V_0_state)) or ((ap_const_logic_0 = mat_in_V_dest_V_0_vld_in) and (ap_const_lv2_2 = mat_in_V_dest_V_0_state)))) then 
                    mat_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_in_V_dest_V_0_vld_in) and (ap_const_logic_0 = mat_in_V_dest_V_0_ack_out) and (ap_const_lv2_3 = mat_in_V_dest_V_0_state)) or ((ap_const_logic_0 = mat_in_V_dest_V_0_ack_out) and (ap_const_lv2_1 = mat_in_V_dest_V_0_state)))) then 
                    mat_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_in_V_dest_V_0_vld_in) and (ap_const_lv2_2 = mat_in_V_dest_V_0_state)) or ((ap_const_logic_1 = mat_in_V_dest_V_0_ack_out) and (ap_const_lv2_1 = mat_in_V_dest_V_0_state)) or ((ap_const_lv2_3 = mat_in_V_dest_V_0_state) and not(((ap_const_logic_1 = mat_in_V_dest_V_0_vld_in) and (ap_const_logic_0 = mat_in_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = mat_in_V_dest_V_0_vld_in) and (ap_const_logic_1 = mat_in_V_dest_V_0_ack_out)))))) then 
                    mat_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    mat_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_data_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_data_V_1_vld_out))) then 
                                        mat_out_V_data_V_1_sel_rd <= not(mat_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_data_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_data_V_1_ack_in))) then 
                                        mat_out_V_data_V_1_sel_wr <= not(mat_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_data_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_data_V_1_state)) or ((ap_const_logic_0 = mat_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_data_V_1_state)))) then 
                    mat_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_data_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_data_V_1_state)) or ((ap_const_logic_0 = mat_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_data_V_1_state)))) then 
                    mat_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_data_V_1_state)) or ((ap_const_logic_1 = mat_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_data_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_data_V_1_state) and not(((ap_const_logic_1 = mat_out_V_data_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_data_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_data_V_1_ack_out)))))) then 
                    mat_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_dest_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_dest_V_1_vld_out))) then 
                                        mat_out_V_dest_V_1_sel_rd <= not(mat_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_dest_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_dest_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_dest_V_1_state)) or ((ap_const_logic_0 = mat_out_V_dest_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_dest_V_1_state)))) then 
                    mat_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_dest_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_dest_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_dest_V_1_state)) or ((ap_const_logic_0 = mat_out_V_dest_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_dest_V_1_state)))) then 
                    mat_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_dest_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_dest_V_1_state)) or ((ap_const_logic_1 = mat_out_V_dest_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_dest_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_dest_V_1_state) and not(((ap_const_logic_1 = mat_out_V_dest_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_dest_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_dest_V_1_ack_out)))))) then 
                    mat_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_id_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_id_V_1_vld_out))) then 
                                        mat_out_V_id_V_1_sel_rd <= not(mat_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_id_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_id_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_id_V_1_state)) or ((ap_const_logic_0 = mat_out_V_id_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_id_V_1_state)))) then 
                    mat_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_id_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_id_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_id_V_1_state)) or ((ap_const_logic_0 = mat_out_V_id_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_id_V_1_state)))) then 
                    mat_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_id_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_id_V_1_state)) or ((ap_const_logic_1 = mat_out_V_id_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_id_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_id_V_1_state) and not(((ap_const_logic_1 = mat_out_V_id_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_id_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_id_V_1_ack_out)))))) then 
                    mat_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_keep_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_keep_V_1_vld_out))) then 
                                        mat_out_V_keep_V_1_sel_rd <= not(mat_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_keep_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_keep_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_keep_V_1_state)) or ((ap_const_logic_0 = mat_out_V_keep_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_keep_V_1_state)))) then 
                    mat_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_keep_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_keep_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_keep_V_1_state)) or ((ap_const_logic_0 = mat_out_V_keep_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_keep_V_1_state)))) then 
                    mat_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_keep_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_keep_V_1_state)) or ((ap_const_logic_1 = mat_out_V_keep_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_keep_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_keep_V_1_state) and not(((ap_const_logic_1 = mat_out_V_keep_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_keep_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_keep_V_1_ack_out)))))) then 
                    mat_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_last_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_last_V_1_vld_out))) then 
                                        mat_out_V_last_V_1_sel_rd <= not(mat_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_last_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_last_V_1_ack_in))) then 
                                        mat_out_V_last_V_1_sel_wr <= not(mat_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_last_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_last_V_1_state)) or ((ap_const_logic_0 = mat_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_last_V_1_state)))) then 
                    mat_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_last_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_last_V_1_state)) or ((ap_const_logic_0 = mat_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_last_V_1_state)))) then 
                    mat_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_last_V_1_state)) or ((ap_const_logic_1 = mat_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_last_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_last_V_1_state) and not(((ap_const_logic_1 = mat_out_V_last_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_last_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_last_V_1_ack_out)))))) then 
                    mat_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_strb_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_strb_V_1_vld_out))) then 
                                        mat_out_V_strb_V_1_sel_rd <= not(mat_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_strb_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_strb_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_strb_V_1_state)) or ((ap_const_logic_0 = mat_out_V_strb_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_strb_V_1_state)))) then 
                    mat_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_strb_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_strb_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_strb_V_1_state)) or ((ap_const_logic_0 = mat_out_V_strb_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_strb_V_1_state)))) then 
                    mat_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_strb_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_strb_V_1_state)) or ((ap_const_logic_1 = mat_out_V_strb_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_strb_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_strb_V_1_state) and not(((ap_const_logic_1 = mat_out_V_strb_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_strb_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_strb_V_1_ack_out)))))) then 
                    mat_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mat_out_V_user_V_1_ack_out) and (ap_const_logic_1 = mat_out_V_user_V_1_vld_out))) then 
                                        mat_out_V_user_V_1_sel_rd <= not(mat_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mat_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mat_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mat_out_V_user_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_user_V_1_state)) or ((ap_const_logic_0 = mat_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_user_V_1_state)))) then 
                    mat_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mat_out_V_user_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_user_V_1_ack_out) and (ap_const_lv2_3 = mat_out_V_user_V_1_state)) or ((ap_const_logic_0 = mat_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_user_V_1_state)))) then 
                    mat_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mat_out_V_user_V_1_vld_in) and (ap_const_lv2_2 = mat_out_V_user_V_1_state)) or ((ap_const_logic_1 = mat_out_V_user_V_1_ack_out) and (ap_const_lv2_1 = mat_out_V_user_V_1_state)) or ((ap_const_lv2_3 = mat_out_V_user_V_1_state) and not(((ap_const_logic_1 = mat_out_V_user_V_1_vld_in) and (ap_const_logic_0 = mat_out_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = mat_out_V_user_V_1_vld_in) and (ap_const_logic_1 = mat_out_V_user_V_1_ack_out)))))) then 
                    mat_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    mat_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i3_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_7_fu_662_p2))) then 
                i3_reg_475 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then 
                i3_reg_475 <= i_12_reg_1185;
            end if; 
        end if;
    end process;

    i4_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = exitcond2_fu_888_p2))) then 
                i4_reg_486 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then 
                i4_reg_486 <= i_13_reg_1203;
            end if; 
        end if;
    end process;

    i6_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond3_fu_905_p2))) then 
                i6_reg_497 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then 
                i6_reg_497 <= i_14_reg_1221;
            end if; 
        end if;
    end process;

    i_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_515_p2))) then 
                i_1_reg_396 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_1_reg_396 <= i_7_reg_965;
            end if; 
        end if;
    end process;

    i_2_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_4_fu_532_p2))) then 
                i_2_reg_408 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_2_reg_408 <= i_8_reg_973;
            end if; 
        end if;
    end process;

    i_3_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_8_fu_549_p2))) then 
                i_3_reg_420 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_1_fu_566_p2))) then 
                i_3_reg_420 <= i_9_fu_572_p2;
            end if; 
        end if;
    end process;

    i_4_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then 
                i_4_reg_453 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_4_reg_453 <= i_10_reg_1054;
            end if; 
        end if;
    end process;

    i_5_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_5_reg_464 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_5_reg_464 <= i_11_reg_1062;
            end if; 
        end if;
    end process;

    i_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_384 <= i_6_reg_957;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_384 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then 
                indvar_flatten_reg_431 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_431 <= indvar_flatten_next_reg_1006;
            end if; 
        end if;
    end process;

    j_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then 
                j_reg_442 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_442 <= tmp_3_mid2_v_v_reg_1017;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                exitcond_flatten_reg_1002 <= exitcond_flatten_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002))) then
                i_10_reg_1054 <= i_10_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_11_reg_1062 <= i_11_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_12_reg_1185 <= i_12_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_13_reg_1203 <= i_13_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in))))) then
                i_14_reg_1221 <= i_14_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_578_p2))) then
                i_4_mid2_reg_1011 <= i_4_mid2_fu_596_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_957 <= i_6_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_7_reg_965 <= i_7_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_8_reg_973 <= i_8_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1006 <= indvar_flatten_next_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_in_V_data_V_0_load_A)) then
                mat_in_V_data_V_0_payload_A <= mat_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_in_V_data_V_0_load_B)) then
                mat_in_V_data_V_0_payload_B <= mat_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_out_V_data_V_1_load_A)) then
                mat_out_V_data_V_1_payload_A <= mat_out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_out_V_data_V_1_load_B)) then
                mat_out_V_data_V_1_payload_B <= mat_out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_out_V_last_V_1_load_A)) then
                mat_out_V_last_V_1_payload_A <= mat_out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mat_out_V_last_V_1_load_B)) then
                mat_out_V_last_V_1_payload_B <= mat_out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul1_reg_1137 <= grp_fu_708_p2;
                mul9_reg_1147 <= grp_fu_717_p2;
                mul_reg_1157 <= grp_fu_726_p2;
                tmp_32_reg_1142 <= grp_fu_708_p2(64 downto 39);
                tmp_35_reg_1152 <= grp_fu_717_p2(64 downto 39);
                tmp_38_reg_1162 <= grp_fu_726_p2(64 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002))) then
                sum_blue_addr_1_reg_1049 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
                sum_green_addr_1_reg_1039 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
                sum_red_addr_1_reg_1029 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                sum_blue_load_reg_1111 <= sum_blue_q0;
                sum_green_load_reg_1100 <= sum_green_q0;
                sum_red_load_reg_1089 <= sum_red_q0;
                tmp_30_reg_1094 <= sum_red_q0(31 downto 31);
                tmp_33_reg_1105 <= sum_green_q0(31 downto 31);
                tmp_36_reg_1116 <= sum_blue_q0(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_7_fu_662_p2))) then
                    tmp_10_reg_1067(3 downto 0) <= tmp_10_fu_674_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_11_reg_1167 <= tmp_11_fu_797_p3;
                tmp_12_reg_1172 <= tmp_12_fu_839_p3;
                tmp_13_reg_1177 <= tmp_13_fu_881_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_578_p2))) then
                tmp_3_mid2_v_v_reg_1017 <= tmp_3_mid2_v_v_fu_610_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond_fu_922_p2))) then
                tmp_last_V_reg_1231 <= tmp_last_V_fu_939_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_1067(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (mat_in_V_data_V_0_vld_out, mat_out_V_data_V_1_ack_in, mat_out_V_keep_V_1_ack_in, mat_out_V_strb_V_1_ack_in, mat_out_V_user_V_1_ack_in, mat_out_V_last_V_1_ack_in, mat_out_V_id_V_1_ack_in, mat_out_V_dest_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_8_fu_549_p2, tmp_1_fu_566_p2, ap_CS_fsm_state8, exitcond_flatten_fu_578_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, tmp_7_fu_662_p2, ap_CS_fsm_state19, exitcond2_fu_888_p2, ap_CS_fsm_state22, exitcond3_fu_905_p2, ap_CS_fsm_state25, exitcond_fu_922_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011, tmp_fu_515_p2, tmp_4_fu_532_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_515_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_4_fu_532_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_8_fu_549_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_1_fu_566_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_578_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten_fu_578_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_7_fu_662_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_1 = exitcond2_fu_888_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond3_fu_905_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in))) and (ap_const_lv1_1 = exitcond_fu_922_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in))) and (ap_const_lv1_0 = exitcond_fu_922_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_assign_proc : process(mat_out_V_data_V_1_ack_in, mat_out_V_keep_V_1_ack_in, mat_out_V_strb_V_1_ack_in, mat_out_V_user_V_1_ack_in, mat_out_V_last_V_1_ack_in, mat_out_V_id_V_1_ack_in, mat_out_V_dest_V_1_ack_in)
    begin
                ap_block_state25 <= ((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_flatten_fu_578_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_578_p2)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    blue_address0_assign_proc : process(ap_CS_fsm_state7, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_s_fu_561_p1, tmp_14_fu_630_p1, ap_block_pp0_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            blue_address0 <= tmp_14_fu_630_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            blue_address0 <= tmp_s_fu_561_p1(10 - 1 downto 0);
        else 
            blue_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    blue_ce0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state7, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            blue_ce0 <= ap_const_logic_1;
        else 
            blue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    blue_we0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            blue_we0 <= ap_const_logic_1;
        else 
            blue_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_blue_address0_assign_proc : process(tmp_10_reg_1067, ap_CS_fsm_state25, ap_CS_fsm_state18, tmp_21_fu_934_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            cell_avg_blue_address0 <= tmp_21_fu_934_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_blue_address0 <= tmp_10_reg_1067(4 - 1 downto 0);
        else 
            cell_avg_blue_address0 <= "XXXX";
        end if; 
    end process;


    cell_avg_blue_ce0_assign_proc : process(mat_out_V_data_V_1_ack_in, mat_out_V_keep_V_1_ack_in, mat_out_V_strb_V_1_ack_in, mat_out_V_user_V_1_ack_in, mat_out_V_last_V_1_ack_in, mat_out_V_id_V_1_ack_in, mat_out_V_dest_V_1_ack_in, ap_CS_fsm_state25, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = mat_out_V_data_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_keep_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_strb_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_user_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_last_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_id_V_1_ack_in) or (ap_const_logic_0 = mat_out_V_dest_V_1_ack_in)))) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cell_avg_blue_ce0 <= ap_const_logic_1;
        else 
            cell_avg_blue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_blue_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_blue_we0 <= ap_const_logic_1;
        else 
            cell_avg_blue_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_green_address0_assign_proc : process(tmp_10_reg_1067, ap_CS_fsm_state22, ap_CS_fsm_state18, tmp_20_fu_917_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            cell_avg_green_address0 <= tmp_20_fu_917_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_green_address0 <= tmp_10_reg_1067(4 - 1 downto 0);
        else 
            cell_avg_green_address0 <= "XXXX";
        end if; 
    end process;


    cell_avg_green_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cell_avg_green_ce0 <= ap_const_logic_1;
        else 
            cell_avg_green_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_green_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_green_we0 <= ap_const_logic_1;
        else 
            cell_avg_green_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_red_address0_assign_proc : process(tmp_10_reg_1067, ap_CS_fsm_state19, ap_CS_fsm_state18, tmp_19_fu_900_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            cell_avg_red_address0 <= tmp_19_fu_900_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_red_address0 <= tmp_10_reg_1067(4 - 1 downto 0);
        else 
            cell_avg_red_address0 <= "XXXX";
        end if; 
    end process;


    cell_avg_red_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            cell_avg_red_ce0 <= ap_const_logic_1;
        else 
            cell_avg_red_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cell_avg_red_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            cell_avg_red_we0 <= ap_const_logic_1;
        else 
            cell_avg_red_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_888_p2 <= "1" when (i3_reg_475 = ap_const_lv4_9) else "0";
    exitcond3_fu_905_p2 <= "1" when (i4_reg_486 = ap_const_lv4_9) else "0";
    exitcond_flatten_fu_578_p2 <= "1" when (indvar_flatten_phi_fu_435_p4 = ap_const_lv10_384) else "0";
    exitcond_fu_922_p2 <= "1" when (i6_reg_497 = ap_const_lv4_9) else "0";

    green_address0_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_6_fu_544_p1, tmp_14_fu_630_p1, ap_block_pp0_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            green_address0 <= tmp_14_fu_630_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            green_address0 <= tmp_6_fu_544_p1(10 - 1 downto 0);
        else 
            green_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    green_ce0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            green_ce0 <= ap_const_logic_1;
        else 
            green_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    green_we0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            green_we0 <= ap_const_logic_1;
        else 
            green_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_708_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_717_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_726_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_945_p0 <= grp_fu_945_p00(4 - 1 downto 0);
    grp_fu_945_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_v_reg_1017),10));
    grp_fu_945_p1 <= ap_const_lv10_64(8 - 1 downto 0);
    grp_fu_945_p2 <= grp_fu_945_p20(7 - 1 downto 0);
    grp_fu_945_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_mid2_reg_1011),10));
    i_10_fu_636_p2 <= std_logic_vector(unsigned(i_4_mid2_reg_1011) + unsigned(ap_const_lv7_1));
    i_11_fu_668_p2 <= std_logic_vector(unsigned(i_5_reg_464) + unsigned(ap_const_lv4_1));
    i_12_fu_894_p2 <= std_logic_vector(unsigned(i3_reg_475) + unsigned(ap_const_lv4_1));
    i_13_fu_911_p2 <= std_logic_vector(unsigned(i4_reg_486) + unsigned(ap_const_lv4_1));
    i_14_fu_928_p2 <= std_logic_vector(unsigned(i6_reg_497) + unsigned(ap_const_lv4_1));
    i_4_mid2_fu_596_p3 <= 
        ap_const_lv7_0 when (tmp_9_fu_590_p2(0) = '1') else 
        i_4_phi_fu_457_p4;

    i_4_phi_fu_457_p4_assign_proc : process(i_4_reg_453, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, i_10_reg_1054, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_4_phi_fu_457_p4 <= i_10_reg_1054;
        else 
            i_4_phi_fu_457_p4 <= i_4_reg_453;
        end if; 
    end process;

    i_6_fu_521_p2 <= std_logic_vector(unsigned(i_reg_384) + unsigned(ap_const_lv10_1));
    i_7_fu_538_p2 <= std_logic_vector(unsigned(i_1_reg_396) + unsigned(ap_const_lv10_1));
    i_8_fu_555_p2 <= std_logic_vector(unsigned(i_2_reg_408) + unsigned(ap_const_lv10_1));
    i_9_fu_572_p2 <= std_logic_vector(unsigned(i_3_reg_420) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_584_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_435_p4) + unsigned(ap_const_lv10_1));

    indvar_flatten_phi_fu_435_p4_assign_proc : process(indvar_flatten_reg_431, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_1006, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_435_p4 <= indvar_flatten_next_reg_1006;
        else 
            indvar_flatten_phi_fu_435_p4 <= indvar_flatten_reg_431;
        end if; 
    end process;


    j_phi_fu_446_p4_assign_proc : process(j_reg_442, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, tmp_3_mid2_v_v_reg_1017, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_446_p4 <= tmp_3_mid2_v_v_reg_1017;
        else 
            j_phi_fu_446_p4 <= j_reg_442;
        end if; 
    end process;

    j_s_fu_604_p2 <= std_logic_vector(unsigned(j_phi_fu_446_p4) + unsigned(ap_const_lv4_1));

    mat_in_TDATA_blk_n_assign_proc : process(mat_in_V_data_V_0_state, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            mat_in_TDATA_blk_n <= mat_in_V_data_V_0_state(0);
        else 
            mat_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_in_TREADY <= mat_in_V_dest_V_0_state(1);
    mat_in_V_data_V_0_ack_in <= mat_in_V_data_V_0_state(1);

    mat_in_V_data_V_0_ack_out_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            mat_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            mat_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mat_in_V_data_V_0_data_out_assign_proc : process(mat_in_V_data_V_0_payload_A, mat_in_V_data_V_0_payload_B, mat_in_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = mat_in_V_data_V_0_sel)) then 
            mat_in_V_data_V_0_data_out <= mat_in_V_data_V_0_payload_B;
        else 
            mat_in_V_data_V_0_data_out <= mat_in_V_data_V_0_payload_A;
        end if; 
    end process;

    mat_in_V_data_V_0_load_A <= (mat_in_V_data_V_0_state_cmp_full and not(mat_in_V_data_V_0_sel_wr));
    mat_in_V_data_V_0_load_B <= (mat_in_V_data_V_0_sel_wr and mat_in_V_data_V_0_state_cmp_full);
    mat_in_V_data_V_0_sel <= mat_in_V_data_V_0_sel_rd;
    mat_in_V_data_V_0_state_cmp_full <= '0' when (mat_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    mat_in_V_data_V_0_vld_in <= mat_in_TVALID;
    mat_in_V_data_V_0_vld_out <= mat_in_V_data_V_0_state(0);

    mat_in_V_dest_V_0_ack_out_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            mat_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            mat_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    mat_in_V_dest_V_0_vld_in <= mat_in_TVALID;
    mat_out_TDATA <= mat_out_V_data_V_1_data_out;

    mat_out_TDATA_blk_n_assign_proc : process(mat_out_V_data_V_1_state, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            mat_out_TDATA_blk_n <= mat_out_V_data_V_1_state(1);
        else 
            mat_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mat_out_TDEST <= mat_out_V_dest_V_1_data_out;
    mat_out_TID <= mat_out_V_id_V_1_data_out;
    mat_out_TKEEP <= mat_out_V_keep_V_1_data_out;
    mat_out_TLAST <= mat_out_V_last_V_1_data_out;
    mat_out_TSTRB <= mat_out_V_strb_V_1_data_out;
    mat_out_TUSER <= mat_out_V_user_V_1_data_out;
    mat_out_TVALID <= mat_out_V_dest_V_1_state(0);
    mat_out_V_data_V_1_ack_in <= mat_out_V_data_V_1_state(1);
    mat_out_V_data_V_1_ack_out <= mat_out_TREADY;

    mat_out_V_data_V_1_data_in_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, cell_avg_red_q0, cell_avg_green_q0, cell_avg_blue_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            mat_out_V_data_V_1_data_in <= cell_avg_blue_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            mat_out_V_data_V_1_data_in <= cell_avg_green_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            mat_out_V_data_V_1_data_in <= cell_avg_red_q0;
        else 
            mat_out_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mat_out_V_data_V_1_data_out_assign_proc : process(mat_out_V_data_V_1_payload_A, mat_out_V_data_V_1_payload_B, mat_out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = mat_out_V_data_V_1_sel)) then 
            mat_out_V_data_V_1_data_out <= mat_out_V_data_V_1_payload_B;
        else 
            mat_out_V_data_V_1_data_out <= mat_out_V_data_V_1_payload_A;
        end if; 
    end process;

    mat_out_V_data_V_1_load_A <= (mat_out_V_data_V_1_state_cmp_full and not(mat_out_V_data_V_1_sel_wr));
    mat_out_V_data_V_1_load_B <= (mat_out_V_data_V_1_sel_wr and mat_out_V_data_V_1_state_cmp_full);
    mat_out_V_data_V_1_sel <= mat_out_V_data_V_1_sel_rd;
    mat_out_V_data_V_1_state_cmp_full <= '0' when (mat_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    mat_out_V_data_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_data_V_1_vld_out <= mat_out_V_data_V_1_state(0);
    mat_out_V_dest_V_1_ack_in <= mat_out_V_dest_V_1_state(1);
    mat_out_V_dest_V_1_ack_out <= mat_out_TREADY;
    mat_out_V_dest_V_1_data_out <= ap_const_lv1_0;
    mat_out_V_dest_V_1_sel <= mat_out_V_dest_V_1_sel_rd;

    mat_out_V_dest_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_dest_V_1_vld_out <= mat_out_V_dest_V_1_state(0);
    mat_out_V_id_V_1_ack_in <= mat_out_V_id_V_1_state(1);
    mat_out_V_id_V_1_ack_out <= mat_out_TREADY;
    mat_out_V_id_V_1_data_out <= ap_const_lv1_0;
    mat_out_V_id_V_1_sel <= mat_out_V_id_V_1_sel_rd;

    mat_out_V_id_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_id_V_1_vld_out <= mat_out_V_id_V_1_state(0);
    mat_out_V_keep_V_1_ack_in <= mat_out_V_keep_V_1_state(1);
    mat_out_V_keep_V_1_ack_out <= mat_out_TREADY;
    mat_out_V_keep_V_1_data_out <= ap_const_lv4_F;
    mat_out_V_keep_V_1_sel <= mat_out_V_keep_V_1_sel_rd;

    mat_out_V_keep_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_keep_V_1_vld_out <= mat_out_V_keep_V_1_state(0);
    mat_out_V_last_V_1_ack_in <= mat_out_V_last_V_1_state(1);
    mat_out_V_last_V_1_ack_out <= mat_out_TREADY;

    mat_out_V_last_V_1_data_in_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, tmp_last_V_reg_1231)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            mat_out_V_last_V_1_data_in <= tmp_last_V_reg_1231;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            mat_out_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            mat_out_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    mat_out_V_last_V_1_data_out_assign_proc : process(mat_out_V_last_V_1_payload_A, mat_out_V_last_V_1_payload_B, mat_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = mat_out_V_last_V_1_sel)) then 
            mat_out_V_last_V_1_data_out <= mat_out_V_last_V_1_payload_B;
        else 
            mat_out_V_last_V_1_data_out <= mat_out_V_last_V_1_payload_A;
        end if; 
    end process;

    mat_out_V_last_V_1_load_A <= (mat_out_V_last_V_1_state_cmp_full and not(mat_out_V_last_V_1_sel_wr));
    mat_out_V_last_V_1_load_B <= (mat_out_V_last_V_1_sel_wr and mat_out_V_last_V_1_state_cmp_full);
    mat_out_V_last_V_1_sel <= mat_out_V_last_V_1_sel_rd;
    mat_out_V_last_V_1_state_cmp_full <= '0' when (mat_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    mat_out_V_last_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_last_V_1_vld_out <= mat_out_V_last_V_1_state(0);
    mat_out_V_strb_V_1_ack_in <= mat_out_V_strb_V_1_state(1);
    mat_out_V_strb_V_1_ack_out <= mat_out_TREADY;
    mat_out_V_strb_V_1_data_out <= ap_const_lv4_F;
    mat_out_V_strb_V_1_sel <= mat_out_V_strb_V_1_sel_rd;

    mat_out_V_strb_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_strb_V_1_vld_out <= mat_out_V_strb_V_1_state(0);
    mat_out_V_user_V_1_ack_in <= mat_out_V_user_V_1_state(1);
    mat_out_V_user_V_1_ack_out <= mat_out_TREADY;
    mat_out_V_user_V_1_data_out <= ap_const_lv1_0;
    mat_out_V_user_V_1_sel <= mat_out_V_user_V_1_sel_rd;

    mat_out_V_user_V_1_vld_in_assign_proc : process(mat_out_V_data_V_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mat_out_V_data_V_1_ack_in = ap_const_logic_1)))) then 
            mat_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            mat_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    mat_out_V_user_V_1_vld_out <= mat_out_V_user_V_1_state(0);
    neg_mul1_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul1_reg_1137));
    neg_mul2_fu_804_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul9_reg_1147));
    neg_mul_fu_846_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_1157));
    neg_ti1_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_23_fu_784_p3));
    neg_ti2_fu_833_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_26_fu_826_p3));
    neg_ti_fu_875_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_29_fu_868_p3));

    red_address0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_2_fu_527_p1, tmp_14_fu_630_p1, ap_block_pp0_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            red_address0 <= tmp_14_fu_630_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            red_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        else 
            red_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    red_ce0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            red_ce0 <= ap_const_logic_1;
        else 
            red_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    red_we0_assign_proc : process(mat_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (mat_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            red_we0 <= ap_const_logic_1;
        else 
            red_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_blue_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, sum_blue_addr_1_reg_1049, ap_CS_fsm_state13, tmp_10_fu_674_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_5_mid2_fu_621_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sum_blue_address0 <= tmp_10_fu_674_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_blue_address0 <= sum_blue_addr_1_reg_1049;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            sum_blue_address0 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_blue_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sum_blue_address0 <= "XXXX";
        end if; 
    end process;


    sum_blue_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_blue_ce0 <= ap_const_logic_1;
        else 
            sum_blue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_blue_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_17_fu_655_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_blue_d0 <= tmp_17_fu_655_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_blue_d0 <= ap_const_lv32_0;
        else 
            sum_blue_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_blue_we0_assign_proc : process(tmp_1_fu_566_p2, ap_CS_fsm_state8, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_1_fu_566_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_blue_we0 <= ap_const_logic_1;
        else 
            sum_blue_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_green_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, sum_green_addr_1_reg_1039, ap_CS_fsm_state13, tmp_10_fu_674_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_5_mid2_fu_621_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sum_green_address0 <= tmp_10_fu_674_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_green_address0 <= sum_green_addr_1_reg_1039;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            sum_green_address0 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_green_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sum_green_address0 <= "XXXX";
        end if; 
    end process;


    sum_green_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_green_ce0 <= ap_const_logic_1;
        else 
            sum_green_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_green_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_16_fu_648_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_green_d0 <= tmp_16_fu_648_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_green_d0 <= ap_const_lv32_0;
        else 
            sum_green_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_green_we0_assign_proc : process(tmp_1_fu_566_p2, ap_CS_fsm_state8, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_1_fu_566_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_green_we0 <= ap_const_logic_1;
        else 
            sum_green_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_red_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, sum_red_addr_1_reg_1029, ap_CS_fsm_state13, tmp_10_fu_674_p1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_5_mid2_fu_621_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sum_red_address0 <= tmp_10_fu_674_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_red_address0 <= sum_red_addr_1_reg_1029;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            sum_red_address0 <= tmp_5_mid2_fu_621_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_red_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            sum_red_address0 <= "XXXX";
        end if; 
    end process;


    sum_red_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_state13, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_red_ce0 <= ap_const_logic_1;
        else 
            sum_red_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_red_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_15_fu_641_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            sum_red_d0 <= tmp_15_fu_641_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sum_red_d0 <= ap_const_lv32_0;
        else 
            sum_red_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_red_we0_assign_proc : process(tmp_1_fu_566_p2, ap_CS_fsm_state8, exitcond_flatten_reg_1002, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_1_fu_566_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1002) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            sum_red_we0 <= ap_const_logic_1;
        else 
            sum_red_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_464),64));
    tmp_11_fu_797_p3 <= 
        neg_ti1_fu_791_p2 when (tmp_30_reg_1094(0) = '1') else 
        tmp_22_fu_781_p1;
    tmp_12_fu_839_p3 <= 
        neg_ti2_fu_833_p2 when (tmp_33_reg_1105(0) = '1') else 
        tmp_25_fu_823_p1;
    tmp_13_fu_881_p3 <= 
        neg_ti_fu_875_p2 when (tmp_36_reg_1116(0) = '1') else 
        tmp_28_fu_865_p1;
    tmp_14_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_945_p3),64));
    tmp_15_fu_641_p2 <= std_logic_vector(unsigned(sum_red_q0) + unsigned(red_q0));
    tmp_16_fu_648_p2 <= std_logic_vector(unsigned(sum_green_q0) + unsigned(green_q0));
    tmp_17_fu_655_p2 <= std_logic_vector(unsigned(sum_blue_q0) + unsigned(blue_q0));
        tmp_18_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_767_p4),32));

    tmp_19_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_475),64));
    tmp_1_fu_566_p2 <= "1" when (i_3_reg_420 = ap_const_lv4_9) else "0";
    tmp_20_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_486),64));
    tmp_21_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_reg_497),64));
        tmp_22_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_reg_1142),32));

    tmp_23_fu_784_p3 <= 
        tmp_18_fu_777_p1 when (tmp_30_reg_1094(0) = '1') else 
        tmp_22_fu_781_p1;
        tmp_24_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_809_p4),32));

        tmp_25_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_reg_1152),32));

    tmp_26_fu_826_p3 <= 
        tmp_24_fu_819_p1 when (tmp_33_reg_1105(0) = '1') else 
        tmp_25_fu_823_p1;
        tmp_27_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_851_p4),32));

        tmp_28_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_reg_1162),32));

    tmp_29_fu_868_p3 <= 
        tmp_27_fu_861_p1 when (tmp_36_reg_1116(0) = '1') else 
        tmp_28_fu_865_p1;
    tmp_2_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_384),64));
    tmp_31_fu_767_p4 <= neg_mul1_fu_762_p2(64 downto 39);
    tmp_34_fu_809_p4 <= neg_mul2_fu_804_p2(64 downto 39);
    tmp_37_fu_851_p4 <= neg_mul_fu_846_p2(64 downto 39);
    tmp_3_mid2_v_v_fu_610_p3 <= 
        j_s_fu_604_p2 when (tmp_9_fu_590_p2(0) = '1') else 
        j_phi_fu_446_p4;
    tmp_4_fu_532_p2 <= "1" when (i_1_reg_396 = ap_const_lv10_384) else "0";
    tmp_5_mid2_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_mid2_v_v_reg_1017),64));
    tmp_6_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_396),64));
    tmp_7_fu_662_p2 <= "1" when (i_5_reg_464 = ap_const_lv4_9) else "0";
    tmp_8_fu_549_p2 <= "1" when (i_2_reg_408 = ap_const_lv10_384) else "0";
    tmp_9_fu_590_p2 <= "1" when (i_4_phi_fu_457_p4 = ap_const_lv7_64) else "0";
    tmp_fu_515_p2 <= "1" when (i_reg_384 = ap_const_lv10_384) else "0";
    tmp_last_V_fu_939_p2 <= "1" when (i6_reg_497 = ap_const_lv4_8) else "0";
    tmp_s_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_408),64));
end behav;

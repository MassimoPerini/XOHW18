

================================================================
== Vivado HLS Report for 'matrixAvg'
================================================================
* Date:           Sat Jun 30 19:25:53 2018

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        matrixAvg
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      9.63|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  7354|  7354|  7355|  7355|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1  |  1800|  1800|         2|          -|          -|   900|    no    |
        |- Loop 2  |  1800|  1800|         2|          -|          -|   900|    no    |
        |- Loop 3  |  1800|  1800|         2|          -|          -|   900|    no    |
        |- Loop 4  |     9|     9|         1|          -|          -|     9|    no    |
        |- Loop 5  |  1800|  1800|         3|          2|          1|   900|    yes   |
        |- Loop 6  |    54|    54|         6|          -|          -|     9|    no    |
        |- Loop 7  |    27|    27|         3|          -|          -|     9|    no    |
        |- Loop 8  |    27|    27|         3|          -|          -|     9|    no    |
        |- Loop 9  |    27|    27|         3|          -|          -|     9|    no    |
        +----------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 2, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 27
* Pipeline: 1
  Pipeline-0: II = 2, D = 3, States = { 9 10 11 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!tmp)
	4  / (tmp)
3 --> 
	2  / true
4 --> 
	5  / (!tmp_4)
	6  / (tmp_4)
5 --> 
	4  / true
6 --> 
	7  / (!tmp_8)
	8  / (tmp_8)
7 --> 
	6  / true
8 --> 
	8  / (!tmp_1)
	9  / (tmp_1)
9 --> 
	12  / (exitcond_flatten)
	10  / (!exitcond_flatten)
10 --> 
	11  / true
11 --> 
	9  / true
12 --> 
	13  / true
13 --> 
	14  / (!tmp_7)
	19  / (tmp_7)
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	13  / true
19 --> 
	20  / (!exitcond2)
	22  / (exitcond2)
20 --> 
	21  / true
21 --> 
	19  / true
22 --> 
	23  / (!exitcond3)
	25  / (exitcond3)
23 --> 
	24  / true
24 --> 
	22  / true
25 --> 
	26  / (!exitcond)
26 --> 
	27  / true
27 --> 
	25  / true
* FSM state operations: 

 <State 1>: 1.59ns
ST_1: StgValue_28 (15)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %mat_in_V_data_V), !map !42

ST_1: StgValue_29 (16)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i4* %mat_in_V_keep_V), !map !46

ST_1: StgValue_30 (17)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i4* %mat_in_V_strb_V), !map !50

ST_1: StgValue_31 (18)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_in_V_user_V), !map !54

ST_1: StgValue_32 (19)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_in_V_last_V), !map !58

ST_1: StgValue_33 (20)  [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_in_V_id_V), !map !62

ST_1: StgValue_34 (21)  [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_in_V_dest_V), !map !66

ST_1: StgValue_35 (22)  [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap(i32* %mat_out_V_data_V), !map !70

ST_1: StgValue_36 (23)  [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap(i4* %mat_out_V_keep_V), !map !74

ST_1: StgValue_37 (24)  [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap(i4* %mat_out_V_strb_V), !map !78

ST_1: StgValue_38 (25)  [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_out_V_user_V), !map !82

ST_1: StgValue_39 (26)  [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_out_V_last_V), !map !86

ST_1: StgValue_40 (27)  [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_out_V_id_V), !map !90

ST_1: StgValue_41 (28)  [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap(i1* %mat_out_V_dest_V), !map !94

ST_1: StgValue_42 (29)  [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecTopModule([10 x i8]* @matrixAvg_str) nounwind

ST_1: red (30)  [1/1] 0.00ns  loc: matrix.cpp:48
:15  %red = alloca [900 x i32], align 16

ST_1: green (31)  [1/1] 0.00ns  loc: matrix.cpp:49
:16  %green = alloca [900 x i32], align 16

ST_1: blue (32)  [1/1] 0.00ns  loc: matrix.cpp:50
:17  %blue = alloca [900 x i32], align 16

ST_1: cell_avg_red (33)  [1/1] 0.00ns  loc: matrix.cpp:51
:18  %cell_avg_red = alloca [9 x i32], align 4

ST_1: cell_avg_blue (34)  [1/1] 0.00ns  loc: matrix.cpp:51
:19  %cell_avg_blue = alloca [9 x i32], align 4

ST_1: cell_avg_green (35)  [1/1] 0.00ns  loc: matrix.cpp:51
:20  %cell_avg_green = alloca [9 x i32], align 4

ST_1: sum_red (36)  [1/1] 0.00ns  loc: matrix.cpp:54
:21  %sum_red = alloca [9 x i32], align 16

ST_1: sum_blue (37)  [1/1] 0.00ns  loc: matrix.cpp:55
:22  %sum_blue = alloca [9 x i32], align 16

ST_1: sum_green (38)  [1/1] 0.00ns  loc: matrix.cpp:56
:23  %sum_green = alloca [9 x i32], align 16

ST_1: StgValue_52 (39)  [1/1] 0.00ns  loc: matrix.cpp:43
:24  call void (...)* @_ssdm_op_SpecInterface(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind

ST_1: StgValue_53 (40)  [1/1] 0.00ns  loc: matrix.cpp:44
:25  call void (...)* @_ssdm_op_SpecInterface(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, [5 x i8]* @p_str, i32 1, i32 1, [5 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind

ST_1: StgValue_54 (41)  [1/1] 0.00ns  loc: matrix.cpp:45
:26  call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str3, i32 0, i32 0, [1 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind

ST_1: StgValue_55 (42)  [1/1] 1.59ns  loc: matrix.cpp:59
:27  br label %1


 <State 2>: 5.09ns
ST_2: i (44)  [1/1] 0.00ns
:0  %i = phi i10 [ 0, %0 ], [ %i_6, %2 ]

ST_2: tmp (45)  [1/1] 3.02ns  loc: matrix.cpp:59
:1  %tmp = icmp eq i10 %i, -124

ST_2: empty (46)  [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 900, i64 900, i64 900)

ST_2: i_6 (47)  [1/1] 2.32ns  loc: matrix.cpp:59
:3  %i_6 = add i10 %i, 1

ST_2: StgValue_60 (48)  [1/1] 0.00ns  loc: matrix.cpp:59
:4  br i1 %tmp, label %.preheader22.preheader, label %2

ST_2: empty_5 (50)  [2/2] 0.00ns  loc: matrix.cpp:61
:0  %empty_5 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_2: StgValue_62 (57)  [1/1] 1.59ns  loc: matrix.cpp:66
.preheader22.preheader:0  br label %.preheader22


 <State 3>: 3.25ns
ST_3: empty_5 (50)  [1/2] 0.00ns  loc: matrix.cpp:61
:0  %empty_5 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_3: tmp_data_V (51)  [1/1] 0.00ns  loc: matrix.cpp:61
:1  %tmp_data_V = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_5, 0

ST_3: tmp_2 (52)  [1/1] 0.00ns  loc: matrix.cpp:63
:2  %tmp_2 = zext i10 %i to i64

ST_3: red_addr (53)  [1/1] 0.00ns  loc: matrix.cpp:63
:3  %red_addr = getelementptr inbounds [900 x i32]* %red, i64 0, i64 %tmp_2

ST_3: StgValue_67 (54)  [1/1] 3.25ns  loc: matrix.cpp:63
:4  store i32 %tmp_data_V, i32* %red_addr, align 4

ST_3: StgValue_68 (55)  [1/1] 0.00ns  loc: matrix.cpp:59
:5  br label %1


 <State 4>: 5.09ns
ST_4: i_1 (59)  [1/1] 0.00ns
.preheader22:0  %i_1 = phi i10 [ %i_7, %3 ], [ 0, %.preheader22.preheader ]

ST_4: tmp_4 (60)  [1/1] 3.02ns  loc: matrix.cpp:66
.preheader22:1  %tmp_4 = icmp eq i10 %i_1, -124

ST_4: empty_6 (61)  [1/1] 0.00ns
.preheader22:2  %empty_6 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 900, i64 900, i64 900)

ST_4: i_7 (62)  [1/1] 2.32ns  loc: matrix.cpp:66
.preheader22:3  %i_7 = add i10 %i_1, 1

ST_4: StgValue_73 (63)  [1/1] 0.00ns  loc: matrix.cpp:66
.preheader22:4  br i1 %tmp_4, label %.preheader21.preheader, label %3

ST_4: empty_7 (65)  [2/2] 0.00ns  loc: matrix.cpp:68
:0  %empty_7 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_4: StgValue_75 (72)  [1/1] 1.59ns  loc: matrix.cpp:72
.preheader21.preheader:0  br label %.preheader21


 <State 5>: 3.25ns
ST_5: empty_7 (65)  [1/2] 0.00ns  loc: matrix.cpp:68
:0  %empty_7 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_5: tmp_data_V_1 (66)  [1/1] 0.00ns  loc: matrix.cpp:68
:1  %tmp_data_V_1 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_7, 0

ST_5: tmp_6 (67)  [1/1] 0.00ns  loc: matrix.cpp:69
:2  %tmp_6 = zext i10 %i_1 to i64

ST_5: green_addr (68)  [1/1] 0.00ns  loc: matrix.cpp:69
:3  %green_addr = getelementptr inbounds [900 x i32]* %green, i64 0, i64 %tmp_6

ST_5: StgValue_80 (69)  [1/1] 3.25ns  loc: matrix.cpp:69
:4  store i32 %tmp_data_V_1, i32* %green_addr, align 4

ST_5: StgValue_81 (70)  [1/1] 0.00ns  loc: matrix.cpp:66
:5  br label %.preheader22


 <State 6>: 5.09ns
ST_6: i_2 (74)  [1/1] 0.00ns
.preheader21:0  %i_2 = phi i10 [ %i_8, %4 ], [ 0, %.preheader21.preheader ]

ST_6: tmp_8 (75)  [1/1] 3.02ns  loc: matrix.cpp:72
.preheader21:1  %tmp_8 = icmp eq i10 %i_2, -124

ST_6: empty_8 (76)  [1/1] 0.00ns
.preheader21:2  %empty_8 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 900, i64 900, i64 900)

ST_6: i_8 (77)  [1/1] 2.32ns  loc: matrix.cpp:72
.preheader21:3  %i_8 = add i10 %i_2, 1

ST_6: StgValue_86 (78)  [1/1] 0.00ns  loc: matrix.cpp:72
.preheader21:4  br i1 %tmp_8, label %.preheader20.preheader, label %4

ST_6: empty_9 (80)  [2/2] 0.00ns  loc: matrix.cpp:74
:0  %empty_9 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_6: sum_red_addr (87)  [1/1] 0.00ns  loc: matrix.cpp:78
.preheader20.preheader:0  %sum_red_addr = getelementptr inbounds [9 x i32]* %sum_red, i64 0, i64 0

ST_6: sum_blue_addr (88)  [1/1] 0.00ns  loc: matrix.cpp:79
.preheader20.preheader:1  %sum_blue_addr = getelementptr inbounds [9 x i32]* %sum_blue, i64 0, i64 0

ST_6: sum_green_addr (89)  [1/1] 0.00ns  loc: matrix.cpp:80
.preheader20.preheader:2  %sum_green_addr = getelementptr inbounds [9 x i32]* %sum_green, i64 0, i64 0

ST_6: StgValue_91 (90)  [1/1] 1.59ns  loc: matrix.cpp:77
.preheader20.preheader:3  br label %.preheader20


 <State 7>: 3.25ns
ST_7: empty_9 (80)  [1/2] 0.00ns  loc: matrix.cpp:74
:0  %empty_9 = call { i32, i4, i4, i1, i1, i1, i1 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_in_V_data_V, i4* %mat_in_V_keep_V, i4* %mat_in_V_strb_V, i1* %mat_in_V_user_V, i1* %mat_in_V_last_V, i1* %mat_in_V_id_V, i1* %mat_in_V_dest_V)

ST_7: tmp_data_V_2 (81)  [1/1] 0.00ns  loc: matrix.cpp:74
:1  %tmp_data_V_2 = extractvalue { i32, i4, i4, i1, i1, i1, i1 } %empty_9, 0

ST_7: tmp_s (82)  [1/1] 0.00ns  loc: matrix.cpp:75
:2  %tmp_s = zext i10 %i_2 to i64

ST_7: blue_addr (83)  [1/1] 0.00ns  loc: matrix.cpp:75
:3  %blue_addr = getelementptr inbounds [900 x i32]* %blue, i64 0, i64 %tmp_s

ST_7: StgValue_96 (84)  [1/1] 3.25ns  loc: matrix.cpp:75
:4  store i32 %tmp_data_V_2, i32* %blue_addr, align 4

ST_7: StgValue_97 (85)  [1/1] 0.00ns  loc: matrix.cpp:72
:5  br label %.preheader21


 <State 8>: 5.17ns
ST_8: i_3 (92)  [1/1] 0.00ns
.preheader20:0  %i_3 = phi i4 [ %i_9, %5 ], [ 0, %.preheader20.preheader ]

ST_8: tmp_1 (93)  [1/1] 3.10ns  loc: matrix.cpp:77
.preheader20:1  %tmp_1 = icmp eq i4 %i_3, -7

ST_8: empty_10 (94)  [1/1] 0.00ns
.preheader20:2  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)

ST_8: i_9 (95)  [1/1] 2.35ns  loc: matrix.cpp:77
.preheader20:3  %i_9 = add i4 %i_3, 1

ST_8: StgValue_102 (96)  [1/1] 0.00ns  loc: matrix.cpp:77
.preheader20:4  br i1 %tmp_1, label %.preheader18.preheader, label %5

ST_8: StgValue_103 (98)  [1/1] 2.32ns  loc: matrix.cpp:78
:0  store i32 0, i32* %sum_red_addr, align 16

ST_8: StgValue_104 (99)  [1/1] 2.32ns  loc: matrix.cpp:79
:1  store i32 0, i32* %sum_blue_addr, align 16

ST_8: StgValue_105 (100)  [1/1] 2.32ns  loc: matrix.cpp:80
:2  store i32 0, i32* %sum_green_addr, align 16

ST_8: StgValue_106 (101)  [1/1] 0.00ns  loc: matrix.cpp:77
:3  br label %.preheader20

ST_8: StgValue_107 (103)  [1/1] 1.59ns
.preheader18.preheader:0  br label %.preheader18


 <State 9>: 5.09ns
ST_9: indvar_flatten (105)  [1/1] 0.00ns
.preheader18:0  %indvar_flatten = phi i10 [ %indvar_flatten_next, %.preheader19 ], [ 0, %.preheader18.preheader ]

ST_9: j (106)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader18:1  %j = phi i4 [ %tmp_3_mid2_v_v, %.preheader19 ], [ 0, %.preheader18.preheader ]

ST_9: i_4 (107)  [1/1] 0.00ns
.preheader18:2  %i_4 = phi i7 [ %i_10, %.preheader19 ], [ 0, %.preheader18.preheader ]

ST_9: exitcond_flatten (108)  [1/1] 3.02ns
.preheader18:3  %exitcond_flatten = icmp eq i10 %indvar_flatten, -124

ST_9: indvar_flatten_next (109)  [1/1] 2.32ns
.preheader18:4  %indvar_flatten_next = add i10 %indvar_flatten, 1

ST_9: StgValue_113 (110)  [1/1] 0.00ns
.preheader18:5  br i1 %exitcond_flatten, label %.preheader17.preheader, label %.preheader19

ST_9: tmp_9 (113)  [1/1] 2.91ns  loc: matrix.cpp:84
.preheader19:1  %tmp_9 = icmp eq i7 %i_4, -28

ST_9: i_4_mid2 (114)  [1/1] 2.07ns  loc: matrix.cpp:84
.preheader19:2  %i_4_mid2 = select i1 %tmp_9, i7 0, i7 %i_4

ST_9: j_s (115)  [1/1] 2.35ns  loc: matrix.cpp:83
.preheader19:3  %j_s = add i4 %j, 1

ST_9: tmp_3_mid2_v_v (116)  [1/1] 2.07ns  loc: matrix.cpp:86
.preheader19:4  %tmp_3_mid2_v_v = select i1 %tmp_9, i4 %j_s, i4 %j


 <State 10>: 9.63ns
ST_10: tmp_3_mid2_v (117)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader19:5  %tmp_3_mid2_v = zext i4 %tmp_3_mid2_v_v to i10

ST_10: tmp_3_mid2 (118)  [1/1] 3.36ns  loc: matrix.cpp:86
.preheader19:6  %tmp_3_mid2 = mul i10 %tmp_3_mid2_v, 100

ST_10: tmp_5_mid2 (119)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader19:7  %tmp_5_mid2 = zext i4 %tmp_3_mid2_v_v to i64

ST_10: i_4_cast5 (120)  [1/1] 0.00ns  loc: matrix.cpp:84
.preheader19:8  %i_4_cast5 = zext i7 %i_4_mid2 to i10

ST_10: tmp_5 (123)  [1/1] 3.02ns  loc: matrix.cpp:86
.preheader19:11  %tmp_5 = add i10 %i_4_cast5, %tmp_3_mid2

ST_10: tmp_14 (124)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader19:12  %tmp_14 = zext i10 %tmp_5 to i64

ST_10: red_addr_1 (125)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader19:13  %red_addr_1 = getelementptr inbounds [900 x i32]* %red, i64 0, i64 %tmp_14

ST_10: red_load (126)  [2/2] 3.25ns  loc: matrix.cpp:86
.preheader19:14  %red_load = load i32* %red_addr_1, align 4

ST_10: sum_red_addr_1 (127)  [1/1] 0.00ns  loc: matrix.cpp:86
.preheader19:15  %sum_red_addr_1 = getelementptr inbounds [9 x i32]* %sum_red, i64 0, i64 %tmp_5_mid2

ST_10: sum_red_load_1 (128)  [2/2] 2.32ns  loc: matrix.cpp:86
.preheader19:16  %sum_red_load_1 = load i32* %sum_red_addr_1, align 4

ST_10: green_addr_1 (131)  [1/1] 0.00ns  loc: matrix.cpp:87
.preheader19:19  %green_addr_1 = getelementptr inbounds [900 x i32]* %green, i64 0, i64 %tmp_14

ST_10: green_load (132)  [2/2] 3.25ns  loc: matrix.cpp:87
.preheader19:20  %green_load = load i32* %green_addr_1, align 4

ST_10: sum_green_addr_1 (133)  [1/1] 0.00ns  loc: matrix.cpp:87
.preheader19:21  %sum_green_addr_1 = getelementptr inbounds [9 x i32]* %sum_green, i64 0, i64 %tmp_5_mid2

ST_10: sum_green_load_1 (134)  [2/2] 2.32ns  loc: matrix.cpp:87
.preheader19:22  %sum_green_load_1 = load i32* %sum_green_addr_1, align 4

ST_10: blue_addr_1 (137)  [1/1] 0.00ns  loc: matrix.cpp:88
.preheader19:25  %blue_addr_1 = getelementptr inbounds [900 x i32]* %blue, i64 0, i64 %tmp_14

ST_10: blue_load (138)  [2/2] 3.25ns  loc: matrix.cpp:88
.preheader19:26  %blue_load = load i32* %blue_addr_1, align 4

ST_10: sum_blue_addr_1 (139)  [1/1] 0.00ns  loc: matrix.cpp:88
.preheader19:27  %sum_blue_addr_1 = getelementptr inbounds [9 x i32]* %sum_blue, i64 0, i64 %tmp_5_mid2

ST_10: sum_blue_load_1 (140)  [2/2] 2.32ns  loc: matrix.cpp:88
.preheader19:28  %sum_blue_load_1 = load i32* %sum_blue_addr_1, align 4

ST_10: i_10 (144)  [1/1] 2.32ns  loc: matrix.cpp:84
.preheader19:32  %i_10 = add i7 %i_4_mid2, 1


 <State 11>: 8.47ns
ST_11: empty_11 (112)  [1/1] 0.00ns
.preheader19:0  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 900, i64 900, i64 900)

ST_11: tmp_3 (121)  [1/1] 0.00ns  loc: matrix.cpp:84
.preheader19:9  %tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str4)

ST_11: StgValue_139 (122)  [1/1] 0.00ns  loc: matrix.cpp:85
.preheader19:10  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind

ST_11: red_load (126)  [1/2] 3.25ns  loc: matrix.cpp:86
.preheader19:14  %red_load = load i32* %red_addr_1, align 4

ST_11: sum_red_load_1 (128)  [1/2] 2.32ns  loc: matrix.cpp:86
.preheader19:16  %sum_red_load_1 = load i32* %sum_red_addr_1, align 4

ST_11: tmp_15 (129)  [1/1] 2.90ns  loc: matrix.cpp:86
.preheader19:17  %tmp_15 = add nsw i32 %sum_red_load_1, %red_load

ST_11: StgValue_143 (130)  [1/1] 2.32ns  loc: matrix.cpp:86
.preheader19:18  store i32 %tmp_15, i32* %sum_red_addr_1, align 4

ST_11: green_load (132)  [1/2] 3.25ns  loc: matrix.cpp:87
.preheader19:20  %green_load = load i32* %green_addr_1, align 4

ST_11: sum_green_load_1 (134)  [1/2] 2.32ns  loc: matrix.cpp:87
.preheader19:22  %sum_green_load_1 = load i32* %sum_green_addr_1, align 4

ST_11: tmp_16 (135)  [1/1] 2.90ns  loc: matrix.cpp:87
.preheader19:23  %tmp_16 = add nsw i32 %sum_green_load_1, %green_load

ST_11: StgValue_147 (136)  [1/1] 2.32ns  loc: matrix.cpp:87
.preheader19:24  store i32 %tmp_16, i32* %sum_green_addr_1, align 4

ST_11: blue_load (138)  [1/2] 3.25ns  loc: matrix.cpp:88
.preheader19:26  %blue_load = load i32* %blue_addr_1, align 4

ST_11: sum_blue_load_1 (140)  [1/2] 2.32ns  loc: matrix.cpp:88
.preheader19:28  %sum_blue_load_1 = load i32* %sum_blue_addr_1, align 4

ST_11: tmp_17 (141)  [1/1] 2.90ns  loc: matrix.cpp:88
.preheader19:29  %tmp_17 = add nsw i32 %sum_blue_load_1, %blue_load

ST_11: StgValue_151 (142)  [1/1] 2.32ns  loc: matrix.cpp:88
.preheader19:30  store i32 %tmp_17, i32* %sum_blue_addr_1, align 4

ST_11: empty_12 (143)  [1/1] 0.00ns  loc: matrix.cpp:89
.preheader19:31  %empty_12 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str4, i32 %tmp_3)

ST_11: StgValue_153 (145)  [1/1] 0.00ns  loc: matrix.cpp:84
.preheader19:33  br label %.preheader18


 <State 12>: 1.59ns
ST_12: StgValue_154 (147)  [1/1] 1.59ns  loc: matrix.cpp:92
.preheader17.preheader:0  br label %.preheader17


 <State 13>: 5.17ns
ST_13: i_5 (149)  [1/1] 0.00ns
.preheader17:0  %i_5 = phi i4 [ %i_11, %6 ], [ 0, %.preheader17.preheader ]

ST_13: tmp_7 (150)  [1/1] 3.10ns  loc: matrix.cpp:92
.preheader17:1  %tmp_7 = icmp eq i4 %i_5, -7

ST_13: empty_13 (151)  [1/1] 0.00ns
.preheader17:2  %empty_13 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)

ST_13: i_11 (152)  [1/1] 2.35ns  loc: matrix.cpp:92
.preheader17:3  %i_11 = add i4 %i_5, 1

ST_13: StgValue_159 (153)  [1/1] 0.00ns  loc: matrix.cpp:92
.preheader17:4  br i1 %tmp_7, label %.preheader16.preheader, label %6

ST_13: tmp_10 (155)  [1/1] 0.00ns  loc: matrix.cpp:93
:0  %tmp_10 = zext i4 %i_5 to i64

ST_13: sum_red_addr_2 (156)  [1/1] 0.00ns  loc: matrix.cpp:93
:1  %sum_red_addr_2 = getelementptr inbounds [9 x i32]* %sum_red, i64 0, i64 %tmp_10

ST_13: sum_red_load (157)  [2/2] 2.32ns  loc: matrix.cpp:93
:2  %sum_red_load = load i32* %sum_red_addr_2, align 4

ST_13: sum_green_addr_2 (171)  [1/1] 0.00ns  loc: matrix.cpp:94
:16  %sum_green_addr_2 = getelementptr inbounds [9 x i32]* %sum_green, i64 0, i64 %tmp_10

ST_13: sum_green_load (172)  [2/2] 2.32ns  loc: matrix.cpp:94
:17  %sum_green_load = load i32* %sum_green_addr_2, align 4

ST_13: sum_blue_addr_2 (186)  [1/1] 0.00ns  loc: matrix.cpp:95
:31  %sum_blue_addr_2 = getelementptr inbounds [9 x i32]* %sum_blue, i64 0, i64 %tmp_10

ST_13: sum_blue_load (187)  [2/2] 2.32ns  loc: matrix.cpp:95
:32  %sum_blue_load = load i32* %sum_blue_addr_2, align 4

ST_13: StgValue_167 (203)  [1/1] 1.59ns  loc: matrix.cpp:99
.preheader16.preheader:0  br label %.preheader16


 <State 14>: 2.32ns
ST_14: sum_red_load (157)  [1/2] 2.32ns  loc: matrix.cpp:93
:2  %sum_red_load = load i32* %sum_red_addr_2, align 4

ST_14: tmp_30 (161)  [1/1] 0.00ns  loc: matrix.cpp:93
:6  %tmp_30 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %sum_red_load, i32 31)

ST_14: sum_green_load (172)  [1/2] 2.32ns  loc: matrix.cpp:94
:17  %sum_green_load = load i32* %sum_green_addr_2, align 4

ST_14: tmp_33 (176)  [1/1] 0.00ns  loc: matrix.cpp:94
:21  %tmp_33 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %sum_green_load, i32 31)

ST_14: sum_blue_load (187)  [1/2] 2.32ns  loc: matrix.cpp:95
:32  %sum_blue_load = load i32* %sum_blue_addr_2, align 4

ST_14: tmp_36 (191)  [1/1] 0.00ns  loc: matrix.cpp:95
:36  %tmp_36 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %sum_blue_load, i32 31)


 <State 15>: 6.91ns
ST_15: sext1_cast (158)  [1/1] 0.00ns  loc: matrix.cpp:93
:3  %sext1_cast = sext i32 %sum_red_load to i65

ST_15: mul1 (159)  [2/2] 6.91ns  loc: matrix.cpp:93
:4  %mul1 = mul i65 %sext1_cast, 5497558139

ST_15: sext8_cast (173)  [1/1] 0.00ns  loc: matrix.cpp:94
:18  %sext8_cast = sext i32 %sum_green_load to i65

ST_15: mul9 (174)  [2/2] 6.91ns  loc: matrix.cpp:94
:19  %mul9 = mul i65 %sext8_cast, 5497558139

ST_15: sext_cast (188)  [1/1] 0.00ns  loc: matrix.cpp:95
:33  %sext_cast = sext i32 %sum_blue_load to i65

ST_15: mul (189)  [2/2] 6.91ns  loc: matrix.cpp:95
:34  %mul = mul i65 %sext_cast, 5497558139


 <State 16>: 6.91ns
ST_16: mul1 (159)  [1/2] 6.91ns  loc: matrix.cpp:93
:4  %mul1 = mul i65 %sext1_cast, 5497558139

ST_16: tmp_32 (164)  [1/1] 0.00ns  loc: matrix.cpp:93
:9  %tmp_32 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %mul1, i32 39, i32 64)

ST_16: mul9 (174)  [1/2] 6.91ns  loc: matrix.cpp:94
:19  %mul9 = mul i65 %sext8_cast, 5497558139

ST_16: tmp_35 (179)  [1/1] 0.00ns  loc: matrix.cpp:94
:24  %tmp_35 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %mul9, i32 39, i32 64)

ST_16: mul (189)  [1/2] 6.91ns  loc: matrix.cpp:95
:34  %mul = mul i65 %sext_cast, 5497558139

ST_16: tmp_38 (194)  [1/1] 0.00ns  loc: matrix.cpp:95
:39  %tmp_38 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %mul, i32 39, i32 64)


 <State 17>: 8.57ns
ST_17: neg_mul1 (160)  [1/1] 3.83ns  loc: matrix.cpp:93
:5  %neg_mul1 = sub i65 0, %mul1

ST_17: tmp_31 (162)  [1/1] 0.00ns  loc: matrix.cpp:93 (grouped into LUT with out node neg_ti1)
:7  %tmp_31 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %neg_mul1, i32 39, i32 64)

ST_17: tmp_18 (163)  [1/1] 0.00ns  loc: matrix.cpp:93 (grouped into LUT with out node neg_ti1)
:8  %tmp_18 = sext i26 %tmp_31 to i32

ST_17: tmp_22 (165)  [1/1] 0.00ns  loc: matrix.cpp:93
:10  %tmp_22 = sext i26 %tmp_32 to i32

ST_17: tmp_23 (166)  [1/1] 0.00ns  loc: matrix.cpp:93 (grouped into LUT with out node neg_ti1)
:11  %tmp_23 = select i1 %tmp_30, i32 %tmp_18, i32 %tmp_22

ST_17: neg_ti1 (167)  [1/1] 2.67ns  loc: matrix.cpp:93 (out node of the LUT)
:12  %neg_ti1 = sub i32 0, %tmp_23

ST_17: tmp_11 (168)  [1/1] 2.07ns  loc: matrix.cpp:93
:13  %tmp_11 = select i1 %tmp_30, i32 %neg_ti1, i32 %tmp_22

ST_17: neg_mul2 (175)  [1/1] 3.83ns  loc: matrix.cpp:94
:20  %neg_mul2 = sub i65 0, %mul9

ST_17: tmp_34 (177)  [1/1] 0.00ns  loc: matrix.cpp:94 (grouped into LUT with out node neg_ti2)
:22  %tmp_34 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %neg_mul2, i32 39, i32 64)

ST_17: tmp_24 (178)  [1/1] 0.00ns  loc: matrix.cpp:94 (grouped into LUT with out node neg_ti2)
:23  %tmp_24 = sext i26 %tmp_34 to i32

ST_17: tmp_25 (180)  [1/1] 0.00ns  loc: matrix.cpp:94
:25  %tmp_25 = sext i26 %tmp_35 to i32

ST_17: tmp_26 (181)  [1/1] 0.00ns  loc: matrix.cpp:94 (grouped into LUT with out node neg_ti2)
:26  %tmp_26 = select i1 %tmp_33, i32 %tmp_24, i32 %tmp_25

ST_17: neg_ti2 (182)  [1/1] 2.67ns  loc: matrix.cpp:94 (out node of the LUT)
:27  %neg_ti2 = sub i32 0, %tmp_26

ST_17: tmp_12 (183)  [1/1] 2.07ns  loc: matrix.cpp:94
:28  %tmp_12 = select i1 %tmp_33, i32 %neg_ti2, i32 %tmp_25

ST_17: neg_mul (190)  [1/1] 3.83ns  loc: matrix.cpp:95
:35  %neg_mul = sub i65 0, %mul

ST_17: tmp_37 (192)  [1/1] 0.00ns  loc: matrix.cpp:95 (grouped into LUT with out node neg_ti)
:37  %tmp_37 = call i26 @_ssdm_op_PartSelect.i26.i65.i32.i32(i65 %neg_mul, i32 39, i32 64)

ST_17: tmp_27 (193)  [1/1] 0.00ns  loc: matrix.cpp:95 (grouped into LUT with out node neg_ti)
:38  %tmp_27 = sext i26 %tmp_37 to i32

ST_17: tmp_28 (195)  [1/1] 0.00ns  loc: matrix.cpp:95
:40  %tmp_28 = sext i26 %tmp_38 to i32

ST_17: tmp_29 (196)  [1/1] 0.00ns  loc: matrix.cpp:95 (grouped into LUT with out node neg_ti)
:41  %tmp_29 = select i1 %tmp_36, i32 %tmp_27, i32 %tmp_28

ST_17: neg_ti (197)  [1/1] 2.67ns  loc: matrix.cpp:95 (out node of the LUT)
:42  %neg_ti = sub i32 0, %tmp_29

ST_17: tmp_13 (198)  [1/1] 2.07ns  loc: matrix.cpp:95
:43  %tmp_13 = select i1 %tmp_36, i32 %neg_ti, i32 %tmp_28


 <State 18>: 2.32ns
ST_18: cell_avg_red_addr (169)  [1/1] 0.00ns  loc: matrix.cpp:93
:14  %cell_avg_red_addr = getelementptr [9 x i32]* %cell_avg_red, i64 0, i64 %tmp_10

ST_18: StgValue_208 (170)  [1/1] 2.32ns  loc: matrix.cpp:93
:15  store i32 %tmp_11, i32* %cell_avg_red_addr, align 4

ST_18: cell_avg_green_addr (184)  [1/1] 0.00ns  loc: matrix.cpp:94
:29  %cell_avg_green_addr = getelementptr [9 x i32]* %cell_avg_green, i64 0, i64 %tmp_10

ST_18: StgValue_210 (185)  [1/1] 2.32ns  loc: matrix.cpp:94
:30  store i32 %tmp_12, i32* %cell_avg_green_addr, align 4

ST_18: cell_avg_blue_addr (199)  [1/1] 0.00ns  loc: matrix.cpp:95
:44  %cell_avg_blue_addr = getelementptr [9 x i32]* %cell_avg_blue, i64 0, i64 %tmp_10

ST_18: StgValue_212 (200)  [1/1] 2.32ns  loc: matrix.cpp:95
:45  store i32 %tmp_13, i32* %cell_avg_blue_addr, align 4

ST_18: StgValue_213 (201)  [1/1] 0.00ns  loc: matrix.cpp:92
:46  br label %.preheader17


 <State 19>: 5.17ns
ST_19: i3 (205)  [1/1] 0.00ns
.preheader16:0  %i3 = phi i4 [ %i_12, %7 ], [ 0, %.preheader16.preheader ]

ST_19: exitcond2 (206)  [1/1] 3.10ns  loc: matrix.cpp:99
.preheader16:1  %exitcond2 = icmp eq i4 %i3, -7

ST_19: empty_14 (207)  [1/1] 0.00ns
.preheader16:2  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)

ST_19: i_12 (208)  [1/1] 2.35ns  loc: matrix.cpp:99
.preheader16:3  %i_12 = add i4 %i3, 1

ST_19: StgValue_218 (209)  [1/1] 0.00ns  loc: matrix.cpp:99
.preheader16:4  br i1 %exitcond2, label %.preheader15.preheader, label %7

ST_19: tmp_19 (211)  [1/1] 0.00ns  loc: matrix.cpp:101
:0  %tmp_19 = zext i4 %i3 to i64

ST_19: cell_avg_red_addr_1 (212)  [1/1] 0.00ns  loc: matrix.cpp:101
:1  %cell_avg_red_addr_1 = getelementptr [9 x i32]* %cell_avg_red, i64 0, i64 %tmp_19

ST_19: tmp_data_V_3 (213)  [2/2] 2.32ns  loc: matrix.cpp:101
:2  %tmp_data_V_3 = load i32* %cell_avg_red_addr_1, align 4

ST_19: StgValue_222 (217)  [1/1] 1.59ns  loc: matrix.cpp:105
.preheader15.preheader:0  br label %.preheader15


 <State 20>: 2.32ns
ST_20: tmp_data_V_3 (213)  [1/2] 2.32ns  loc: matrix.cpp:101
:2  %tmp_data_V_3 = load i32* %cell_avg_red_addr_1, align 4

ST_20: StgValue_224 (214)  [2/2] 0.00ns  loc: matrix.cpp:102
:3  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_3, i4 -1, i4 -1, i1 false, i1 false, i1 false, i1 false)


 <State 21>: 0.00ns
ST_21: StgValue_225 (214)  [1/2] 0.00ns  loc: matrix.cpp:102
:3  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_3, i4 -1, i4 -1, i1 false, i1 false, i1 false, i1 false)

ST_21: StgValue_226 (215)  [1/1] 0.00ns  loc: matrix.cpp:99
:4  br label %.preheader16


 <State 22>: 5.17ns
ST_22: i4 (219)  [1/1] 0.00ns
.preheader15:0  %i4 = phi i4 [ %i_13, %8 ], [ 0, %.preheader15.preheader ]

ST_22: exitcond3 (220)  [1/1] 3.10ns  loc: matrix.cpp:105
.preheader15:1  %exitcond3 = icmp eq i4 %i4, -7

ST_22: empty_15 (221)  [1/1] 0.00ns
.preheader15:2  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)

ST_22: i_13 (222)  [1/1] 2.35ns  loc: matrix.cpp:105
.preheader15:3  %i_13 = add i4 %i4, 1

ST_22: StgValue_231 (223)  [1/1] 0.00ns  loc: matrix.cpp:105
.preheader15:4  br i1 %exitcond3, label %.preheader.preheader, label %8

ST_22: tmp_20 (225)  [1/1] 0.00ns  loc: matrix.cpp:107
:0  %tmp_20 = zext i4 %i4 to i64

ST_22: cell_avg_green_addr_1 (226)  [1/1] 0.00ns  loc: matrix.cpp:107
:1  %cell_avg_green_addr_1 = getelementptr [9 x i32]* %cell_avg_green, i64 0, i64 %tmp_20

ST_22: tmp_data_V_4 (227)  [2/2] 2.32ns  loc: matrix.cpp:107
:2  %tmp_data_V_4 = load i32* %cell_avg_green_addr_1, align 4

ST_22: StgValue_235 (231)  [1/1] 1.59ns  loc: matrix.cpp:112
.preheader.preheader:0  br label %.preheader


 <State 23>: 2.32ns
ST_23: tmp_data_V_4 (227)  [1/2] 2.32ns  loc: matrix.cpp:107
:2  %tmp_data_V_4 = load i32* %cell_avg_green_addr_1, align 4

ST_23: StgValue_237 (228)  [2/2] 0.00ns  loc: matrix.cpp:108
:3  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_4, i4 -1, i4 -1, i1 false, i1 false, i1 false, i1 false)


 <State 24>: 0.00ns
ST_24: StgValue_238 (228)  [1/2] 0.00ns  loc: matrix.cpp:108
:3  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_4, i4 -1, i4 -1, i1 false, i1 false, i1 false, i1 false)

ST_24: StgValue_239 (229)  [1/1] 0.00ns  loc: matrix.cpp:105
:4  br label %.preheader15


 <State 25>: 5.17ns
ST_25: i6 (233)  [1/1] 0.00ns
.preheader:0  %i6 = phi i4 [ %i_14, %9 ], [ 0, %.preheader.preheader ]

ST_25: exitcond (234)  [1/1] 3.10ns  loc: matrix.cpp:112
.preheader:1  %exitcond = icmp eq i4 %i6, -7

ST_25: empty_16 (235)  [1/1] 0.00ns
.preheader:2  %empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)

ST_25: i_14 (236)  [1/1] 2.35ns  loc: matrix.cpp:112
.preheader:3  %i_14 = add i4 %i6, 1

ST_25: StgValue_244 (237)  [1/1] 0.00ns  loc: matrix.cpp:112
.preheader:4  br i1 %exitcond, label %10, label %9

ST_25: tmp_21 (239)  [1/1] 0.00ns  loc: matrix.cpp:114
:0  %tmp_21 = zext i4 %i6 to i64

ST_25: cell_avg_blue_addr_1 (240)  [1/1] 0.00ns  loc: matrix.cpp:114
:1  %cell_avg_blue_addr_1 = getelementptr [9 x i32]* %cell_avg_blue, i64 0, i64 %tmp_21

ST_25: tmp_data_V_5 (241)  [2/2] 2.32ns  loc: matrix.cpp:114
:2  %tmp_data_V_5 = load i32* %cell_avg_blue_addr_1, align 4

ST_25: tmp_last_V (242)  [1/1] 3.10ns  loc: matrix.cpp:114
:3  %tmp_last_V = icmp eq i4 %i6, -8

ST_25: StgValue_249 (246)  [1/1] 0.00ns  loc: matrix.cpp:119
:0  ret void


 <State 26>: 2.32ns
ST_26: tmp_data_V_5 (241)  [1/2] 2.32ns  loc: matrix.cpp:114
:2  %tmp_data_V_5 = load i32* %cell_avg_blue_addr_1, align 4

ST_26: StgValue_251 (243)  [2/2] 0.00ns  loc: matrix.cpp:115
:4  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_5, i4 -1, i4 -1, i1 false, i1 %tmp_last_V, i1 false, i1 false)


 <State 27>: 0.00ns
ST_27: StgValue_252 (243)  [1/2] 0.00ns  loc: matrix.cpp:115
:4  call void @_ssdm_op_Write.axis.volatile.i32P.i4P.i4P.i1P.i1P.i1P.i1P(i32* %mat_out_V_data_V, i4* %mat_out_V_keep_V, i4* %mat_out_V_strb_V, i1* %mat_out_V_user_V, i1* %mat_out_V_last_V, i1* %mat_out_V_id_V, i1* %mat_out_V_dest_V, i32 %tmp_data_V_5, i4 -1, i4 -1, i1 false, i1 %tmp_last_V, i1 false, i1 false)

ST_27: StgValue_253 (244)  [1/1] 0.00ns  loc: matrix.cpp:112
:5  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', matrix.cpp:59) [44]  (1.59 ns)

 <State 2>: 5.09ns
The critical path consists of the following:
	'icmp' operation ('tmp', matrix.cpp:59) [45]  (3.02 ns)
	blocking operation 2.07 ns on control path)

 <State 3>: 3.25ns
The critical path consists of the following:
	axis read on port 'mat_in_V_data_V' (matrix.cpp:61) [50]  (0 ns)
	'store' operation (matrix.cpp:63) of variable 'tmp.data.V', matrix.cpp:61 on array 'red', matrix.cpp:48 [54]  (3.25 ns)

 <State 4>: 5.09ns
The critical path consists of the following:
	'icmp' operation ('tmp_4', matrix.cpp:66) [60]  (3.02 ns)
	blocking operation 2.07 ns on control path)

 <State 5>: 3.25ns
The critical path consists of the following:
	axis read on port 'mat_in_V_data_V' (matrix.cpp:68) [65]  (0 ns)
	'store' operation (matrix.cpp:69) of variable 'tmp.data.V', matrix.cpp:68 on array 'green', matrix.cpp:49 [69]  (3.25 ns)

 <State 6>: 5.09ns
The critical path consists of the following:
	'icmp' operation ('tmp_8', matrix.cpp:72) [75]  (3.02 ns)
	blocking operation 2.07 ns on control path)

 <State 7>: 3.25ns
The critical path consists of the following:
	axis read on port 'mat_in_V_data_V' (matrix.cpp:74) [80]  (0 ns)
	'store' operation (matrix.cpp:75) of variable 'tmp.data.V', matrix.cpp:74 on array 'blue', matrix.cpp:50 [84]  (3.25 ns)

 <State 8>: 5.17ns
The critical path consists of the following:
	'icmp' operation ('tmp_1', matrix.cpp:77) [93]  (3.1 ns)
	blocking operation 2.07 ns on control path)

 <State 9>: 5.09ns
The critical path consists of the following:
	'icmp' operation ('exitcond_flatten') [108]  (3.02 ns)
	blocking operation 2.07 ns on control path)

 <State 10>: 9.63ns
The critical path consists of the following:
	'mul' operation ('tmp_3_mid2', matrix.cpp:86) [118]  (3.36 ns)
	'add' operation ('tmp_5', matrix.cpp:86) [123]  (3.02 ns)
	'getelementptr' operation ('red_addr_1', matrix.cpp:86) [125]  (0 ns)
	'load' operation ('red_load', matrix.cpp:86) on array 'red', matrix.cpp:48 [126]  (3.25 ns)

 <State 11>: 8.47ns
The critical path consists of the following:
	'load' operation ('red_load', matrix.cpp:86) on array 'red', matrix.cpp:48 [126]  (3.25 ns)
	'add' operation ('tmp_15', matrix.cpp:86) [129]  (2.9 ns)
	'store' operation (matrix.cpp:86) of variable 'tmp_15', matrix.cpp:86 on array 'sum_red', matrix.cpp:54 [130]  (2.32 ns)

 <State 12>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', matrix.cpp:92) [149]  (1.59 ns)

 <State 13>: 5.17ns
The critical path consists of the following:
	'icmp' operation ('tmp_7', matrix.cpp:92) [150]  (3.1 ns)
	blocking operation 2.07 ns on control path)

 <State 14>: 2.32ns
The critical path consists of the following:
	'load' operation ('sum_red_load', matrix.cpp:93) on array 'sum_red', matrix.cpp:54 [157]  (2.32 ns)

 <State 15>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul1', matrix.cpp:93) [159]  (6.91 ns)

 <State 16>: 6.91ns
The critical path consists of the following:
	'mul' operation ('mul1', matrix.cpp:93) [159]  (6.91 ns)

 <State 17>: 8.57ns
The critical path consists of the following:
	'sub' operation ('neg_mul1', matrix.cpp:93) [160]  (3.83 ns)
	'select' operation ('tmp_23', matrix.cpp:93) [166]  (0 ns)
	'sub' operation ('neg_ti1', matrix.cpp:93) [167]  (2.67 ns)
	'select' operation ('tmp_11', matrix.cpp:93) [168]  (2.07 ns)

 <State 18>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('cell_avg_red_addr', matrix.cpp:93) [169]  (0 ns)
	'store' operation (matrix.cpp:93) of variable 'tmp_11', matrix.cpp:93 on array 'cell_avg.red', matrix.cpp:51 [170]  (2.32 ns)

 <State 19>: 5.17ns
The critical path consists of the following:
	'icmp' operation ('exitcond2', matrix.cpp:99) [206]  (3.1 ns)
	blocking operation 2.07 ns on control path)

 <State 20>: 2.32ns
The critical path consists of the following:
	'load' operation ('data', matrix.cpp:101) on array 'cell_avg.red', matrix.cpp:51 [213]  (2.32 ns)

 <State 21>: 0ns
The critical path consists of the following:

 <State 22>: 5.17ns
The critical path consists of the following:
	'icmp' operation ('exitcond3', matrix.cpp:105) [220]  (3.1 ns)
	blocking operation 2.07 ns on control path)

 <State 23>: 2.32ns
The critical path consists of the following:
	'load' operation ('data', matrix.cpp:107) on array 'cell_avg.green', matrix.cpp:51 [227]  (2.32 ns)

 <State 24>: 0ns
The critical path consists of the following:

 <State 25>: 5.17ns
The critical path consists of the following:
	'icmp' operation ('exitcond', matrix.cpp:112) [234]  (3.1 ns)
	blocking operation 2.07 ns on control path)

 <State 26>: 2.32ns
The critical path consists of the following:
	'load' operation ('data', matrix.cpp:114) on array 'cell_avg.blue', matrix.cpp:51 [241]  (2.32 ns)

 <State 27>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A

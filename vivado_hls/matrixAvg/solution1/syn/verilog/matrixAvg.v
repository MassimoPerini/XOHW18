// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixAvg,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=7354,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=13,HLS_SYN_FF=3195,HLS_SYN_LUT=1708}" *)

module matrixAvg (
        ap_clk,
        ap_rst_n,
        mat_in_TDATA,
        mat_in_TVALID,
        mat_in_TREADY,
        mat_in_TKEEP,
        mat_in_TSTRB,
        mat_in_TUSER,
        mat_in_TLAST,
        mat_in_TID,
        mat_in_TDEST,
        mat_out_TDATA,
        mat_out_TVALID,
        mat_out_TREADY,
        mat_out_TKEEP,
        mat_out_TSTRB,
        mat_out_TUSER,
        mat_out_TLAST,
        mat_out_TID,
        mat_out_TDEST
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_pp0_stage0 = 26'd256;
parameter    ap_ST_fsm_pp0_stage1 = 26'd512;
parameter    ap_ST_fsm_state12 = 26'd1024;
parameter    ap_ST_fsm_state13 = 26'd2048;
parameter    ap_ST_fsm_state14 = 26'd4096;
parameter    ap_ST_fsm_state15 = 26'd8192;
parameter    ap_ST_fsm_state16 = 26'd16384;
parameter    ap_ST_fsm_state17 = 26'd32768;
parameter    ap_ST_fsm_state18 = 26'd65536;
parameter    ap_ST_fsm_state19 = 26'd131072;
parameter    ap_ST_fsm_state20 = 26'd262144;
parameter    ap_ST_fsm_state21 = 26'd524288;
parameter    ap_ST_fsm_state22 = 26'd1048576;
parameter    ap_ST_fsm_state23 = 26'd2097152;
parameter    ap_ST_fsm_state24 = 26'd4194304;
parameter    ap_ST_fsm_state25 = 26'd8388608;
parameter    ap_ST_fsm_state26 = 26'd16777216;
parameter    ap_ST_fsm_state27 = 26'd33554432;

input   ap_clk;
input   ap_rst_n;
input  [31:0] mat_in_TDATA;
input   mat_in_TVALID;
output   mat_in_TREADY;
input  [3:0] mat_in_TKEEP;
input  [3:0] mat_in_TSTRB;
input  [0:0] mat_in_TUSER;
input  [0:0] mat_in_TLAST;
input  [0:0] mat_in_TID;
input  [0:0] mat_in_TDEST;
output  [31:0] mat_out_TDATA;
output   mat_out_TVALID;
input   mat_out_TREADY;
output  [3:0] mat_out_TKEEP;
output  [3:0] mat_out_TSTRB;
output  [0:0] mat_out_TUSER;
output  [0:0] mat_out_TLAST;
output  [0:0] mat_out_TID;
output  [0:0] mat_out_TDEST;

reg    ap_rst_n_inv;
reg   [31:0] mat_in_V_data_V_0_data_out;
wire    mat_in_V_data_V_0_vld_in;
wire    mat_in_V_data_V_0_vld_out;
wire    mat_in_V_data_V_0_ack_in;
reg    mat_in_V_data_V_0_ack_out;
reg   [31:0] mat_in_V_data_V_0_payload_A;
reg   [31:0] mat_in_V_data_V_0_payload_B;
reg    mat_in_V_data_V_0_sel_rd;
reg    mat_in_V_data_V_0_sel_wr;
wire    mat_in_V_data_V_0_sel;
wire    mat_in_V_data_V_0_load_A;
wire    mat_in_V_data_V_0_load_B;
reg   [1:0] mat_in_V_data_V_0_state;
wire    mat_in_V_data_V_0_state_cmp_full;
wire    mat_in_V_dest_V_0_vld_in;
reg    mat_in_V_dest_V_0_ack_out;
reg   [1:0] mat_in_V_dest_V_0_state;
reg   [31:0] mat_out_V_data_V_1_data_in;
reg   [31:0] mat_out_V_data_V_1_data_out;
reg    mat_out_V_data_V_1_vld_in;
wire    mat_out_V_data_V_1_vld_out;
wire    mat_out_V_data_V_1_ack_in;
wire    mat_out_V_data_V_1_ack_out;
reg   [31:0] mat_out_V_data_V_1_payload_A;
reg   [31:0] mat_out_V_data_V_1_payload_B;
reg    mat_out_V_data_V_1_sel_rd;
reg    mat_out_V_data_V_1_sel_wr;
wire    mat_out_V_data_V_1_sel;
wire    mat_out_V_data_V_1_load_A;
wire    mat_out_V_data_V_1_load_B;
reg   [1:0] mat_out_V_data_V_1_state;
wire    mat_out_V_data_V_1_state_cmp_full;
wire   [3:0] mat_out_V_keep_V_1_data_out;
reg    mat_out_V_keep_V_1_vld_in;
wire    mat_out_V_keep_V_1_vld_out;
wire    mat_out_V_keep_V_1_ack_in;
wire    mat_out_V_keep_V_1_ack_out;
reg    mat_out_V_keep_V_1_sel_rd;
wire    mat_out_V_keep_V_1_sel;
reg   [1:0] mat_out_V_keep_V_1_state;
wire   [3:0] mat_out_V_strb_V_1_data_out;
reg    mat_out_V_strb_V_1_vld_in;
wire    mat_out_V_strb_V_1_vld_out;
wire    mat_out_V_strb_V_1_ack_in;
wire    mat_out_V_strb_V_1_ack_out;
reg    mat_out_V_strb_V_1_sel_rd;
wire    mat_out_V_strb_V_1_sel;
reg   [1:0] mat_out_V_strb_V_1_state;
wire   [0:0] mat_out_V_user_V_1_data_out;
reg    mat_out_V_user_V_1_vld_in;
wire    mat_out_V_user_V_1_vld_out;
wire    mat_out_V_user_V_1_ack_in;
wire    mat_out_V_user_V_1_ack_out;
reg    mat_out_V_user_V_1_sel_rd;
wire    mat_out_V_user_V_1_sel;
reg   [1:0] mat_out_V_user_V_1_state;
reg   [0:0] mat_out_V_last_V_1_data_in;
reg   [0:0] mat_out_V_last_V_1_data_out;
reg    mat_out_V_last_V_1_vld_in;
wire    mat_out_V_last_V_1_vld_out;
wire    mat_out_V_last_V_1_ack_in;
wire    mat_out_V_last_V_1_ack_out;
reg   [0:0] mat_out_V_last_V_1_payload_A;
reg   [0:0] mat_out_V_last_V_1_payload_B;
reg    mat_out_V_last_V_1_sel_rd;
reg    mat_out_V_last_V_1_sel_wr;
wire    mat_out_V_last_V_1_sel;
wire    mat_out_V_last_V_1_load_A;
wire    mat_out_V_last_V_1_load_B;
reg   [1:0] mat_out_V_last_V_1_state;
wire    mat_out_V_last_V_1_state_cmp_full;
wire   [0:0] mat_out_V_id_V_1_data_out;
reg    mat_out_V_id_V_1_vld_in;
wire    mat_out_V_id_V_1_vld_out;
wire    mat_out_V_id_V_1_ack_in;
wire    mat_out_V_id_V_1_ack_out;
reg    mat_out_V_id_V_1_sel_rd;
wire    mat_out_V_id_V_1_sel;
reg   [1:0] mat_out_V_id_V_1_state;
wire   [0:0] mat_out_V_dest_V_1_data_out;
reg    mat_out_V_dest_V_1_vld_in;
wire    mat_out_V_dest_V_1_vld_out;
wire    mat_out_V_dest_V_1_ack_in;
wire    mat_out_V_dest_V_1_ack_out;
reg    mat_out_V_dest_V_1_sel_rd;
wire    mat_out_V_dest_V_1_sel;
reg   [1:0] mat_out_V_dest_V_1_state;
reg    mat_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
reg    mat_out_TDATA_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg   [9:0] indvar_flatten_reg_431;
reg   [3:0] j_reg_442;
reg   [6:0] i_4_reg_453;
wire   [9:0] i_6_fu_521_p2;
reg   [9:0] i_6_reg_957;
wire    ap_CS_fsm_state2;
wire   [9:0] i_7_fu_538_p2;
reg   [9:0] i_7_reg_965;
wire    ap_CS_fsm_state4;
wire   [9:0] i_8_fu_555_p2;
reg   [9:0] i_8_reg_973;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_8_fu_549_p2;
wire   [0:0] tmp_1_fu_566_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] i_9_fu_572_p2;
wire   [0:0] exitcond_flatten_fu_578_p2;
reg   [0:0] exitcond_flatten_reg_1002;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
wire   [9:0] indvar_flatten_next_fu_584_p2;
reg   [9:0] indvar_flatten_next_reg_1006;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] i_4_mid2_fu_596_p3;
reg   [6:0] i_4_mid2_reg_1011;
wire   [3:0] tmp_3_mid2_v_v_fu_610_p3;
reg   [3:0] tmp_3_mid2_v_v_reg_1017;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state10_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_flag00011001;
reg   [3:0] sum_red_addr_1_reg_1029;
reg   [3:0] sum_green_addr_1_reg_1039;
reg   [3:0] sum_blue_addr_1_reg_1049;
wire   [6:0] i_10_fu_636_p2;
reg   [6:0] i_10_reg_1054;
wire   [3:0] i_11_fu_668_p2;
reg   [3:0] i_11_reg_1062;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_10_fu_674_p1;
reg   [63:0] tmp_10_reg_1067;
wire   [0:0] tmp_7_fu_662_p2;
wire   [31:0] sum_red_q0;
reg  signed [31:0] sum_red_load_reg_1089;
wire    ap_CS_fsm_state14;
reg   [0:0] tmp_30_reg_1094;
wire   [31:0] sum_green_q0;
reg  signed [31:0] sum_green_load_reg_1100;
reg   [0:0] tmp_33_reg_1105;
wire   [31:0] sum_blue_q0;
reg  signed [31:0] sum_blue_load_reg_1111;
reg   [0:0] tmp_36_reg_1116;
wire    ap_CS_fsm_state15;
wire   [64:0] grp_fu_708_p2;
reg   [64:0] mul1_reg_1137;
wire    ap_CS_fsm_state16;
reg   [25:0] tmp_32_reg_1142;
wire   [64:0] grp_fu_717_p2;
reg   [64:0] mul9_reg_1147;
reg   [25:0] tmp_35_reg_1152;
wire   [64:0] grp_fu_726_p2;
reg   [64:0] mul_reg_1157;
reg   [25:0] tmp_38_reg_1162;
wire   [31:0] tmp_11_fu_797_p3;
reg   [31:0] tmp_11_reg_1167;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_12_fu_839_p3;
reg   [31:0] tmp_12_reg_1172;
wire   [31:0] tmp_13_fu_881_p3;
reg   [31:0] tmp_13_reg_1177;
wire   [3:0] i_12_fu_894_p2;
reg   [3:0] i_12_reg_1185;
wire    ap_CS_fsm_state19;
wire   [0:0] exitcond2_fu_888_p2;
wire   [31:0] cell_avg_red_q0;
wire   [3:0] i_13_fu_911_p2;
reg   [3:0] i_13_reg_1203;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond3_fu_905_p2;
wire   [31:0] cell_avg_green_q0;
wire   [3:0] i_14_fu_928_p2;
reg   [3:0] i_14_reg_1221;
wire    ap_CS_fsm_state25;
reg    ap_block_state25;
wire   [0:0] exitcond_fu_922_p2;
wire   [0:0] tmp_last_V_fu_939_p2;
reg   [0:0] tmp_last_V_reg_1231;
wire   [31:0] cell_avg_blue_q0;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_flag00011011;
reg   [9:0] red_address0;
reg    red_ce0;
reg    red_we0;
wire   [31:0] red_q0;
reg   [9:0] green_address0;
reg    green_ce0;
reg    green_we0;
wire   [31:0] green_q0;
reg   [9:0] blue_address0;
reg    blue_ce0;
reg    blue_we0;
wire   [31:0] blue_q0;
reg   [3:0] cell_avg_red_address0;
reg    cell_avg_red_ce0;
reg    cell_avg_red_we0;
reg   [3:0] cell_avg_blue_address0;
reg    cell_avg_blue_ce0;
reg    cell_avg_blue_we0;
reg   [3:0] cell_avg_green_address0;
reg    cell_avg_green_ce0;
reg    cell_avg_green_we0;
reg   [3:0] sum_red_address0;
reg    sum_red_ce0;
reg    sum_red_we0;
reg   [31:0] sum_red_d0;
reg   [3:0] sum_blue_address0;
reg    sum_blue_ce0;
reg    sum_blue_we0;
reg   [31:0] sum_blue_d0;
reg   [3:0] sum_green_address0;
reg    sum_green_ce0;
reg    sum_green_we0;
reg   [31:0] sum_green_d0;
reg   [9:0] i_reg_384;
wire    ap_CS_fsm_state1;
reg   [9:0] i_1_reg_396;
wire   [0:0] tmp_fu_515_p2;
reg   [9:0] i_2_reg_408;
wire   [0:0] tmp_4_fu_532_p2;
reg   [3:0] i_3_reg_420;
reg   [9:0] indvar_flatten_phi_fu_435_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [3:0] j_phi_fu_446_p4;
reg   [6:0] i_4_phi_fu_457_p4;
reg   [3:0] i_5_reg_464;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state12;
reg   [3:0] i3_reg_475;
reg   [3:0] i4_reg_486;
reg   [3:0] i6_reg_497;
wire   [63:0] tmp_2_fu_527_p1;
wire   [63:0] tmp_6_fu_544_p1;
wire   [63:0] tmp_s_fu_561_p1;
wire   [63:0] tmp_14_fu_630_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [63:0] tmp_5_mid2_fu_621_p1;
wire   [63:0] tmp_19_fu_900_p1;
wire   [63:0] tmp_20_fu_917_p1;
wire   [63:0] tmp_21_fu_934_p1;
wire   [31:0] tmp_15_fu_641_p2;
wire   [31:0] tmp_17_fu_655_p2;
wire   [31:0] tmp_16_fu_648_p2;
wire   [0:0] tmp_9_fu_590_p2;
wire   [3:0] j_s_fu_604_p2;
wire   [9:0] grp_fu_945_p3;
wire   [33:0] grp_fu_708_p1;
wire   [33:0] grp_fu_717_p1;
wire   [33:0] grp_fu_726_p1;
wire   [64:0] neg_mul1_fu_762_p2;
wire   [25:0] tmp_31_fu_767_p4;
wire  signed [31:0] tmp_18_fu_777_p1;
wire  signed [31:0] tmp_22_fu_781_p1;
wire   [31:0] tmp_23_fu_784_p3;
wire   [31:0] neg_ti1_fu_791_p2;
wire   [64:0] neg_mul2_fu_804_p2;
wire   [25:0] tmp_34_fu_809_p4;
wire  signed [31:0] tmp_24_fu_819_p1;
wire  signed [31:0] tmp_25_fu_823_p1;
wire   [31:0] tmp_26_fu_826_p3;
wire   [31:0] neg_ti2_fu_833_p2;
wire   [64:0] neg_mul_fu_846_p2;
wire   [25:0] tmp_37_fu_851_p4;
wire  signed [31:0] tmp_27_fu_861_p1;
wire  signed [31:0] tmp_28_fu_865_p1;
wire   [31:0] tmp_29_fu_868_p3;
wire   [31:0] neg_ti_fu_875_p2;
wire   [3:0] grp_fu_945_p0;
wire   [7:0] grp_fu_945_p1;
wire   [6:0] grp_fu_945_p2;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_945_p00;
wire   [9:0] grp_fu_945_p20;

// power-on initialization
initial begin
#0 mat_in_V_data_V_0_sel_rd = 1'b0;
#0 mat_in_V_data_V_0_sel_wr = 1'b0;
#0 mat_in_V_data_V_0_state = 2'd0;
#0 mat_in_V_dest_V_0_state = 2'd0;
#0 mat_out_V_data_V_1_sel_rd = 1'b0;
#0 mat_out_V_data_V_1_sel_wr = 1'b0;
#0 mat_out_V_data_V_1_state = 2'd0;
#0 mat_out_V_keep_V_1_sel_rd = 1'b0;
#0 mat_out_V_keep_V_1_state = 2'd0;
#0 mat_out_V_strb_V_1_sel_rd = 1'b0;
#0 mat_out_V_strb_V_1_state = 2'd0;
#0 mat_out_V_user_V_1_sel_rd = 1'b0;
#0 mat_out_V_user_V_1_state = 2'd0;
#0 mat_out_V_last_V_1_sel_rd = 1'b0;
#0 mat_out_V_last_V_1_sel_wr = 1'b0;
#0 mat_out_V_last_V_1_state = 2'd0;
#0 mat_out_V_id_V_1_sel_rd = 1'b0;
#0 mat_out_V_id_V_1_state = 2'd0;
#0 mat_out_V_dest_V_1_sel_rd = 1'b0;
#0 mat_out_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrixAvg_red #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
red_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(red_address0),
    .ce0(red_ce0),
    .we0(red_we0),
    .d0(mat_in_V_data_V_0_data_out),
    .q0(red_q0)
);

matrixAvg_red #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
green_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(green_address0),
    .ce0(green_ce0),
    .we0(green_we0),
    .d0(mat_in_V_data_V_0_data_out),
    .q0(green_q0)
);

matrixAvg_red #(
    .DataWidth( 32 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
blue_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(blue_address0),
    .ce0(blue_ce0),
    .we0(blue_we0),
    .d0(mat_in_V_data_V_0_data_out),
    .q0(blue_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
cell_avg_red_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cell_avg_red_address0),
    .ce0(cell_avg_red_ce0),
    .we0(cell_avg_red_we0),
    .d0(tmp_11_reg_1167),
    .q0(cell_avg_red_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
cell_avg_blue_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cell_avg_blue_address0),
    .ce0(cell_avg_blue_ce0),
    .we0(cell_avg_blue_we0),
    .d0(tmp_13_reg_1177),
    .q0(cell_avg_blue_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
cell_avg_green_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cell_avg_green_address0),
    .ce0(cell_avg_green_ce0),
    .we0(cell_avg_green_we0),
    .d0(tmp_12_reg_1172),
    .q0(cell_avg_green_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_red_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_red_address0),
    .ce0(sum_red_ce0),
    .we0(sum_red_we0),
    .d0(sum_red_d0),
    .q0(sum_red_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_blue_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_blue_address0),
    .ce0(sum_blue_ce0),
    .we0(sum_blue_we0),
    .d0(sum_blue_d0),
    .q0(sum_blue_q0)
);

matrixAvg_cell_avbkb #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sum_green_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sum_green_address0),
    .ce0(sum_green_ce0),
    .we0(sum_green_we0),
    .d0(sum_green_d0),
    .q0(sum_green_q0)
);

matrixAvg_mul_32seOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
matrixAvg_mul_32seOg_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_red_load_reg_1089),
    .din1(grp_fu_708_p1),
    .ce(1'b1),
    .dout(grp_fu_708_p2)
);

matrixAvg_mul_32seOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
matrixAvg_mul_32seOg_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_green_load_reg_1100),
    .din1(grp_fu_717_p1),
    .ce(1'b1),
    .dout(grp_fu_717_p2)
);

matrixAvg_mul_32seOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
matrixAvg_mul_32seOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_blue_load_reg_1111),
    .din1(grp_fu_726_p1),
    .ce(1'b1),
    .dout(grp_fu_726_p2)
);

matrixAvg_mac_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 10 ))
matrixAvg_mac_mulfYi_U4(
    .din0(grp_fu_945_p0),
    .din1(grp_fu_945_p1),
    .din2(grp_fu_945_p2),
    .dout(grp_fu_945_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_in_V_data_V_0_ack_out) & (1'b1 == mat_in_V_data_V_0_vld_out))) begin
            mat_in_V_data_V_0_sel_rd <= ~mat_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == mat_in_V_data_V_0_vld_in) & (1'b1 == mat_in_V_data_V_0_ack_in))) begin
            mat_in_V_data_V_0_sel_wr <= ~mat_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_in_V_data_V_0_vld_in) & (1'b1 == mat_in_V_data_V_0_ack_out) & (mat_in_V_data_V_0_state == 2'd3)) | ((1'b0 == mat_in_V_data_V_0_vld_in) & (mat_in_V_data_V_0_state == 2'd2)))) begin
            mat_in_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == mat_in_V_data_V_0_vld_in) & (1'b0 == mat_in_V_data_V_0_ack_out) & (mat_in_V_data_V_0_state == 2'd3)) | ((1'b0 == mat_in_V_data_V_0_ack_out) & (mat_in_V_data_V_0_state == 2'd1)))) begin
            mat_in_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == mat_in_V_data_V_0_vld_in) & (mat_in_V_data_V_0_state == 2'd2)) | ((1'b1 == mat_in_V_data_V_0_ack_out) & (mat_in_V_data_V_0_state == 2'd1)) | ((mat_in_V_data_V_0_state == 2'd3) & ~((1'b1 == mat_in_V_data_V_0_vld_in) & (1'b0 == mat_in_V_data_V_0_ack_out)) & ~((1'b0 == mat_in_V_data_V_0_vld_in) & (1'b1 == mat_in_V_data_V_0_ack_out))))) begin
            mat_in_V_data_V_0_state <= 2'd3;
        end else begin
            mat_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_in_V_dest_V_0_vld_in) & (1'b1 == mat_in_V_dest_V_0_ack_out) & (2'd3 == mat_in_V_dest_V_0_state)) | ((1'b0 == mat_in_V_dest_V_0_vld_in) & (2'd2 == mat_in_V_dest_V_0_state)))) begin
            mat_in_V_dest_V_0_state <= 2'd2;
        end else if ((((1'b1 == mat_in_V_dest_V_0_vld_in) & (1'b0 == mat_in_V_dest_V_0_ack_out) & (2'd3 == mat_in_V_dest_V_0_state)) | ((1'b0 == mat_in_V_dest_V_0_ack_out) & (2'd1 == mat_in_V_dest_V_0_state)))) begin
            mat_in_V_dest_V_0_state <= 2'd1;
        end else if ((((1'b1 == mat_in_V_dest_V_0_vld_in) & (2'd2 == mat_in_V_dest_V_0_state)) | ((1'b1 == mat_in_V_dest_V_0_ack_out) & (2'd1 == mat_in_V_dest_V_0_state)) | ((2'd3 == mat_in_V_dest_V_0_state) & ~((1'b1 == mat_in_V_dest_V_0_vld_in) & (1'b0 == mat_in_V_dest_V_0_ack_out)) & ~((1'b0 == mat_in_V_dest_V_0_vld_in) & (1'b1 == mat_in_V_dest_V_0_ack_out))))) begin
            mat_in_V_dest_V_0_state <= 2'd3;
        end else begin
            mat_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_data_V_1_ack_out) & (1'b1 == mat_out_V_data_V_1_vld_out))) begin
            mat_out_V_data_V_1_sel_rd <= ~mat_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_data_V_1_vld_in) & (1'b1 == mat_out_V_data_V_1_ack_in))) begin
            mat_out_V_data_V_1_sel_wr <= ~mat_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_data_V_1_vld_in) & (1'b1 == mat_out_V_data_V_1_ack_out) & (2'd3 == mat_out_V_data_V_1_state)) | ((1'b0 == mat_out_V_data_V_1_vld_in) & (2'd2 == mat_out_V_data_V_1_state)))) begin
            mat_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_data_V_1_vld_in) & (1'b0 == mat_out_V_data_V_1_ack_out) & (2'd3 == mat_out_V_data_V_1_state)) | ((1'b0 == mat_out_V_data_V_1_ack_out) & (2'd1 == mat_out_V_data_V_1_state)))) begin
            mat_out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_data_V_1_vld_in) & (2'd2 == mat_out_V_data_V_1_state)) | ((1'b1 == mat_out_V_data_V_1_ack_out) & (2'd1 == mat_out_V_data_V_1_state)) | ((2'd3 == mat_out_V_data_V_1_state) & ~((1'b1 == mat_out_V_data_V_1_vld_in) & (1'b0 == mat_out_V_data_V_1_ack_out)) & ~((1'b0 == mat_out_V_data_V_1_vld_in) & (1'b1 == mat_out_V_data_V_1_ack_out))))) begin
            mat_out_V_data_V_1_state <= 2'd3;
        end else begin
            mat_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_dest_V_1_ack_out) & (1'b1 == mat_out_V_dest_V_1_vld_out))) begin
            mat_out_V_dest_V_1_sel_rd <= ~mat_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_dest_V_1_vld_in) & (1'b1 == mat_out_V_dest_V_1_ack_out) & (2'd3 == mat_out_V_dest_V_1_state)) | ((1'b0 == mat_out_V_dest_V_1_vld_in) & (2'd2 == mat_out_V_dest_V_1_state)))) begin
            mat_out_V_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_dest_V_1_vld_in) & (1'b0 == mat_out_V_dest_V_1_ack_out) & (2'd3 == mat_out_V_dest_V_1_state)) | ((1'b0 == mat_out_V_dest_V_1_ack_out) & (2'd1 == mat_out_V_dest_V_1_state)))) begin
            mat_out_V_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_dest_V_1_vld_in) & (2'd2 == mat_out_V_dest_V_1_state)) | ((1'b1 == mat_out_V_dest_V_1_ack_out) & (2'd1 == mat_out_V_dest_V_1_state)) | ((2'd3 == mat_out_V_dest_V_1_state) & ~((1'b1 == mat_out_V_dest_V_1_vld_in) & (1'b0 == mat_out_V_dest_V_1_ack_out)) & ~((1'b0 == mat_out_V_dest_V_1_vld_in) & (1'b1 == mat_out_V_dest_V_1_ack_out))))) begin
            mat_out_V_dest_V_1_state <= 2'd3;
        end else begin
            mat_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_id_V_1_ack_out) & (1'b1 == mat_out_V_id_V_1_vld_out))) begin
            mat_out_V_id_V_1_sel_rd <= ~mat_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_id_V_1_vld_in) & (1'b1 == mat_out_V_id_V_1_ack_out) & (2'd3 == mat_out_V_id_V_1_state)) | ((1'b0 == mat_out_V_id_V_1_vld_in) & (2'd2 == mat_out_V_id_V_1_state)))) begin
            mat_out_V_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_id_V_1_vld_in) & (1'b0 == mat_out_V_id_V_1_ack_out) & (2'd3 == mat_out_V_id_V_1_state)) | ((1'b0 == mat_out_V_id_V_1_ack_out) & (2'd1 == mat_out_V_id_V_1_state)))) begin
            mat_out_V_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_id_V_1_vld_in) & (2'd2 == mat_out_V_id_V_1_state)) | ((1'b1 == mat_out_V_id_V_1_ack_out) & (2'd1 == mat_out_V_id_V_1_state)) | ((2'd3 == mat_out_V_id_V_1_state) & ~((1'b1 == mat_out_V_id_V_1_vld_in) & (1'b0 == mat_out_V_id_V_1_ack_out)) & ~((1'b0 == mat_out_V_id_V_1_vld_in) & (1'b1 == mat_out_V_id_V_1_ack_out))))) begin
            mat_out_V_id_V_1_state <= 2'd3;
        end else begin
            mat_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_keep_V_1_ack_out) & (1'b1 == mat_out_V_keep_V_1_vld_out))) begin
            mat_out_V_keep_V_1_sel_rd <= ~mat_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_keep_V_1_vld_in) & (1'b1 == mat_out_V_keep_V_1_ack_out) & (2'd3 == mat_out_V_keep_V_1_state)) | ((1'b0 == mat_out_V_keep_V_1_vld_in) & (2'd2 == mat_out_V_keep_V_1_state)))) begin
            mat_out_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_keep_V_1_vld_in) & (1'b0 == mat_out_V_keep_V_1_ack_out) & (2'd3 == mat_out_V_keep_V_1_state)) | ((1'b0 == mat_out_V_keep_V_1_ack_out) & (2'd1 == mat_out_V_keep_V_1_state)))) begin
            mat_out_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_keep_V_1_vld_in) & (2'd2 == mat_out_V_keep_V_1_state)) | ((1'b1 == mat_out_V_keep_V_1_ack_out) & (2'd1 == mat_out_V_keep_V_1_state)) | ((2'd3 == mat_out_V_keep_V_1_state) & ~((1'b1 == mat_out_V_keep_V_1_vld_in) & (1'b0 == mat_out_V_keep_V_1_ack_out)) & ~((1'b0 == mat_out_V_keep_V_1_vld_in) & (1'b1 == mat_out_V_keep_V_1_ack_out))))) begin
            mat_out_V_keep_V_1_state <= 2'd3;
        end else begin
            mat_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_last_V_1_ack_out) & (1'b1 == mat_out_V_last_V_1_vld_out))) begin
            mat_out_V_last_V_1_sel_rd <= ~mat_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_last_V_1_vld_in) & (1'b1 == mat_out_V_last_V_1_ack_in))) begin
            mat_out_V_last_V_1_sel_wr <= ~mat_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_last_V_1_vld_in) & (1'b1 == mat_out_V_last_V_1_ack_out) & (2'd3 == mat_out_V_last_V_1_state)) | ((1'b0 == mat_out_V_last_V_1_vld_in) & (2'd2 == mat_out_V_last_V_1_state)))) begin
            mat_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_last_V_1_vld_in) & (1'b0 == mat_out_V_last_V_1_ack_out) & (2'd3 == mat_out_V_last_V_1_state)) | ((1'b0 == mat_out_V_last_V_1_ack_out) & (2'd1 == mat_out_V_last_V_1_state)))) begin
            mat_out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_last_V_1_vld_in) & (2'd2 == mat_out_V_last_V_1_state)) | ((1'b1 == mat_out_V_last_V_1_ack_out) & (2'd1 == mat_out_V_last_V_1_state)) | ((2'd3 == mat_out_V_last_V_1_state) & ~((1'b1 == mat_out_V_last_V_1_vld_in) & (1'b0 == mat_out_V_last_V_1_ack_out)) & ~((1'b0 == mat_out_V_last_V_1_vld_in) & (1'b1 == mat_out_V_last_V_1_ack_out))))) begin
            mat_out_V_last_V_1_state <= 2'd3;
        end else begin
            mat_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_strb_V_1_ack_out) & (1'b1 == mat_out_V_strb_V_1_vld_out))) begin
            mat_out_V_strb_V_1_sel_rd <= ~mat_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_strb_V_1_vld_in) & (1'b1 == mat_out_V_strb_V_1_ack_out) & (2'd3 == mat_out_V_strb_V_1_state)) | ((1'b0 == mat_out_V_strb_V_1_vld_in) & (2'd2 == mat_out_V_strb_V_1_state)))) begin
            mat_out_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_strb_V_1_vld_in) & (1'b0 == mat_out_V_strb_V_1_ack_out) & (2'd3 == mat_out_V_strb_V_1_state)) | ((1'b0 == mat_out_V_strb_V_1_ack_out) & (2'd1 == mat_out_V_strb_V_1_state)))) begin
            mat_out_V_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_strb_V_1_vld_in) & (2'd2 == mat_out_V_strb_V_1_state)) | ((1'b1 == mat_out_V_strb_V_1_ack_out) & (2'd1 == mat_out_V_strb_V_1_state)) | ((2'd3 == mat_out_V_strb_V_1_state) & ~((1'b1 == mat_out_V_strb_V_1_vld_in) & (1'b0 == mat_out_V_strb_V_1_ack_out)) & ~((1'b0 == mat_out_V_strb_V_1_vld_in) & (1'b1 == mat_out_V_strb_V_1_ack_out))))) begin
            mat_out_V_strb_V_1_state <= 2'd3;
        end else begin
            mat_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mat_out_V_user_V_1_ack_out) & (1'b1 == mat_out_V_user_V_1_vld_out))) begin
            mat_out_V_user_V_1_sel_rd <= ~mat_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mat_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == mat_out_V_user_V_1_vld_in) & (1'b1 == mat_out_V_user_V_1_ack_out) & (2'd3 == mat_out_V_user_V_1_state)) | ((1'b0 == mat_out_V_user_V_1_vld_in) & (2'd2 == mat_out_V_user_V_1_state)))) begin
            mat_out_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == mat_out_V_user_V_1_vld_in) & (1'b0 == mat_out_V_user_V_1_ack_out) & (2'd3 == mat_out_V_user_V_1_state)) | ((1'b0 == mat_out_V_user_V_1_ack_out) & (2'd1 == mat_out_V_user_V_1_state)))) begin
            mat_out_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == mat_out_V_user_V_1_vld_in) & (2'd2 == mat_out_V_user_V_1_state)) | ((1'b1 == mat_out_V_user_V_1_ack_out) & (2'd1 == mat_out_V_user_V_1_state)) | ((2'd3 == mat_out_V_user_V_1_state) & ~((1'b1 == mat_out_V_user_V_1_vld_in) & (1'b0 == mat_out_V_user_V_1_ack_out)) & ~((1'b0 == mat_out_V_user_V_1_vld_in) & (1'b1 == mat_out_V_user_V_1_ack_out))))) begin
            mat_out_V_user_V_1_state <= 2'd3;
        end else begin
            mat_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == tmp_7_fu_662_p2))) begin
        i3_reg_475 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
        i3_reg_475 <= i_12_reg_1185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == exitcond2_fu_888_p2))) begin
        i4_reg_486 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state24) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
        i4_reg_486 <= i_13_reg_1203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond3_fu_905_p2))) begin
        i6_reg_497 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state27) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
        i6_reg_497 <= i_14_reg_1221;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_515_p2))) begin
        i_1_reg_396 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        i_1_reg_396 <= i_7_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_4_fu_532_p2))) begin
        i_2_reg_408 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        i_2_reg_408 <= i_8_reg_973;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_8_fu_549_p2))) begin
        i_3_reg_420 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_1_fu_566_p2))) begin
        i_3_reg_420 <= i_9_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
        i_4_reg_453 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_4_reg_453 <= i_10_reg_1054;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_5_reg_464 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_5_reg_464 <= i_11_reg_1062;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        i_reg_384 <= i_6_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_384 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
        indvar_flatten_reg_431 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_431 <= indvar_flatten_next_reg_1006;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
        j_reg_442 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_reg_442 <= tmp_3_mid2_v_v_reg_1017;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten_reg_1002 <= exitcond_flatten_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002))) begin
        i_10_reg_1054 <= i_10_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_11_reg_1062 <= i_11_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_12_reg_1185 <= i_12_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_13_reg_1203 <= i_13_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in)))) begin
        i_14_reg_1221 <= i_14_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_578_p2))) begin
        i_4_mid2_reg_1011 <= i_4_mid2_fu_596_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_6_reg_957 <= i_6_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_7_reg_965 <= i_7_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_8_reg_973 <= i_8_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_1006 <= indvar_flatten_next_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_in_V_data_V_0_load_A)) begin
        mat_in_V_data_V_0_payload_A <= mat_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_in_V_data_V_0_load_B)) begin
        mat_in_V_data_V_0_payload_B <= mat_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_out_V_data_V_1_load_A)) begin
        mat_out_V_data_V_1_payload_A <= mat_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_out_V_data_V_1_load_B)) begin
        mat_out_V_data_V_1_payload_B <= mat_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_out_V_last_V_1_load_A)) begin
        mat_out_V_last_V_1_payload_A <= mat_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mat_out_V_last_V_1_load_B)) begin
        mat_out_V_last_V_1_payload_B <= mat_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul1_reg_1137 <= grp_fu_708_p2;
        mul9_reg_1147 <= grp_fu_717_p2;
        mul_reg_1157 <= grp_fu_726_p2;
        tmp_32_reg_1142 <= {{grp_fu_708_p2[64:39]}};
        tmp_35_reg_1152 <= {{grp_fu_717_p2[64:39]}};
        tmp_38_reg_1162 <= {{grp_fu_726_p2[64:39]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002))) begin
        sum_blue_addr_1_reg_1049 <= tmp_5_mid2_fu_621_p1;
        sum_green_addr_1_reg_1039 <= tmp_5_mid2_fu_621_p1;
        sum_red_addr_1_reg_1029 <= tmp_5_mid2_fu_621_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_blue_load_reg_1111 <= sum_blue_q0;
        sum_green_load_reg_1100 <= sum_green_q0;
        sum_red_load_reg_1089 <= sum_red_q0;
        tmp_30_reg_1094 <= sum_red_q0[32'd31];
        tmp_33_reg_1105 <= sum_green_q0[32'd31];
        tmp_36_reg_1116 <= sum_blue_q0[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == tmp_7_fu_662_p2))) begin
        tmp_10_reg_1067[3 : 0] <= tmp_10_fu_674_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_11_reg_1167 <= tmp_11_fu_797_p3;
        tmp_12_reg_1172 <= tmp_12_fu_839_p3;
        tmp_13_reg_1177 <= tmp_13_fu_881_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_578_p2))) begin
        tmp_3_mid2_v_v_reg_1017 <= tmp_3_mid2_v_v_fu_610_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond_fu_922_p2))) begin
        tmp_last_V_reg_1231 <= tmp_last_V_fu_939_p2;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_578_p2)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        blue_address0 = tmp_14_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        blue_address0 = tmp_s_fu_561_p1;
    end else begin
        blue_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1)))) begin
        blue_ce0 = 1'b1;
    end else begin
        blue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        blue_we0 = 1'b1;
    end else begin
        blue_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        cell_avg_blue_address0 = tmp_21_fu_934_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_blue_address0 = tmp_10_reg_1067;
    end else begin
        cell_avg_blue_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in))) | (1'b1 == ap_CS_fsm_state18))) begin
        cell_avg_blue_ce0 = 1'b1;
    end else begin
        cell_avg_blue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_blue_we0 = 1'b1;
    end else begin
        cell_avg_blue_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        cell_avg_green_address0 = tmp_20_fu_917_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_green_address0 = tmp_10_reg_1067;
    end else begin
        cell_avg_green_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        cell_avg_green_ce0 = 1'b1;
    end else begin
        cell_avg_green_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_green_we0 = 1'b1;
    end else begin
        cell_avg_green_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        cell_avg_red_address0 = tmp_19_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_red_address0 = tmp_10_reg_1067;
    end else begin
        cell_avg_red_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18))) begin
        cell_avg_red_ce0 = 1'b1;
    end else begin
        cell_avg_red_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        cell_avg_red_we0 = 1'b1;
    end else begin
        cell_avg_red_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        green_address0 = tmp_14_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        green_address0 = tmp_6_fu_544_p1;
    end else begin
        green_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1)))) begin
        green_ce0 = 1'b1;
    end else begin
        green_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        green_we0 = 1'b1;
    end else begin
        green_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_4_phi_fu_457_p4 = i_10_reg_1054;
    end else begin
        i_4_phi_fu_457_p4 = i_4_reg_453;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_435_p4 = indvar_flatten_next_reg_1006;
    end else begin
        indvar_flatten_phi_fu_435_p4 = indvar_flatten_reg_431;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_446_p4 = tmp_3_mid2_v_v_reg_1017;
    end else begin
        j_phi_fu_446_p4 = j_reg_442;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        mat_in_TDATA_blk_n = mat_in_V_data_V_0_state[1'd0];
    end else begin
        mat_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1)))) begin
        mat_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        mat_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == mat_in_V_data_V_0_sel)) begin
        mat_in_V_data_V_0_data_out = mat_in_V_data_V_0_payload_B;
    end else begin
        mat_in_V_data_V_0_data_out = mat_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1)))) begin
        mat_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        mat_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        mat_out_TDATA_blk_n = mat_out_V_data_V_1_state[1'd1];
    end else begin
        mat_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mat_out_V_data_V_1_data_in = cell_avg_blue_q0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        mat_out_V_data_V_1_data_in = cell_avg_green_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        mat_out_V_data_V_1_data_in = cell_avg_red_q0;
    end else begin
        mat_out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == mat_out_V_data_V_1_sel)) begin
        mat_out_V_data_V_1_data_out = mat_out_V_data_V_1_payload_B;
    end else begin
        mat_out_V_data_V_1_data_out = mat_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mat_out_V_last_V_1_data_in = tmp_last_V_reg_1231;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state23))) begin
        mat_out_V_last_V_1_data_in = 1'd0;
    end else begin
        mat_out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == mat_out_V_last_V_1_sel)) begin
        mat_out_V_last_V_1_data_out = mat_out_V_last_V_1_payload_B;
    end else begin
        mat_out_V_last_V_1_data_out = mat_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1)))) begin
        mat_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        mat_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        red_address0 = tmp_14_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        red_address0 = tmp_2_fu_527_p1;
    end else begin
        red_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1)))) begin
        red_ce0 = 1'b1;
    end else begin
        red_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
        red_we0 = 1'b1;
    end else begin
        red_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_blue_address0 = tmp_10_fu_674_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_blue_address0 = sum_blue_addr_1_reg_1049;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        sum_blue_address0 = tmp_5_mid2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_blue_address0 = 64'd0;
    end else begin
        sum_blue_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_blue_ce0 = 1'b1;
    end else begin
        sum_blue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_blue_d0 = tmp_17_fu_655_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_blue_d0 = 32'd0;
    end else begin
        sum_blue_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_1_fu_566_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_blue_we0 = 1'b1;
    end else begin
        sum_blue_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_green_address0 = tmp_10_fu_674_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_green_address0 = sum_green_addr_1_reg_1039;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        sum_green_address0 = tmp_5_mid2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_green_address0 = 64'd0;
    end else begin
        sum_green_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_green_ce0 = 1'b1;
    end else begin
        sum_green_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_green_d0 = tmp_16_fu_648_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_green_d0 = 32'd0;
    end else begin
        sum_green_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_1_fu_566_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_green_we0 = 1'b1;
    end else begin
        sum_green_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_red_address0 = tmp_10_fu_674_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_red_address0 = sum_red_addr_1_reg_1029;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        sum_red_address0 = tmp_5_mid2_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_red_address0 = 64'd0;
    end else begin
        sum_red_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_red_ce0 = 1'b1;
    end else begin
        sum_red_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        sum_red_d0 = tmp_15_fu_641_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sum_red_d0 = 32'd0;
    end else begin
        sum_red_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_1_fu_566_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1002) & (1'b1 == ap_enable_reg_pp0_iter1)))) begin
        sum_red_we0 = 1'b1;
    end else begin
        sum_red_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_515_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_4_fu_532_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_8_fu_549_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (mat_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_1_fu_566_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_578_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_578_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == tmp_7_fu_662_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == exitcond2_fu_888_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond3_fu_905_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in)) & (1'd1 == exitcond_fu_922_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond_fu_922_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (mat_out_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25 = ((1'b0 == mat_out_V_data_V_1_ack_in) | (1'b0 == mat_out_V_keep_V_1_ack_in) | (1'b0 == mat_out_V_strb_V_1_ack_in) | (1'b0 == mat_out_V_user_V_1_ack_in) | (1'b0 == mat_out_V_last_V_1_ack_in) | (1'b0 == mat_out_V_id_V_1_ack_in) | (1'b0 == mat_out_V_dest_V_1_ack_in));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_888_p2 = ((i3_reg_475 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_905_p2 = ((i4_reg_486 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_578_p2 = ((indvar_flatten_phi_fu_435_p4 == 10'd900) ? 1'b1 : 1'b0);

assign exitcond_fu_922_p2 = ((i6_reg_497 == 4'd9) ? 1'b1 : 1'b0);

assign grp_fu_708_p1 = 65'd5497558139;

assign grp_fu_717_p1 = 65'd5497558139;

assign grp_fu_726_p1 = 65'd5497558139;

assign grp_fu_945_p0 = grp_fu_945_p00;

assign grp_fu_945_p00 = tmp_3_mid2_v_v_reg_1017;

assign grp_fu_945_p1 = 10'd100;

assign grp_fu_945_p2 = grp_fu_945_p20;

assign grp_fu_945_p20 = i_4_mid2_reg_1011;

assign i_10_fu_636_p2 = (i_4_mid2_reg_1011 + 7'd1);

assign i_11_fu_668_p2 = (i_5_reg_464 + 4'd1);

assign i_12_fu_894_p2 = (i3_reg_475 + 4'd1);

assign i_13_fu_911_p2 = (i4_reg_486 + 4'd1);

assign i_14_fu_928_p2 = (i6_reg_497 + 4'd1);

assign i_4_mid2_fu_596_p3 = ((tmp_9_fu_590_p2[0:0] === 1'b1) ? 7'd0 : i_4_phi_fu_457_p4);

assign i_6_fu_521_p2 = (i_reg_384 + 10'd1);

assign i_7_fu_538_p2 = (i_1_reg_396 + 10'd1);

assign i_8_fu_555_p2 = (i_2_reg_408 + 10'd1);

assign i_9_fu_572_p2 = (i_3_reg_420 + 4'd1);

assign indvar_flatten_next_fu_584_p2 = (indvar_flatten_phi_fu_435_p4 + 10'd1);

assign j_s_fu_604_p2 = (j_phi_fu_446_p4 + 4'd1);

assign mat_in_TREADY = mat_in_V_dest_V_0_state[1'd1];

assign mat_in_V_data_V_0_ack_in = mat_in_V_data_V_0_state[1'd1];

assign mat_in_V_data_V_0_load_A = (mat_in_V_data_V_0_state_cmp_full & ~mat_in_V_data_V_0_sel_wr);

assign mat_in_V_data_V_0_load_B = (mat_in_V_data_V_0_sel_wr & mat_in_V_data_V_0_state_cmp_full);

assign mat_in_V_data_V_0_sel = mat_in_V_data_V_0_sel_rd;

assign mat_in_V_data_V_0_state_cmp_full = ((mat_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign mat_in_V_data_V_0_vld_in = mat_in_TVALID;

assign mat_in_V_data_V_0_vld_out = mat_in_V_data_V_0_state[1'd0];

assign mat_in_V_dest_V_0_vld_in = mat_in_TVALID;

assign mat_out_TDATA = mat_out_V_data_V_1_data_out;

assign mat_out_TDEST = mat_out_V_dest_V_1_data_out;

assign mat_out_TID = mat_out_V_id_V_1_data_out;

assign mat_out_TKEEP = mat_out_V_keep_V_1_data_out;

assign mat_out_TLAST = mat_out_V_last_V_1_data_out;

assign mat_out_TSTRB = mat_out_V_strb_V_1_data_out;

assign mat_out_TUSER = mat_out_V_user_V_1_data_out;

assign mat_out_TVALID = mat_out_V_dest_V_1_state[1'd0];

assign mat_out_V_data_V_1_ack_in = mat_out_V_data_V_1_state[1'd1];

assign mat_out_V_data_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_data_V_1_load_A = (mat_out_V_data_V_1_state_cmp_full & ~mat_out_V_data_V_1_sel_wr);

assign mat_out_V_data_V_1_load_B = (mat_out_V_data_V_1_sel_wr & mat_out_V_data_V_1_state_cmp_full);

assign mat_out_V_data_V_1_sel = mat_out_V_data_V_1_sel_rd;

assign mat_out_V_data_V_1_state_cmp_full = ((mat_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign mat_out_V_data_V_1_vld_out = mat_out_V_data_V_1_state[1'd0];

assign mat_out_V_dest_V_1_ack_in = mat_out_V_dest_V_1_state[1'd1];

assign mat_out_V_dest_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_dest_V_1_data_out = 1'd0;

assign mat_out_V_dest_V_1_sel = mat_out_V_dest_V_1_sel_rd;

assign mat_out_V_dest_V_1_vld_out = mat_out_V_dest_V_1_state[1'd0];

assign mat_out_V_id_V_1_ack_in = mat_out_V_id_V_1_state[1'd1];

assign mat_out_V_id_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_id_V_1_data_out = 1'd0;

assign mat_out_V_id_V_1_sel = mat_out_V_id_V_1_sel_rd;

assign mat_out_V_id_V_1_vld_out = mat_out_V_id_V_1_state[1'd0];

assign mat_out_V_keep_V_1_ack_in = mat_out_V_keep_V_1_state[1'd1];

assign mat_out_V_keep_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_keep_V_1_data_out = 4'd15;

assign mat_out_V_keep_V_1_sel = mat_out_V_keep_V_1_sel_rd;

assign mat_out_V_keep_V_1_vld_out = mat_out_V_keep_V_1_state[1'd0];

assign mat_out_V_last_V_1_ack_in = mat_out_V_last_V_1_state[1'd1];

assign mat_out_V_last_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_last_V_1_load_A = (mat_out_V_last_V_1_state_cmp_full & ~mat_out_V_last_V_1_sel_wr);

assign mat_out_V_last_V_1_load_B = (mat_out_V_last_V_1_sel_wr & mat_out_V_last_V_1_state_cmp_full);

assign mat_out_V_last_V_1_sel = mat_out_V_last_V_1_sel_rd;

assign mat_out_V_last_V_1_state_cmp_full = ((mat_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign mat_out_V_last_V_1_vld_out = mat_out_V_last_V_1_state[1'd0];

assign mat_out_V_strb_V_1_ack_in = mat_out_V_strb_V_1_state[1'd1];

assign mat_out_V_strb_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_strb_V_1_data_out = 4'd15;

assign mat_out_V_strb_V_1_sel = mat_out_V_strb_V_1_sel_rd;

assign mat_out_V_strb_V_1_vld_out = mat_out_V_strb_V_1_state[1'd0];

assign mat_out_V_user_V_1_ack_in = mat_out_V_user_V_1_state[1'd1];

assign mat_out_V_user_V_1_ack_out = mat_out_TREADY;

assign mat_out_V_user_V_1_data_out = 1'd0;

assign mat_out_V_user_V_1_sel = mat_out_V_user_V_1_sel_rd;

assign mat_out_V_user_V_1_vld_out = mat_out_V_user_V_1_state[1'd0];

assign neg_mul1_fu_762_p2 = (65'd0 - mul1_reg_1137);

assign neg_mul2_fu_804_p2 = (65'd0 - mul9_reg_1147);

assign neg_mul_fu_846_p2 = (65'd0 - mul_reg_1157);

assign neg_ti1_fu_791_p2 = (32'd0 - tmp_23_fu_784_p3);

assign neg_ti2_fu_833_p2 = (32'd0 - tmp_26_fu_826_p3);

assign neg_ti_fu_875_p2 = (32'd0 - tmp_29_fu_868_p3);

assign tmp_10_fu_674_p1 = i_5_reg_464;

assign tmp_11_fu_797_p3 = ((tmp_30_reg_1094[0:0] === 1'b1) ? neg_ti1_fu_791_p2 : tmp_22_fu_781_p1);

assign tmp_12_fu_839_p3 = ((tmp_33_reg_1105[0:0] === 1'b1) ? neg_ti2_fu_833_p2 : tmp_25_fu_823_p1);

assign tmp_13_fu_881_p3 = ((tmp_36_reg_1116[0:0] === 1'b1) ? neg_ti_fu_875_p2 : tmp_28_fu_865_p1);

assign tmp_14_fu_630_p1 = grp_fu_945_p3;

assign tmp_15_fu_641_p2 = (sum_red_q0 + red_q0);

assign tmp_16_fu_648_p2 = (sum_green_q0 + green_q0);

assign tmp_17_fu_655_p2 = (sum_blue_q0 + blue_q0);

assign tmp_18_fu_777_p1 = $signed(tmp_31_fu_767_p4);

assign tmp_19_fu_900_p1 = i3_reg_475;

assign tmp_1_fu_566_p2 = ((i_3_reg_420 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_20_fu_917_p1 = i4_reg_486;

assign tmp_21_fu_934_p1 = i6_reg_497;

assign tmp_22_fu_781_p1 = $signed(tmp_32_reg_1142);

assign tmp_23_fu_784_p3 = ((tmp_30_reg_1094[0:0] === 1'b1) ? tmp_18_fu_777_p1 : tmp_22_fu_781_p1);

assign tmp_24_fu_819_p1 = $signed(tmp_34_fu_809_p4);

assign tmp_25_fu_823_p1 = $signed(tmp_35_reg_1152);

assign tmp_26_fu_826_p3 = ((tmp_33_reg_1105[0:0] === 1'b1) ? tmp_24_fu_819_p1 : tmp_25_fu_823_p1);

assign tmp_27_fu_861_p1 = $signed(tmp_37_fu_851_p4);

assign tmp_28_fu_865_p1 = $signed(tmp_38_reg_1162);

assign tmp_29_fu_868_p3 = ((tmp_36_reg_1116[0:0] === 1'b1) ? tmp_27_fu_861_p1 : tmp_28_fu_865_p1);

assign tmp_2_fu_527_p1 = i_reg_384;

assign tmp_31_fu_767_p4 = {{neg_mul1_fu_762_p2[64:39]}};

assign tmp_34_fu_809_p4 = {{neg_mul2_fu_804_p2[64:39]}};

assign tmp_37_fu_851_p4 = {{neg_mul_fu_846_p2[64:39]}};

assign tmp_3_mid2_v_v_fu_610_p3 = ((tmp_9_fu_590_p2[0:0] === 1'b1) ? j_s_fu_604_p2 : j_phi_fu_446_p4);

assign tmp_4_fu_532_p2 = ((i_1_reg_396 == 10'd900) ? 1'b1 : 1'b0);

assign tmp_5_mid2_fu_621_p1 = tmp_3_mid2_v_v_reg_1017;

assign tmp_6_fu_544_p1 = i_1_reg_396;

assign tmp_7_fu_662_p2 = ((i_5_reg_464 == 4'd9) ? 1'b1 : 1'b0);

assign tmp_8_fu_549_p2 = ((i_2_reg_408 == 10'd900) ? 1'b1 : 1'b0);

assign tmp_9_fu_590_p2 = ((i_4_phi_fu_457_p4 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_fu_515_p2 = ((i_reg_384 == 10'd900) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_939_p2 = ((i6_reg_497 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_561_p1 = i_2_reg_408;

always @ (posedge ap_clk) begin
    tmp_10_reg_1067[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixAvg

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrixAvg.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrixAvg::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrixAvg::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> matrixAvg::ap_ST_fsm_state1 = "1";
const sc_lv<26> matrixAvg::ap_ST_fsm_state2 = "10";
const sc_lv<26> matrixAvg::ap_ST_fsm_state3 = "100";
const sc_lv<26> matrixAvg::ap_ST_fsm_state4 = "1000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state5 = "10000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state6 = "100000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_pp0_stage1 = "1000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state12 = "10000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state13 = "100000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state14 = "1000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state15 = "10000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state16 = "100000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state17 = "1000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state18 = "10000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state19 = "100000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state20 = "1000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state21 = "10000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state22 = "100000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state23 = "1000000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state24 = "10000000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state25 = "100000000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state26 = "1000000000000000000000000";
const sc_lv<26> matrixAvg::ap_ST_fsm_state27 = "10000000000000000000000000";
const bool matrixAvg::ap_const_boolean_1 = true;
const sc_lv<1> matrixAvg::ap_const_lv1_0 = "0";
const sc_lv<1> matrixAvg::ap_const_lv1_1 = "1";
const sc_lv<2> matrixAvg::ap_const_lv2_0 = "00";
const sc_lv<2> matrixAvg::ap_const_lv2_2 = "10";
const sc_lv<2> matrixAvg::ap_const_lv2_3 = "11";
const sc_lv<2> matrixAvg::ap_const_lv2_1 = "1";
const sc_lv<32> matrixAvg::ap_const_lv32_2 = "10";
const sc_lv<32> matrixAvg::ap_const_lv32_4 = "100";
const sc_lv<32> matrixAvg::ap_const_lv32_6 = "110";
const sc_lv<32> matrixAvg::ap_const_lv32_12 = "10010";
const sc_lv<32> matrixAvg::ap_const_lv32_13 = "10011";
const sc_lv<32> matrixAvg::ap_const_lv32_15 = "10101";
const sc_lv<32> matrixAvg::ap_const_lv32_16 = "10110";
const sc_lv<32> matrixAvg::ap_const_lv32_18 = "11000";
const sc_lv<32> matrixAvg::ap_const_lv32_19 = "11001";
const sc_lv<32> matrixAvg::ap_const_lv32_1 = "1";
const sc_lv<32> matrixAvg::ap_const_lv32_3 = "11";
const sc_lv<32> matrixAvg::ap_const_lv32_5 = "101";
const sc_lv<32> matrixAvg::ap_const_lv32_7 = "111";
const sc_lv<32> matrixAvg::ap_const_lv32_8 = "1000";
const bool matrixAvg::ap_const_boolean_0 = false;
const sc_lv<32> matrixAvg::ap_const_lv32_9 = "1001";
const sc_lv<32> matrixAvg::ap_const_lv32_B = "1011";
const sc_lv<32> matrixAvg::ap_const_lv32_C = "1100";
const sc_lv<32> matrixAvg::ap_const_lv32_D = "1101";
const sc_lv<32> matrixAvg::ap_const_lv32_E = "1110";
const sc_lv<32> matrixAvg::ap_const_lv32_F = "1111";
const sc_lv<32> matrixAvg::ap_const_lv32_11 = "10001";
const sc_lv<32> matrixAvg::ap_const_lv32_14 = "10100";
const sc_lv<32> matrixAvg::ap_const_lv32_17 = "10111";
const sc_lv<10> matrixAvg::ap_const_lv10_0 = "0000000000";
const sc_lv<32> matrixAvg::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> matrixAvg::ap_const_lv4_0 = "0000";
const sc_lv<7> matrixAvg::ap_const_lv7_0 = "0000000";
const sc_lv<32> matrixAvg::ap_const_lv32_10 = "10000";
const sc_lv<32> matrixAvg::ap_const_lv32_A = "1010";
const sc_lv<64> matrixAvg::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> matrixAvg::ap_const_lv4_F = "1111";
const sc_lv<10> matrixAvg::ap_const_lv10_384 = "1110000100";
const sc_lv<10> matrixAvg::ap_const_lv10_1 = "1";
const sc_lv<4> matrixAvg::ap_const_lv4_9 = "1001";
const sc_lv<4> matrixAvg::ap_const_lv4_1 = "1";
const sc_lv<7> matrixAvg::ap_const_lv7_64 = "1100100";
const sc_lv<7> matrixAvg::ap_const_lv7_1 = "1";
const sc_lv<32> matrixAvg::ap_const_lv32_1F = "11111";
const sc_lv<65> matrixAvg::ap_const_lv65_147AE147B = "101000111101011100001010001111011";
const sc_lv<32> matrixAvg::ap_const_lv32_27 = "100111";
const sc_lv<32> matrixAvg::ap_const_lv32_40 = "1000000";
const sc_lv<65> matrixAvg::ap_const_lv65_0 = "00000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> matrixAvg::ap_const_lv4_8 = "1000";
const sc_lv<10> matrixAvg::ap_const_lv10_64 = "1100100";

matrixAvg::matrixAvg(sc_module_name name) : sc_module(name), mVcdFile(0) {
    red_U = new matrixAvg_red("red_U");
    red_U->clk(ap_clk);
    red_U->reset(ap_rst_n_inv);
    red_U->address0(red_address0);
    red_U->ce0(red_ce0);
    red_U->we0(red_we0);
    red_U->d0(mat_in_V_data_V_0_data_out);
    red_U->q0(red_q0);
    green_U = new matrixAvg_red("green_U");
    green_U->clk(ap_clk);
    green_U->reset(ap_rst_n_inv);
    green_U->address0(green_address0);
    green_U->ce0(green_ce0);
    green_U->we0(green_we0);
    green_U->d0(mat_in_V_data_V_0_data_out);
    green_U->q0(green_q0);
    blue_U = new matrixAvg_red("blue_U");
    blue_U->clk(ap_clk);
    blue_U->reset(ap_rst_n_inv);
    blue_U->address0(blue_address0);
    blue_U->ce0(blue_ce0);
    blue_U->we0(blue_we0);
    blue_U->d0(mat_in_V_data_V_0_data_out);
    blue_U->q0(blue_q0);
    cell_avg_red_U = new matrixAvg_cell_avbkb("cell_avg_red_U");
    cell_avg_red_U->clk(ap_clk);
    cell_avg_red_U->reset(ap_rst_n_inv);
    cell_avg_red_U->address0(cell_avg_red_address0);
    cell_avg_red_U->ce0(cell_avg_red_ce0);
    cell_avg_red_U->we0(cell_avg_red_we0);
    cell_avg_red_U->d0(tmp_11_reg_1167);
    cell_avg_red_U->q0(cell_avg_red_q0);
    cell_avg_blue_U = new matrixAvg_cell_avbkb("cell_avg_blue_U");
    cell_avg_blue_U->clk(ap_clk);
    cell_avg_blue_U->reset(ap_rst_n_inv);
    cell_avg_blue_U->address0(cell_avg_blue_address0);
    cell_avg_blue_U->ce0(cell_avg_blue_ce0);
    cell_avg_blue_U->we0(cell_avg_blue_we0);
    cell_avg_blue_U->d0(tmp_13_reg_1177);
    cell_avg_blue_U->q0(cell_avg_blue_q0);
    cell_avg_green_U = new matrixAvg_cell_avbkb("cell_avg_green_U");
    cell_avg_green_U->clk(ap_clk);
    cell_avg_green_U->reset(ap_rst_n_inv);
    cell_avg_green_U->address0(cell_avg_green_address0);
    cell_avg_green_U->ce0(cell_avg_green_ce0);
    cell_avg_green_U->we0(cell_avg_green_we0);
    cell_avg_green_U->d0(tmp_12_reg_1172);
    cell_avg_green_U->q0(cell_avg_green_q0);
    sum_red_U = new matrixAvg_cell_avbkb("sum_red_U");
    sum_red_U->clk(ap_clk);
    sum_red_U->reset(ap_rst_n_inv);
    sum_red_U->address0(sum_red_address0);
    sum_red_U->ce0(sum_red_ce0);
    sum_red_U->we0(sum_red_we0);
    sum_red_U->d0(sum_red_d0);
    sum_red_U->q0(sum_red_q0);
    sum_blue_U = new matrixAvg_cell_avbkb("sum_blue_U");
    sum_blue_U->clk(ap_clk);
    sum_blue_U->reset(ap_rst_n_inv);
    sum_blue_U->address0(sum_blue_address0);
    sum_blue_U->ce0(sum_blue_ce0);
    sum_blue_U->we0(sum_blue_we0);
    sum_blue_U->d0(sum_blue_d0);
    sum_blue_U->q0(sum_blue_q0);
    sum_green_U = new matrixAvg_cell_avbkb("sum_green_U");
    sum_green_U->clk(ap_clk);
    sum_green_U->reset(ap_rst_n_inv);
    sum_green_U->address0(sum_green_address0);
    sum_green_U->ce0(sum_green_ce0);
    sum_green_U->we0(sum_green_we0);
    sum_green_U->d0(sum_green_d0);
    sum_green_U->q0(sum_green_q0);
    matrixAvg_mul_32seOg_U1 = new matrixAvg_mul_32seOg<1,2,32,34,65>("matrixAvg_mul_32seOg_U1");
    matrixAvg_mul_32seOg_U1->clk(ap_clk);
    matrixAvg_mul_32seOg_U1->reset(ap_rst_n_inv);
    matrixAvg_mul_32seOg_U1->din0(sum_red_load_reg_1089);
    matrixAvg_mul_32seOg_U1->din1(grp_fu_708_p1);
    matrixAvg_mul_32seOg_U1->ce(ap_var_for_const0);
    matrixAvg_mul_32seOg_U1->dout(grp_fu_708_p2);
    matrixAvg_mul_32seOg_U2 = new matrixAvg_mul_32seOg<1,2,32,34,65>("matrixAvg_mul_32seOg_U2");
    matrixAvg_mul_32seOg_U2->clk(ap_clk);
    matrixAvg_mul_32seOg_U2->reset(ap_rst_n_inv);
    matrixAvg_mul_32seOg_U2->din0(sum_green_load_reg_1100);
    matrixAvg_mul_32seOg_U2->din1(grp_fu_717_p1);
    matrixAvg_mul_32seOg_U2->ce(ap_var_for_const0);
    matrixAvg_mul_32seOg_U2->dout(grp_fu_717_p2);
    matrixAvg_mul_32seOg_U3 = new matrixAvg_mul_32seOg<1,2,32,34,65>("matrixAvg_mul_32seOg_U3");
    matrixAvg_mul_32seOg_U3->clk(ap_clk);
    matrixAvg_mul_32seOg_U3->reset(ap_rst_n_inv);
    matrixAvg_mul_32seOg_U3->din0(sum_blue_load_reg_1111);
    matrixAvg_mul_32seOg_U3->din1(grp_fu_726_p1);
    matrixAvg_mul_32seOg_U3->ce(ap_var_for_const0);
    matrixAvg_mul_32seOg_U3->dout(grp_fu_726_p2);
    matrixAvg_mac_mulfYi_U4 = new matrixAvg_mac_mulfYi<1,1,4,8,7,10>("matrixAvg_mac_mulfYi_U4");
    matrixAvg_mac_mulfYi_U4->din0(grp_fu_945_p0);
    matrixAvg_mac_mulfYi_U4->din1(grp_fu_945_p1);
    matrixAvg_mac_mulfYi_U4->din2(grp_fu_945_p2);
    matrixAvg_mac_mulfYi_U4->dout(grp_fu_945_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00011011);

    SC_METHOD(thread_ap_block_state10_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state25);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( mat_out_V_keep_V_1_ack_in );
    sensitive << ( mat_out_V_strb_V_1_ack_in );
    sensitive << ( mat_out_V_user_V_1_ack_in );
    sensitive << ( mat_out_V_last_V_1_ack_in );
    sensitive << ( mat_out_V_id_V_1_ack_in );
    sensitive << ( mat_out_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_flatten_fu_578_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_blue_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_s_fu_561_p1 );
    sensitive << ( tmp_14_fu_630_p1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );

    SC_METHOD(thread_blue_ce0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );

    SC_METHOD(thread_blue_we0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_cell_avg_blue_address0);
    sensitive << ( tmp_10_reg_1067 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_21_fu_934_p1 );

    SC_METHOD(thread_cell_avg_blue_ce0);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( mat_out_V_keep_V_1_ack_in );
    sensitive << ( mat_out_V_strb_V_1_ack_in );
    sensitive << ( mat_out_V_user_V_1_ack_in );
    sensitive << ( mat_out_V_last_V_1_ack_in );
    sensitive << ( mat_out_V_id_V_1_ack_in );
    sensitive << ( mat_out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_cell_avg_blue_we0);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_cell_avg_green_address0);
    sensitive << ( tmp_10_reg_1067 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_20_fu_917_p1 );

    SC_METHOD(thread_cell_avg_green_ce0);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_cell_avg_green_we0);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_cell_avg_red_address0);
    sensitive << ( tmp_10_reg_1067 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( tmp_19_fu_900_p1 );

    SC_METHOD(thread_cell_avg_red_ce0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_cell_avg_red_we0);
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_exitcond2_fu_888_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( i3_reg_475 );

    SC_METHOD(thread_exitcond3_fu_905_p2);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( i4_reg_486 );

    SC_METHOD(thread_exitcond_flatten_fu_578_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_phi_fu_435_p4 );

    SC_METHOD(thread_exitcond_fu_922_p2);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( mat_out_V_keep_V_1_ack_in );
    sensitive << ( mat_out_V_strb_V_1_ack_in );
    sensitive << ( mat_out_V_user_V_1_ack_in );
    sensitive << ( mat_out_V_last_V_1_ack_in );
    sensitive << ( mat_out_V_id_V_1_ack_in );
    sensitive << ( mat_out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( i6_reg_497 );

    SC_METHOD(thread_green_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_6_fu_544_p1 );
    sensitive << ( tmp_14_fu_630_p1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );

    SC_METHOD(thread_green_ce0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );

    SC_METHOD(thread_green_we0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_708_p1);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_717_p1);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_726_p1);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_grp_fu_945_p0);
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( grp_fu_945_p00 );

    SC_METHOD(thread_grp_fu_945_p00);
    sensitive << ( tmp_3_mid2_v_v_reg_1017 );

    SC_METHOD(thread_grp_fu_945_p1);
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );

    SC_METHOD(thread_grp_fu_945_p2);
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( grp_fu_945_p20 );

    SC_METHOD(thread_grp_fu_945_p20);
    sensitive << ( i_4_mid2_reg_1011 );

    SC_METHOD(thread_i_10_fu_636_p2);
    sensitive << ( i_4_mid2_reg_1011 );

    SC_METHOD(thread_i_11_fu_668_p2);
    sensitive << ( i_5_reg_464 );

    SC_METHOD(thread_i_12_fu_894_p2);
    sensitive << ( i3_reg_475 );

    SC_METHOD(thread_i_13_fu_911_p2);
    sensitive << ( i4_reg_486 );

    SC_METHOD(thread_i_14_fu_928_p2);
    sensitive << ( i6_reg_497 );

    SC_METHOD(thread_i_4_mid2_fu_596_p3);
    sensitive << ( i_4_phi_fu_457_p4 );
    sensitive << ( tmp_9_fu_590_p2 );

    SC_METHOD(thread_i_4_phi_fu_457_p4);
    sensitive << ( i_4_reg_453 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_10_reg_1054 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_i_6_fu_521_p2);
    sensitive << ( i_reg_384 );

    SC_METHOD(thread_i_7_fu_538_p2);
    sensitive << ( i_1_reg_396 );

    SC_METHOD(thread_i_8_fu_555_p2);
    sensitive << ( i_2_reg_408 );

    SC_METHOD(thread_i_9_fu_572_p2);
    sensitive << ( i_3_reg_420 );

    SC_METHOD(thread_indvar_flatten_next_fu_584_p2);
    sensitive << ( indvar_flatten_phi_fu_435_p4 );

    SC_METHOD(thread_indvar_flatten_phi_fu_435_p4);
    sensitive << ( indvar_flatten_reg_431 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_next_reg_1006 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_j_phi_fu_446_p4);
    sensitive << ( j_reg_442 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_3_mid2_v_v_reg_1017 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_j_s_fu_604_p2);
    sensitive << ( j_phi_fu_446_p4 );

    SC_METHOD(thread_mat_in_TDATA_blk_n);
    sensitive << ( mat_in_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mat_in_TREADY);
    sensitive << ( mat_in_V_dest_V_0_state );

    SC_METHOD(thread_mat_in_V_data_V_0_ack_in);
    sensitive << ( mat_in_V_data_V_0_state );

    SC_METHOD(thread_mat_in_V_data_V_0_ack_out);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mat_in_V_data_V_0_data_out);
    sensitive << ( mat_in_V_data_V_0_payload_A );
    sensitive << ( mat_in_V_data_V_0_payload_B );
    sensitive << ( mat_in_V_data_V_0_sel );

    SC_METHOD(thread_mat_in_V_data_V_0_load_A);
    sensitive << ( mat_in_V_data_V_0_sel_wr );
    sensitive << ( mat_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_mat_in_V_data_V_0_load_B);
    sensitive << ( mat_in_V_data_V_0_sel_wr );
    sensitive << ( mat_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_mat_in_V_data_V_0_sel);
    sensitive << ( mat_in_V_data_V_0_sel_rd );

    SC_METHOD(thread_mat_in_V_data_V_0_state_cmp_full);
    sensitive << ( mat_in_V_data_V_0_state );

    SC_METHOD(thread_mat_in_V_data_V_0_vld_in);
    sensitive << ( mat_in_TVALID );

    SC_METHOD(thread_mat_in_V_data_V_0_vld_out);
    sensitive << ( mat_in_V_data_V_0_state );

    SC_METHOD(thread_mat_in_V_dest_V_0_ack_out);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mat_in_V_dest_V_0_vld_in);
    sensitive << ( mat_in_TVALID );

    SC_METHOD(thread_mat_out_TDATA);
    sensitive << ( mat_out_V_data_V_1_data_out );

    SC_METHOD(thread_mat_out_TDATA_blk_n);
    sensitive << ( mat_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_mat_out_TDEST);
    sensitive << ( mat_out_V_dest_V_1_data_out );

    SC_METHOD(thread_mat_out_TID);
    sensitive << ( mat_out_V_id_V_1_data_out );

    SC_METHOD(thread_mat_out_TKEEP);
    sensitive << ( mat_out_V_keep_V_1_data_out );

    SC_METHOD(thread_mat_out_TLAST);
    sensitive << ( mat_out_V_last_V_1_data_out );

    SC_METHOD(thread_mat_out_TSTRB);
    sensitive << ( mat_out_V_strb_V_1_data_out );

    SC_METHOD(thread_mat_out_TUSER);
    sensitive << ( mat_out_V_user_V_1_data_out );

    SC_METHOD(thread_mat_out_TVALID);
    sensitive << ( mat_out_V_dest_V_1_state );

    SC_METHOD(thread_mat_out_V_data_V_1_ack_in);
    sensitive << ( mat_out_V_data_V_1_state );

    SC_METHOD(thread_mat_out_V_data_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_data_V_1_data_in);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( cell_avg_red_q0 );
    sensitive << ( cell_avg_green_q0 );
    sensitive << ( cell_avg_blue_q0 );

    SC_METHOD(thread_mat_out_V_data_V_1_data_out);
    sensitive << ( mat_out_V_data_V_1_payload_A );
    sensitive << ( mat_out_V_data_V_1_payload_B );
    sensitive << ( mat_out_V_data_V_1_sel );

    SC_METHOD(thread_mat_out_V_data_V_1_load_A);
    sensitive << ( mat_out_V_data_V_1_sel_wr );
    sensitive << ( mat_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_mat_out_V_data_V_1_load_B);
    sensitive << ( mat_out_V_data_V_1_sel_wr );
    sensitive << ( mat_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_mat_out_V_data_V_1_sel);
    sensitive << ( mat_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_data_V_1_state_cmp_full);
    sensitive << ( mat_out_V_data_V_1_state );

    SC_METHOD(thread_mat_out_V_data_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_data_V_1_vld_out);
    sensitive << ( mat_out_V_data_V_1_state );

    SC_METHOD(thread_mat_out_V_dest_V_1_ack_in);
    sensitive << ( mat_out_V_dest_V_1_state );

    SC_METHOD(thread_mat_out_V_dest_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_dest_V_1_data_out);
    sensitive << ( mat_out_V_dest_V_1_sel );

    SC_METHOD(thread_mat_out_V_dest_V_1_sel);
    sensitive << ( mat_out_V_dest_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_dest_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_dest_V_1_vld_out);
    sensitive << ( mat_out_V_dest_V_1_state );

    SC_METHOD(thread_mat_out_V_id_V_1_ack_in);
    sensitive << ( mat_out_V_id_V_1_state );

    SC_METHOD(thread_mat_out_V_id_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_id_V_1_data_out);
    sensitive << ( mat_out_V_id_V_1_sel );

    SC_METHOD(thread_mat_out_V_id_V_1_sel);
    sensitive << ( mat_out_V_id_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_id_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_id_V_1_vld_out);
    sensitive << ( mat_out_V_id_V_1_state );

    SC_METHOD(thread_mat_out_V_keep_V_1_ack_in);
    sensitive << ( mat_out_V_keep_V_1_state );

    SC_METHOD(thread_mat_out_V_keep_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_keep_V_1_data_out);
    sensitive << ( mat_out_V_keep_V_1_sel );

    SC_METHOD(thread_mat_out_V_keep_V_1_sel);
    sensitive << ( mat_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_keep_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_keep_V_1_vld_out);
    sensitive << ( mat_out_V_keep_V_1_state );

    SC_METHOD(thread_mat_out_V_last_V_1_ack_in);
    sensitive << ( mat_out_V_last_V_1_state );

    SC_METHOD(thread_mat_out_V_last_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_last_V_1_data_in);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( tmp_last_V_reg_1231 );

    SC_METHOD(thread_mat_out_V_last_V_1_data_out);
    sensitive << ( mat_out_V_last_V_1_payload_A );
    sensitive << ( mat_out_V_last_V_1_payload_B );
    sensitive << ( mat_out_V_last_V_1_sel );

    SC_METHOD(thread_mat_out_V_last_V_1_load_A);
    sensitive << ( mat_out_V_last_V_1_sel_wr );
    sensitive << ( mat_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_mat_out_V_last_V_1_load_B);
    sensitive << ( mat_out_V_last_V_1_sel_wr );
    sensitive << ( mat_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_mat_out_V_last_V_1_sel);
    sensitive << ( mat_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_last_V_1_state_cmp_full);
    sensitive << ( mat_out_V_last_V_1_state );

    SC_METHOD(thread_mat_out_V_last_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_last_V_1_vld_out);
    sensitive << ( mat_out_V_last_V_1_state );

    SC_METHOD(thread_mat_out_V_strb_V_1_ack_in);
    sensitive << ( mat_out_V_strb_V_1_state );

    SC_METHOD(thread_mat_out_V_strb_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_strb_V_1_data_out);
    sensitive << ( mat_out_V_strb_V_1_sel );

    SC_METHOD(thread_mat_out_V_strb_V_1_sel);
    sensitive << ( mat_out_V_strb_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_strb_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_strb_V_1_vld_out);
    sensitive << ( mat_out_V_strb_V_1_state );

    SC_METHOD(thread_mat_out_V_user_V_1_ack_in);
    sensitive << ( mat_out_V_user_V_1_state );

    SC_METHOD(thread_mat_out_V_user_V_1_ack_out);
    sensitive << ( mat_out_TREADY );

    SC_METHOD(thread_mat_out_V_user_V_1_data_out);
    sensitive << ( mat_out_V_user_V_1_sel );

    SC_METHOD(thread_mat_out_V_user_V_1_sel);
    sensitive << ( mat_out_V_user_V_1_sel_rd );

    SC_METHOD(thread_mat_out_V_user_V_1_vld_in);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mat_out_V_user_V_1_vld_out);
    sensitive << ( mat_out_V_user_V_1_state );

    SC_METHOD(thread_neg_mul1_fu_762_p2);
    sensitive << ( mul1_reg_1137 );

    SC_METHOD(thread_neg_mul2_fu_804_p2);
    sensitive << ( mul9_reg_1147 );

    SC_METHOD(thread_neg_mul_fu_846_p2);
    sensitive << ( mul_reg_1157 );

    SC_METHOD(thread_neg_ti1_fu_791_p2);
    sensitive << ( tmp_23_fu_784_p3 );

    SC_METHOD(thread_neg_ti2_fu_833_p2);
    sensitive << ( tmp_26_fu_826_p3 );

    SC_METHOD(thread_neg_ti_fu_875_p2);
    sensitive << ( tmp_29_fu_868_p3 );

    SC_METHOD(thread_red_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_2_fu_527_p1 );
    sensitive << ( tmp_14_fu_630_p1 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );

    SC_METHOD(thread_red_ce0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );

    SC_METHOD(thread_red_we0);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sum_blue_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( sum_blue_addr_1_reg_1049 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_10_fu_674_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( tmp_5_mid2_fu_621_p1 );

    SC_METHOD(thread_sum_blue_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_blue_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( tmp_17_fu_655_p2 );

    SC_METHOD(thread_sum_blue_we0);
    sensitive << ( tmp_1_fu_566_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_green_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( sum_green_addr_1_reg_1039 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_10_fu_674_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( tmp_5_mid2_fu_621_p1 );

    SC_METHOD(thread_sum_green_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_green_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( tmp_16_fu_648_p2 );

    SC_METHOD(thread_sum_green_we0);
    sensitive << ( tmp_1_fu_566_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_red_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( sum_red_addr_1_reg_1029 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_10_fu_674_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( tmp_5_mid2_fu_621_p1 );

    SC_METHOD(thread_sum_red_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_sum_red_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( tmp_15_fu_641_p2 );

    SC_METHOD(thread_sum_red_we0);
    sensitive << ( tmp_1_fu_566_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_flatten_reg_1002 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_10_fu_674_p1);
    sensitive << ( i_5_reg_464 );

    SC_METHOD(thread_tmp_11_fu_797_p3);
    sensitive << ( tmp_30_reg_1094 );
    sensitive << ( tmp_22_fu_781_p1 );
    sensitive << ( neg_ti1_fu_791_p2 );

    SC_METHOD(thread_tmp_12_fu_839_p3);
    sensitive << ( tmp_33_reg_1105 );
    sensitive << ( tmp_25_fu_823_p1 );
    sensitive << ( neg_ti2_fu_833_p2 );

    SC_METHOD(thread_tmp_13_fu_881_p3);
    sensitive << ( tmp_36_reg_1116 );
    sensitive << ( tmp_28_fu_865_p1 );
    sensitive << ( neg_ti_fu_875_p2 );

    SC_METHOD(thread_tmp_14_fu_630_p1);
    sensitive << ( grp_fu_945_p3 );

    SC_METHOD(thread_tmp_15_fu_641_p2);
    sensitive << ( sum_red_q0 );
    sensitive << ( red_q0 );

    SC_METHOD(thread_tmp_16_fu_648_p2);
    sensitive << ( sum_green_q0 );
    sensitive << ( green_q0 );

    SC_METHOD(thread_tmp_17_fu_655_p2);
    sensitive << ( sum_blue_q0 );
    sensitive << ( blue_q0 );

    SC_METHOD(thread_tmp_18_fu_777_p1);
    sensitive << ( tmp_31_fu_767_p4 );

    SC_METHOD(thread_tmp_19_fu_900_p1);
    sensitive << ( i3_reg_475 );

    SC_METHOD(thread_tmp_1_fu_566_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_3_reg_420 );

    SC_METHOD(thread_tmp_20_fu_917_p1);
    sensitive << ( i4_reg_486 );

    SC_METHOD(thread_tmp_21_fu_934_p1);
    sensitive << ( i6_reg_497 );

    SC_METHOD(thread_tmp_22_fu_781_p1);
    sensitive << ( tmp_32_reg_1142 );

    SC_METHOD(thread_tmp_23_fu_784_p3);
    sensitive << ( tmp_30_reg_1094 );
    sensitive << ( tmp_18_fu_777_p1 );
    sensitive << ( tmp_22_fu_781_p1 );

    SC_METHOD(thread_tmp_24_fu_819_p1);
    sensitive << ( tmp_34_fu_809_p4 );

    SC_METHOD(thread_tmp_25_fu_823_p1);
    sensitive << ( tmp_35_reg_1152 );

    SC_METHOD(thread_tmp_26_fu_826_p3);
    sensitive << ( tmp_33_reg_1105 );
    sensitive << ( tmp_24_fu_819_p1 );
    sensitive << ( tmp_25_fu_823_p1 );

    SC_METHOD(thread_tmp_27_fu_861_p1);
    sensitive << ( tmp_37_fu_851_p4 );

    SC_METHOD(thread_tmp_28_fu_865_p1);
    sensitive << ( tmp_38_reg_1162 );

    SC_METHOD(thread_tmp_29_fu_868_p3);
    sensitive << ( tmp_36_reg_1116 );
    sensitive << ( tmp_27_fu_861_p1 );
    sensitive << ( tmp_28_fu_865_p1 );

    SC_METHOD(thread_tmp_2_fu_527_p1);
    sensitive << ( i_reg_384 );

    SC_METHOD(thread_tmp_31_fu_767_p4);
    sensitive << ( neg_mul1_fu_762_p2 );

    SC_METHOD(thread_tmp_34_fu_809_p4);
    sensitive << ( neg_mul2_fu_804_p2 );

    SC_METHOD(thread_tmp_37_fu_851_p4);
    sensitive << ( neg_mul_fu_846_p2 );

    SC_METHOD(thread_tmp_3_mid2_v_v_fu_610_p3);
    sensitive << ( j_phi_fu_446_p4 );
    sensitive << ( tmp_9_fu_590_p2 );
    sensitive << ( j_s_fu_604_p2 );

    SC_METHOD(thread_tmp_4_fu_532_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_1_reg_396 );

    SC_METHOD(thread_tmp_5_mid2_fu_621_p1);
    sensitive << ( tmp_3_mid2_v_v_reg_1017 );

    SC_METHOD(thread_tmp_6_fu_544_p1);
    sensitive << ( i_1_reg_396 );

    SC_METHOD(thread_tmp_7_fu_662_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_5_reg_464 );

    SC_METHOD(thread_tmp_8_fu_549_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i_2_reg_408 );

    SC_METHOD(thread_tmp_9_fu_590_p2);
    sensitive << ( exitcond_flatten_fu_578_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_4_phi_fu_457_p4 );

    SC_METHOD(thread_tmp_fu_515_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_384 );

    SC_METHOD(thread_tmp_last_V_fu_939_p2);
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( mat_out_V_keep_V_1_ack_in );
    sensitive << ( mat_out_V_strb_V_1_ack_in );
    sensitive << ( mat_out_V_user_V_1_ack_in );
    sensitive << ( mat_out_V_last_V_1_ack_in );
    sensitive << ( mat_out_V_id_V_1_ack_in );
    sensitive << ( mat_out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_922_p2 );
    sensitive << ( i6_reg_497 );

    SC_METHOD(thread_tmp_s_fu_561_p1);
    sensitive << ( i_2_reg_408 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( mat_in_V_data_V_0_vld_out );
    sensitive << ( mat_out_V_data_V_1_ack_in );
    sensitive << ( mat_out_V_keep_V_1_ack_in );
    sensitive << ( mat_out_V_strb_V_1_ack_in );
    sensitive << ( mat_out_V_user_V_1_ack_in );
    sensitive << ( mat_out_V_last_V_1_ack_in );
    sensitive << ( mat_out_V_id_V_1_ack_in );
    sensitive << ( mat_out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_8_fu_549_p2 );
    sensitive << ( tmp_1_fu_566_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_flatten_fu_578_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_7_fu_662_p2 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond2_fu_888_p2 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( exitcond3_fu_905_p2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( exitcond_fu_922_p2 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_block_pp0_stage1_flag00011011 );
    sensitive << ( tmp_fu_515_p2 );
    sensitive << ( tmp_4_fu_532_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    mat_in_V_data_V_0_sel_rd = SC_LOGIC_0;
    mat_in_V_data_V_0_sel_wr = SC_LOGIC_0;
    mat_in_V_data_V_0_state = "00";
    mat_in_V_dest_V_0_state = "00";
    mat_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    mat_out_V_data_V_1_state = "00";
    mat_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_keep_V_1_state = "00";
    mat_out_V_strb_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_strb_V_1_state = "00";
    mat_out_V_user_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_user_V_1_state = "00";
    mat_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    mat_out_V_last_V_1_state = "00";
    mat_out_V_id_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_id_V_1_state = "00";
    mat_out_V_dest_V_1_sel_rd = SC_LOGIC_0;
    mat_out_V_dest_V_1_state = "00";
    ap_CS_fsm = "00000000000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrixAvg_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, mat_in_TDATA, "(port)mat_in_TDATA");
    sc_trace(mVcdFile, mat_in_TVALID, "(port)mat_in_TVALID");
    sc_trace(mVcdFile, mat_in_TREADY, "(port)mat_in_TREADY");
    sc_trace(mVcdFile, mat_in_TKEEP, "(port)mat_in_TKEEP");
    sc_trace(mVcdFile, mat_in_TSTRB, "(port)mat_in_TSTRB");
    sc_trace(mVcdFile, mat_in_TUSER, "(port)mat_in_TUSER");
    sc_trace(mVcdFile, mat_in_TLAST, "(port)mat_in_TLAST");
    sc_trace(mVcdFile, mat_in_TID, "(port)mat_in_TID");
    sc_trace(mVcdFile, mat_in_TDEST, "(port)mat_in_TDEST");
    sc_trace(mVcdFile, mat_out_TDATA, "(port)mat_out_TDATA");
    sc_trace(mVcdFile, mat_out_TVALID, "(port)mat_out_TVALID");
    sc_trace(mVcdFile, mat_out_TREADY, "(port)mat_out_TREADY");
    sc_trace(mVcdFile, mat_out_TKEEP, "(port)mat_out_TKEEP");
    sc_trace(mVcdFile, mat_out_TSTRB, "(port)mat_out_TSTRB");
    sc_trace(mVcdFile, mat_out_TUSER, "(port)mat_out_TUSER");
    sc_trace(mVcdFile, mat_out_TLAST, "(port)mat_out_TLAST");
    sc_trace(mVcdFile, mat_out_TID, "(port)mat_out_TID");
    sc_trace(mVcdFile, mat_out_TDEST, "(port)mat_out_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, mat_in_V_data_V_0_data_out, "mat_in_V_data_V_0_data_out");
    sc_trace(mVcdFile, mat_in_V_data_V_0_vld_in, "mat_in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, mat_in_V_data_V_0_vld_out, "mat_in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, mat_in_V_data_V_0_ack_in, "mat_in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, mat_in_V_data_V_0_ack_out, "mat_in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, mat_in_V_data_V_0_payload_A, "mat_in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, mat_in_V_data_V_0_payload_B, "mat_in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, mat_in_V_data_V_0_sel_rd, "mat_in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, mat_in_V_data_V_0_sel_wr, "mat_in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, mat_in_V_data_V_0_sel, "mat_in_V_data_V_0_sel");
    sc_trace(mVcdFile, mat_in_V_data_V_0_load_A, "mat_in_V_data_V_0_load_A");
    sc_trace(mVcdFile, mat_in_V_data_V_0_load_B, "mat_in_V_data_V_0_load_B");
    sc_trace(mVcdFile, mat_in_V_data_V_0_state, "mat_in_V_data_V_0_state");
    sc_trace(mVcdFile, mat_in_V_data_V_0_state_cmp_full, "mat_in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, mat_in_V_dest_V_0_vld_in, "mat_in_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, mat_in_V_dest_V_0_ack_out, "mat_in_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, mat_in_V_dest_V_0_state, "mat_in_V_dest_V_0_state");
    sc_trace(mVcdFile, mat_out_V_data_V_1_data_in, "mat_out_V_data_V_1_data_in");
    sc_trace(mVcdFile, mat_out_V_data_V_1_data_out, "mat_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_data_V_1_vld_in, "mat_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_data_V_1_vld_out, "mat_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_data_V_1_ack_in, "mat_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_data_V_1_ack_out, "mat_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_data_V_1_payload_A, "mat_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, mat_out_V_data_V_1_payload_B, "mat_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, mat_out_V_data_V_1_sel_rd, "mat_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_data_V_1_sel_wr, "mat_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, mat_out_V_data_V_1_sel, "mat_out_V_data_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_data_V_1_load_A, "mat_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, mat_out_V_data_V_1_load_B, "mat_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, mat_out_V_data_V_1_state, "mat_out_V_data_V_1_state");
    sc_trace(mVcdFile, mat_out_V_data_V_1_state_cmp_full, "mat_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_data_out, "mat_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_vld_in, "mat_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_vld_out, "mat_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_ack_in, "mat_out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_ack_out, "mat_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_sel_rd, "mat_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_sel, "mat_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_keep_V_1_state, "mat_out_V_keep_V_1_state");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_data_out, "mat_out_V_strb_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_vld_in, "mat_out_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_vld_out, "mat_out_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_ack_in, "mat_out_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_ack_out, "mat_out_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_sel_rd, "mat_out_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_sel, "mat_out_V_strb_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_strb_V_1_state, "mat_out_V_strb_V_1_state");
    sc_trace(mVcdFile, mat_out_V_user_V_1_data_out, "mat_out_V_user_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_user_V_1_vld_in, "mat_out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_user_V_1_vld_out, "mat_out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_user_V_1_ack_in, "mat_out_V_user_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_user_V_1_ack_out, "mat_out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_user_V_1_sel_rd, "mat_out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_user_V_1_sel, "mat_out_V_user_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_user_V_1_state, "mat_out_V_user_V_1_state");
    sc_trace(mVcdFile, mat_out_V_last_V_1_data_in, "mat_out_V_last_V_1_data_in");
    sc_trace(mVcdFile, mat_out_V_last_V_1_data_out, "mat_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_last_V_1_vld_in, "mat_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_last_V_1_vld_out, "mat_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_last_V_1_ack_in, "mat_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_last_V_1_ack_out, "mat_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_last_V_1_payload_A, "mat_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, mat_out_V_last_V_1_payload_B, "mat_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, mat_out_V_last_V_1_sel_rd, "mat_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_last_V_1_sel_wr, "mat_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, mat_out_V_last_V_1_sel, "mat_out_V_last_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_last_V_1_load_A, "mat_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, mat_out_V_last_V_1_load_B, "mat_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, mat_out_V_last_V_1_state, "mat_out_V_last_V_1_state");
    sc_trace(mVcdFile, mat_out_V_last_V_1_state_cmp_full, "mat_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, mat_out_V_id_V_1_data_out, "mat_out_V_id_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_id_V_1_vld_in, "mat_out_V_id_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_id_V_1_vld_out, "mat_out_V_id_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_id_V_1_ack_in, "mat_out_V_id_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_id_V_1_ack_out, "mat_out_V_id_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_id_V_1_sel_rd, "mat_out_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_id_V_1_sel, "mat_out_V_id_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_id_V_1_state, "mat_out_V_id_V_1_state");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_data_out, "mat_out_V_dest_V_1_data_out");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_vld_in, "mat_out_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_vld_out, "mat_out_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_ack_in, "mat_out_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_ack_out, "mat_out_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_sel_rd, "mat_out_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_sel, "mat_out_V_dest_V_1_sel");
    sc_trace(mVcdFile, mat_out_V_dest_V_1_state, "mat_out_V_dest_V_1_state");
    sc_trace(mVcdFile, mat_in_TDATA_blk_n, "mat_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, mat_out_TDATA_blk_n, "mat_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, indvar_flatten_reg_431, "indvar_flatten_reg_431");
    sc_trace(mVcdFile, j_reg_442, "j_reg_442");
    sc_trace(mVcdFile, i_4_reg_453, "i_4_reg_453");
    sc_trace(mVcdFile, i_6_fu_521_p2, "i_6_fu_521_p2");
    sc_trace(mVcdFile, i_6_reg_957, "i_6_reg_957");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_7_fu_538_p2, "i_7_fu_538_p2");
    sc_trace(mVcdFile, i_7_reg_965, "i_7_reg_965");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_8_fu_555_p2, "i_8_fu_555_p2");
    sc_trace(mVcdFile, i_8_reg_973, "i_8_reg_973");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_8_fu_549_p2, "tmp_8_fu_549_p2");
    sc_trace(mVcdFile, tmp_1_fu_566_p2, "tmp_1_fu_566_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_9_fu_572_p2, "i_9_fu_572_p2");
    sc_trace(mVcdFile, exitcond_flatten_fu_578_p2, "exitcond_flatten_fu_578_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_1002, "exitcond_flatten_reg_1002");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_584_p2, "indvar_flatten_next_fu_584_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_1006, "indvar_flatten_next_reg_1006");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, i_4_mid2_fu_596_p3, "i_4_mid2_fu_596_p3");
    sc_trace(mVcdFile, i_4_mid2_reg_1011, "i_4_mid2_reg_1011");
    sc_trace(mVcdFile, tmp_3_mid2_v_v_fu_610_p3, "tmp_3_mid2_v_v_fu_610_p3");
    sc_trace(mVcdFile, tmp_3_mid2_v_v_reg_1017, "tmp_3_mid2_v_v_reg_1017");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage1_iter0, "ap_block_state10_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00011001, "ap_block_pp0_stage1_flag00011001");
    sc_trace(mVcdFile, sum_red_addr_1_reg_1029, "sum_red_addr_1_reg_1029");
    sc_trace(mVcdFile, sum_green_addr_1_reg_1039, "sum_green_addr_1_reg_1039");
    sc_trace(mVcdFile, sum_blue_addr_1_reg_1049, "sum_blue_addr_1_reg_1049");
    sc_trace(mVcdFile, i_10_fu_636_p2, "i_10_fu_636_p2");
    sc_trace(mVcdFile, i_10_reg_1054, "i_10_reg_1054");
    sc_trace(mVcdFile, i_11_fu_668_p2, "i_11_fu_668_p2");
    sc_trace(mVcdFile, i_11_reg_1062, "i_11_reg_1062");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_10_fu_674_p1, "tmp_10_fu_674_p1");
    sc_trace(mVcdFile, tmp_10_reg_1067, "tmp_10_reg_1067");
    sc_trace(mVcdFile, tmp_7_fu_662_p2, "tmp_7_fu_662_p2");
    sc_trace(mVcdFile, sum_red_q0, "sum_red_q0");
    sc_trace(mVcdFile, sum_red_load_reg_1089, "sum_red_load_reg_1089");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_30_reg_1094, "tmp_30_reg_1094");
    sc_trace(mVcdFile, sum_green_q0, "sum_green_q0");
    sc_trace(mVcdFile, sum_green_load_reg_1100, "sum_green_load_reg_1100");
    sc_trace(mVcdFile, tmp_33_reg_1105, "tmp_33_reg_1105");
    sc_trace(mVcdFile, sum_blue_q0, "sum_blue_q0");
    sc_trace(mVcdFile, sum_blue_load_reg_1111, "sum_blue_load_reg_1111");
    sc_trace(mVcdFile, tmp_36_reg_1116, "tmp_36_reg_1116");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_708_p2, "grp_fu_708_p2");
    sc_trace(mVcdFile, mul1_reg_1137, "mul1_reg_1137");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_32_reg_1142, "tmp_32_reg_1142");
    sc_trace(mVcdFile, grp_fu_717_p2, "grp_fu_717_p2");
    sc_trace(mVcdFile, mul9_reg_1147, "mul9_reg_1147");
    sc_trace(mVcdFile, tmp_35_reg_1152, "tmp_35_reg_1152");
    sc_trace(mVcdFile, grp_fu_726_p2, "grp_fu_726_p2");
    sc_trace(mVcdFile, mul_reg_1157, "mul_reg_1157");
    sc_trace(mVcdFile, tmp_38_reg_1162, "tmp_38_reg_1162");
    sc_trace(mVcdFile, tmp_11_fu_797_p3, "tmp_11_fu_797_p3");
    sc_trace(mVcdFile, tmp_11_reg_1167, "tmp_11_reg_1167");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_12_fu_839_p3, "tmp_12_fu_839_p3");
    sc_trace(mVcdFile, tmp_12_reg_1172, "tmp_12_reg_1172");
    sc_trace(mVcdFile, tmp_13_fu_881_p3, "tmp_13_fu_881_p3");
    sc_trace(mVcdFile, tmp_13_reg_1177, "tmp_13_reg_1177");
    sc_trace(mVcdFile, i_12_fu_894_p2, "i_12_fu_894_p2");
    sc_trace(mVcdFile, i_12_reg_1185, "i_12_reg_1185");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, exitcond2_fu_888_p2, "exitcond2_fu_888_p2");
    sc_trace(mVcdFile, cell_avg_red_q0, "cell_avg_red_q0");
    sc_trace(mVcdFile, i_13_fu_911_p2, "i_13_fu_911_p2");
    sc_trace(mVcdFile, i_13_reg_1203, "i_13_reg_1203");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, exitcond3_fu_905_p2, "exitcond3_fu_905_p2");
    sc_trace(mVcdFile, cell_avg_green_q0, "cell_avg_green_q0");
    sc_trace(mVcdFile, i_14_fu_928_p2, "i_14_fu_928_p2");
    sc_trace(mVcdFile, i_14_reg_1221, "i_14_reg_1221");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_block_state25, "ap_block_state25");
    sc_trace(mVcdFile, exitcond_fu_922_p2, "exitcond_fu_922_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_939_p2, "tmp_last_V_fu_939_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_1231, "tmp_last_V_reg_1231");
    sc_trace(mVcdFile, cell_avg_blue_q0, "cell_avg_blue_q0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00011011, "ap_block_pp0_stage1_flag00011011");
    sc_trace(mVcdFile, red_address0, "red_address0");
    sc_trace(mVcdFile, red_ce0, "red_ce0");
    sc_trace(mVcdFile, red_we0, "red_we0");
    sc_trace(mVcdFile, red_q0, "red_q0");
    sc_trace(mVcdFile, green_address0, "green_address0");
    sc_trace(mVcdFile, green_ce0, "green_ce0");
    sc_trace(mVcdFile, green_we0, "green_we0");
    sc_trace(mVcdFile, green_q0, "green_q0");
    sc_trace(mVcdFile, blue_address0, "blue_address0");
    sc_trace(mVcdFile, blue_ce0, "blue_ce0");
    sc_trace(mVcdFile, blue_we0, "blue_we0");
    sc_trace(mVcdFile, blue_q0, "blue_q0");
    sc_trace(mVcdFile, cell_avg_red_address0, "cell_avg_red_address0");
    sc_trace(mVcdFile, cell_avg_red_ce0, "cell_avg_red_ce0");
    sc_trace(mVcdFile, cell_avg_red_we0, "cell_avg_red_we0");
    sc_trace(mVcdFile, cell_avg_blue_address0, "cell_avg_blue_address0");
    sc_trace(mVcdFile, cell_avg_blue_ce0, "cell_avg_blue_ce0");
    sc_trace(mVcdFile, cell_avg_blue_we0, "cell_avg_blue_we0");
    sc_trace(mVcdFile, cell_avg_green_address0, "cell_avg_green_address0");
    sc_trace(mVcdFile, cell_avg_green_ce0, "cell_avg_green_ce0");
    sc_trace(mVcdFile, cell_avg_green_we0, "cell_avg_green_we0");
    sc_trace(mVcdFile, sum_red_address0, "sum_red_address0");
    sc_trace(mVcdFile, sum_red_ce0, "sum_red_ce0");
    sc_trace(mVcdFile, sum_red_we0, "sum_red_we0");
    sc_trace(mVcdFile, sum_red_d0, "sum_red_d0");
    sc_trace(mVcdFile, sum_blue_address0, "sum_blue_address0");
    sc_trace(mVcdFile, sum_blue_ce0, "sum_blue_ce0");
    sc_trace(mVcdFile, sum_blue_we0, "sum_blue_we0");
    sc_trace(mVcdFile, sum_blue_d0, "sum_blue_d0");
    sc_trace(mVcdFile, sum_green_address0, "sum_green_address0");
    sc_trace(mVcdFile, sum_green_ce0, "sum_green_ce0");
    sc_trace(mVcdFile, sum_green_we0, "sum_green_we0");
    sc_trace(mVcdFile, sum_green_d0, "sum_green_d0");
    sc_trace(mVcdFile, i_reg_384, "i_reg_384");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_reg_396, "i_1_reg_396");
    sc_trace(mVcdFile, tmp_fu_515_p2, "tmp_fu_515_p2");
    sc_trace(mVcdFile, i_2_reg_408, "i_2_reg_408");
    sc_trace(mVcdFile, tmp_4_fu_532_p2, "tmp_4_fu_532_p2");
    sc_trace(mVcdFile, i_3_reg_420, "i_3_reg_420");
    sc_trace(mVcdFile, indvar_flatten_phi_fu_435_p4, "indvar_flatten_phi_fu_435_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, j_phi_fu_446_p4, "j_phi_fu_446_p4");
    sc_trace(mVcdFile, i_4_phi_fu_457_p4, "i_4_phi_fu_457_p4");
    sc_trace(mVcdFile, i_5_reg_464, "i_5_reg_464");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i3_reg_475, "i3_reg_475");
    sc_trace(mVcdFile, i4_reg_486, "i4_reg_486");
    sc_trace(mVcdFile, i6_reg_497, "i6_reg_497");
    sc_trace(mVcdFile, tmp_2_fu_527_p1, "tmp_2_fu_527_p1");
    sc_trace(mVcdFile, tmp_6_fu_544_p1, "tmp_6_fu_544_p1");
    sc_trace(mVcdFile, tmp_s_fu_561_p1, "tmp_s_fu_561_p1");
    sc_trace(mVcdFile, tmp_14_fu_630_p1, "tmp_14_fu_630_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00000000, "ap_block_pp0_stage1_flag00000000");
    sc_trace(mVcdFile, tmp_5_mid2_fu_621_p1, "tmp_5_mid2_fu_621_p1");
    sc_trace(mVcdFile, tmp_19_fu_900_p1, "tmp_19_fu_900_p1");
    sc_trace(mVcdFile, tmp_20_fu_917_p1, "tmp_20_fu_917_p1");
    sc_trace(mVcdFile, tmp_21_fu_934_p1, "tmp_21_fu_934_p1");
    sc_trace(mVcdFile, tmp_15_fu_641_p2, "tmp_15_fu_641_p2");
    sc_trace(mVcdFile, tmp_17_fu_655_p2, "tmp_17_fu_655_p2");
    sc_trace(mVcdFile, tmp_16_fu_648_p2, "tmp_16_fu_648_p2");
    sc_trace(mVcdFile, tmp_9_fu_590_p2, "tmp_9_fu_590_p2");
    sc_trace(mVcdFile, j_s_fu_604_p2, "j_s_fu_604_p2");
    sc_trace(mVcdFile, grp_fu_945_p3, "grp_fu_945_p3");
    sc_trace(mVcdFile, grp_fu_708_p1, "grp_fu_708_p1");
    sc_trace(mVcdFile, grp_fu_717_p1, "grp_fu_717_p1");
    sc_trace(mVcdFile, grp_fu_726_p1, "grp_fu_726_p1");
    sc_trace(mVcdFile, neg_mul1_fu_762_p2, "neg_mul1_fu_762_p2");
    sc_trace(mVcdFile, tmp_31_fu_767_p4, "tmp_31_fu_767_p4");
    sc_trace(mVcdFile, tmp_18_fu_777_p1, "tmp_18_fu_777_p1");
    sc_trace(mVcdFile, tmp_22_fu_781_p1, "tmp_22_fu_781_p1");
    sc_trace(mVcdFile, tmp_23_fu_784_p3, "tmp_23_fu_784_p3");
    sc_trace(mVcdFile, neg_ti1_fu_791_p2, "neg_ti1_fu_791_p2");
    sc_trace(mVcdFile, neg_mul2_fu_804_p2, "neg_mul2_fu_804_p2");
    sc_trace(mVcdFile, tmp_34_fu_809_p4, "tmp_34_fu_809_p4");
    sc_trace(mVcdFile, tmp_24_fu_819_p1, "tmp_24_fu_819_p1");
    sc_trace(mVcdFile, tmp_25_fu_823_p1, "tmp_25_fu_823_p1");
    sc_trace(mVcdFile, tmp_26_fu_826_p3, "tmp_26_fu_826_p3");
    sc_trace(mVcdFile, neg_ti2_fu_833_p2, "neg_ti2_fu_833_p2");
    sc_trace(mVcdFile, neg_mul_fu_846_p2, "neg_mul_fu_846_p2");
    sc_trace(mVcdFile, tmp_37_fu_851_p4, "tmp_37_fu_851_p4");
    sc_trace(mVcdFile, tmp_27_fu_861_p1, "tmp_27_fu_861_p1");
    sc_trace(mVcdFile, tmp_28_fu_865_p1, "tmp_28_fu_865_p1");
    sc_trace(mVcdFile, tmp_29_fu_868_p3, "tmp_29_fu_868_p3");
    sc_trace(mVcdFile, neg_ti_fu_875_p2, "neg_ti_fu_875_p2");
    sc_trace(mVcdFile, grp_fu_945_p0, "grp_fu_945_p0");
    sc_trace(mVcdFile, grp_fu_945_p1, "grp_fu_945_p1");
    sc_trace(mVcdFile, grp_fu_945_p2, "grp_fu_945_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_945_p00, "grp_fu_945_p00");
    sc_trace(mVcdFile, grp_fu_945_p20, "grp_fu_945_p20");
#endif

    }
    mHdltvinHandle.open("matrixAvg.hdltvin.dat");
    mHdltvoutHandle.open("matrixAvg.hdltvout.dat");
}

matrixAvg::~matrixAvg() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete red_U;
    delete green_U;
    delete blue_U;
    delete cell_avg_red_U;
    delete cell_avg_blue_U;
    delete cell_avg_green_U;
    delete sum_red_U;
    delete sum_blue_U;
    delete sum_green_U;
    delete matrixAvg_mul_32seOg_U1;
    delete matrixAvg_mul_32seOg_U2;
    delete matrixAvg_mul_32seOg_U3;
    delete matrixAvg_mac_mulfYi_U4;
}

void matrixAvg::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrixAvg::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
               esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) || 
              (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
               esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011011.read(), ap_const_boolean_0))))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011011.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_662_p2.read()))) {
        i3_reg_475 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
                esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        i3_reg_475 = i_12_reg_1185.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_888_p2.read()))) {
        i4_reg_486 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        i4_reg_486 = i_13_reg_1203.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_905_p2.read()))) {
        i6_reg_497 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        i6_reg_497 = i_14_reg_1221.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_515_p2.read()))) {
        i_1_reg_396 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        i_1_reg_396 = i_7_reg_965.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_532_p2.read()))) {
        i_2_reg_408 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        i_2_reg_408 = i_8_reg_973.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_549_p2.read()))) {
        i_3_reg_420 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_566_p2.read()))) {
        i_3_reg_420 = i_9_fu_572_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
        i_4_reg_453 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_4_reg_453 = i_10_reg_1054.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_5_reg_464 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i_5_reg_464 = i_11_reg_1062.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        i_reg_384 = i_6_reg_957.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_reg_384 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
        indvar_flatten_reg_431 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        indvar_flatten_reg_431 = indvar_flatten_next_reg_1006.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
        j_reg_442 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        j_reg_442 = tmp_3_mid2_v_v_reg_1017.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_vld_out.read()))) {
            mat_in_V_data_V_0_sel_rd =  (sc_logic) (~mat_in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_ack_in.read()))) {
            mat_in_V_data_V_0_sel_wr =  (sc_logic) (~mat_in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            mat_in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            mat_in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(mat_in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_ack_out.read()))))) {
            mat_in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            mat_in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_in_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_in_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_in_V_dest_V_0_state.read())))) {
            mat_in_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_in_V_dest_V_0_state.read())))) {
            mat_in_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_in_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_dest_V_0_ack_out.read()))))) {
            mat_in_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            mat_in_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_vld_out.read()))) {
            mat_out_V_data_V_1_sel_rd =  (sc_logic) (~mat_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_ack_in.read()))) {
            mat_out_V_data_V_1_sel_wr =  (sc_logic) (~mat_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_data_V_1_state.read())))) {
            mat_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_data_V_1_state.read())))) {
            mat_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_ack_out.read()))))) {
            mat_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_vld_out.read()))) {
            mat_out_V_dest_V_1_sel_rd =  (sc_logic) (~mat_out_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_dest_V_1_state.read())))) {
            mat_out_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_dest_V_1_state.read())))) {
            mat_out_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_dest_V_1_ack_out.read()))))) {
            mat_out_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_vld_out.read()))) {
            mat_out_V_id_V_1_sel_rd =  (sc_logic) (~mat_out_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_id_V_1_state.read())))) {
            mat_out_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_id_V_1_state.read())))) {
            mat_out_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_id_V_1_ack_out.read()))))) {
            mat_out_V_id_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_vld_out.read()))) {
            mat_out_V_keep_V_1_sel_rd =  (sc_logic) (~mat_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_keep_V_1_state.read())))) {
            mat_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_keep_V_1_state.read())))) {
            mat_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_keep_V_1_ack_out.read()))))) {
            mat_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_vld_out.read()))) {
            mat_out_V_last_V_1_sel_rd =  (sc_logic) (~mat_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_ack_in.read()))) {
            mat_out_V_last_V_1_sel_wr =  (sc_logic) (~mat_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_last_V_1_state.read())))) {
            mat_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_last_V_1_state.read())))) {
            mat_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_ack_out.read()))))) {
            mat_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_vld_out.read()))) {
            mat_out_V_strb_V_1_sel_rd =  (sc_logic) (~mat_out_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_strb_V_1_state.read())))) {
            mat_out_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_strb_V_1_state.read())))) {
            mat_out_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_strb_V_1_ack_out.read()))))) {
            mat_out_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_vld_out.read()))) {
            mat_out_V_user_V_1_sel_rd =  (sc_logic) (~mat_out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mat_out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_user_V_1_state.read())))) {
            mat_out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_user_V_1_state.read())))) {
            mat_out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mat_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mat_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mat_out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_user_V_1_ack_out.read()))))) {
            mat_out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            mat_out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_1002 = exitcond_flatten_fu_578_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()))) {
        i_10_reg_1054 = i_10_fu_636_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_11_reg_1062 = i_11_fu_668_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_12_reg_1185 = i_12_fu_894_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_13_reg_1203 = i_13_fu_911_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read())))) {
        i_14_reg_1221 = i_14_fu_928_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_578_p2.read()))) {
        i_4_mid2_reg_1011 = i_4_mid2_fu_596_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_6_reg_957 = i_6_fu_521_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_7_reg_965 = i_7_fu_538_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_8_reg_973 = i_8_fu_555_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        indvar_flatten_next_reg_1006 = indvar_flatten_next_fu_584_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_load_A.read())) {
        mat_in_V_data_V_0_payload_A = mat_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_load_B.read())) {
        mat_in_V_data_V_0_payload_B = mat_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_load_A.read())) {
        mat_out_V_data_V_1_payload_A = mat_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_load_B.read())) {
        mat_out_V_data_V_1_payload_B = mat_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_load_A.read())) {
        mat_out_V_last_V_1_payload_A = mat_out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_load_B.read())) {
        mat_out_V_last_V_1_payload_B = mat_out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        mul1_reg_1137 = grp_fu_708_p2.read();
        mul9_reg_1147 = grp_fu_717_p2.read();
        mul_reg_1157 = grp_fu_726_p2.read();
        tmp_32_reg_1142 = grp_fu_708_p2.read().range(64, 39);
        tmp_35_reg_1152 = grp_fu_717_p2.read().range(64, 39);
        tmp_38_reg_1162 = grp_fu_726_p2.read().range(64, 39);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()))) {
        sum_blue_addr_1_reg_1049 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
        sum_green_addr_1_reg_1039 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
        sum_red_addr_1_reg_1029 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sum_blue_load_reg_1111 = sum_blue_q0.read();
        sum_green_load_reg_1100 = sum_green_q0.read();
        sum_red_load_reg_1089 = sum_red_q0.read();
        tmp_30_reg_1094 = sum_red_q0.read().range(31, 31);
        tmp_33_reg_1105 = sum_green_q0.read().range(31, 31);
        tmp_36_reg_1116 = sum_blue_q0.read().range(31, 31);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_662_p2.read()))) {
        tmp_10_reg_1067 = tmp_10_fu_674_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        tmp_11_reg_1167 = tmp_11_fu_797_p3.read();
        tmp_12_reg_1172 = tmp_12_fu_839_p3.read();
        tmp_13_reg_1177 = tmp_13_fu_881_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_578_p2.read()))) {
        tmp_3_mid2_v_v_reg_1017 = tmp_3_mid2_v_v_fu_610_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_922_p2.read()))) {
        tmp_last_V_reg_1231 = tmp_last_V_fu_939_p2.read();
    }
}

void matrixAvg::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void matrixAvg::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[9];
}

void matrixAvg::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrixAvg::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void matrixAvg::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[11];
}

void matrixAvg::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[12];
}

void matrixAvg::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[13];
}

void matrixAvg::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[14];
}

void matrixAvg::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[15];
}

void matrixAvg::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[16];
}

void matrixAvg::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[17];
}

void matrixAvg::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrixAvg::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[18];
}

void matrixAvg::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[19];
}

void matrixAvg::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[20];
}

void matrixAvg::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[21];
}

void matrixAvg::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[22];
}

void matrixAvg::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[23];
}

void matrixAvg::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[24];
}

void matrixAvg::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[25];
}

void matrixAvg::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrixAvg::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrixAvg::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrixAvg::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void matrixAvg::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void matrixAvg::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void matrixAvg::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_pp0_stage1_flag00000000() {
    ap_block_pp0_stage1_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_pp0_stage1_flag00011001() {
    ap_block_pp0_stage1_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_pp0_stage1_flag00011011() {
    ap_block_pp0_stage1_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_state10_pp0_stage1_iter0() {
    ap_block_state10_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_block_state25() {
    ap_block_state25 = (esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read()));
}

void matrixAvg::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrixAvg::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_578_p2.read())) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void matrixAvg::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrixAvg::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void matrixAvg::thread_blue_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        blue_address0 =  (sc_lv<10>) (tmp_14_fu_630_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        blue_address0 =  (sc_lv<10>) (tmp_s_fu_561_p1.read());
    } else {
        blue_address0 = "XXXXXXXXXX";
    }
}

void matrixAvg::thread_blue_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        blue_ce0 = ap_const_logic_1;
    } else {
        blue_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_blue_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        blue_we0 = ap_const_logic_1;
    } else {
        blue_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_blue_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        cell_avg_blue_address0 =  (sc_lv<4>) (tmp_21_fu_934_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_blue_address0 =  (sc_lv<4>) (tmp_10_reg_1067.read());
    } else {
        cell_avg_blue_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_cell_avg_blue_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        cell_avg_blue_ce0 = ap_const_logic_1;
    } else {
        cell_avg_blue_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_blue_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_blue_we0 = ap_const_logic_1;
    } else {
        cell_avg_blue_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_green_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        cell_avg_green_address0 =  (sc_lv<4>) (tmp_20_fu_917_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_green_address0 =  (sc_lv<4>) (tmp_10_reg_1067.read());
    } else {
        cell_avg_green_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_cell_avg_green_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        cell_avg_green_ce0 = ap_const_logic_1;
    } else {
        cell_avg_green_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_green_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_green_we0 = ap_const_logic_1;
    } else {
        cell_avg_green_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_red_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        cell_avg_red_address0 =  (sc_lv<4>) (tmp_19_fu_900_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_red_address0 =  (sc_lv<4>) (tmp_10_reg_1067.read());
    } else {
        cell_avg_red_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_cell_avg_red_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        cell_avg_red_ce0 = ap_const_logic_1;
    } else {
        cell_avg_red_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_cell_avg_red_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        cell_avg_red_we0 = ap_const_logic_1;
    } else {
        cell_avg_red_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_exitcond2_fu_888_p2() {
    exitcond2_fu_888_p2 = (!i3_reg_475.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i3_reg_475.read() == ap_const_lv4_9);
}

void matrixAvg::thread_exitcond3_fu_905_p2() {
    exitcond3_fu_905_p2 = (!i4_reg_486.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_486.read() == ap_const_lv4_9);
}

void matrixAvg::thread_exitcond_flatten_fu_578_p2() {
    exitcond_flatten_fu_578_p2 = (!indvar_flatten_phi_fu_435_p4.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_phi_fu_435_p4.read() == ap_const_lv10_384);
}

void matrixAvg::thread_exitcond_fu_922_p2() {
    exitcond_fu_922_p2 = (!i6_reg_497.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i6_reg_497.read() == ap_const_lv4_9);
}

void matrixAvg::thread_green_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        green_address0 =  (sc_lv<10>) (tmp_14_fu_630_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        green_address0 =  (sc_lv<10>) (tmp_6_fu_544_p1.read());
    } else {
        green_address0 = "XXXXXXXXXX";
    }
}

void matrixAvg::thread_green_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        green_ce0 = ap_const_logic_1;
    } else {
        green_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_green_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        green_we0 = ap_const_logic_1;
    } else {
        green_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_grp_fu_708_p1() {
    grp_fu_708_p1 =  (sc_lv<34>) (ap_const_lv65_147AE147B);
}

void matrixAvg::thread_grp_fu_717_p1() {
    grp_fu_717_p1 =  (sc_lv<34>) (ap_const_lv65_147AE147B);
}

void matrixAvg::thread_grp_fu_726_p1() {
    grp_fu_726_p1 =  (sc_lv<34>) (ap_const_lv65_147AE147B);
}

void matrixAvg::thread_grp_fu_945_p0() {
    grp_fu_945_p0 =  (sc_lv<4>) (grp_fu_945_p00.read());
}

void matrixAvg::thread_grp_fu_945_p00() {
    grp_fu_945_p00 = esl_zext<10,4>(tmp_3_mid2_v_v_reg_1017.read());
}

void matrixAvg::thread_grp_fu_945_p1() {
    grp_fu_945_p1 =  (sc_lv<8>) (ap_const_lv10_64);
}

void matrixAvg::thread_grp_fu_945_p2() {
    grp_fu_945_p2 =  (sc_lv<7>) (grp_fu_945_p20.read());
}

void matrixAvg::thread_grp_fu_945_p20() {
    grp_fu_945_p20 = esl_zext<10,7>(i_4_mid2_reg_1011.read());
}

void matrixAvg::thread_i_10_fu_636_p2() {
    i_10_fu_636_p2 = (!i_4_mid2_reg_1011.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_4_mid2_reg_1011.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void matrixAvg::thread_i_11_fu_668_p2() {
    i_11_fu_668_p2 = (!i_5_reg_464.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_5_reg_464.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_i_12_fu_894_p2() {
    i_12_fu_894_p2 = (!i3_reg_475.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i3_reg_475.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_i_13_fu_911_p2() {
    i_13_fu_911_p2 = (!i4_reg_486.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i4_reg_486.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_i_14_fu_928_p2() {
    i_14_fu_928_p2 = (!i6_reg_497.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i6_reg_497.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_i_4_mid2_fu_596_p3() {
    i_4_mid2_fu_596_p3 = (!tmp_9_fu_590_p2.read()[0].is_01())? sc_lv<7>(): ((tmp_9_fu_590_p2.read()[0].to_bool())? ap_const_lv7_0: i_4_phi_fu_457_p4.read());
}

void matrixAvg::thread_i_4_phi_fu_457_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        i_4_phi_fu_457_p4 = i_10_reg_1054.read();
    } else {
        i_4_phi_fu_457_p4 = i_4_reg_453.read();
    }
}

void matrixAvg::thread_i_6_fu_521_p2() {
    i_6_fu_521_p2 = (!i_reg_384.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_384.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void matrixAvg::thread_i_7_fu_538_p2() {
    i_7_fu_538_p2 = (!i_1_reg_396.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_1_reg_396.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void matrixAvg::thread_i_8_fu_555_p2() {
    i_8_fu_555_p2 = (!i_2_reg_408.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_2_reg_408.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void matrixAvg::thread_i_9_fu_572_p2() {
    i_9_fu_572_p2 = (!i_3_reg_420.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_3_reg_420.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_indvar_flatten_next_fu_584_p2() {
    indvar_flatten_next_fu_584_p2 = (!indvar_flatten_phi_fu_435_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(indvar_flatten_phi_fu_435_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void matrixAvg::thread_indvar_flatten_phi_fu_435_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        indvar_flatten_phi_fu_435_p4 = indvar_flatten_next_reg_1006.read();
    } else {
        indvar_flatten_phi_fu_435_p4 = indvar_flatten_reg_431.read();
    }
}

void matrixAvg::thread_j_phi_fu_446_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        j_phi_fu_446_p4 = tmp_3_mid2_v_v_reg_1017.read();
    } else {
        j_phi_fu_446_p4 = j_reg_442.read();
    }
}

void matrixAvg::thread_j_s_fu_604_p2() {
    j_s_fu_604_p2 = (!j_phi_fu_446_p4.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_phi_fu_446_p4.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void matrixAvg::thread_mat_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        mat_in_TDATA_blk_n = mat_in_V_data_V_0_state.read()[0];
    } else {
        mat_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void matrixAvg::thread_mat_in_TREADY() {
    mat_in_TREADY = mat_in_V_dest_V_0_state.read()[1];
}

void matrixAvg::thread_mat_in_V_data_V_0_ack_in() {
    mat_in_V_data_V_0_ack_in = mat_in_V_data_V_0_state.read()[1];
}

void matrixAvg::thread_mat_in_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        mat_in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        mat_in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_in_V_data_V_0_sel.read())) {
        mat_in_V_data_V_0_data_out = mat_in_V_data_V_0_payload_B.read();
    } else {
        mat_in_V_data_V_0_data_out = mat_in_V_data_V_0_payload_A.read();
    }
}

void matrixAvg::thread_mat_in_V_data_V_0_load_A() {
    mat_in_V_data_V_0_load_A = (mat_in_V_data_V_0_state_cmp_full.read() & ~mat_in_V_data_V_0_sel_wr.read());
}

void matrixAvg::thread_mat_in_V_data_V_0_load_B() {
    mat_in_V_data_V_0_load_B = (mat_in_V_data_V_0_sel_wr.read() & mat_in_V_data_V_0_state_cmp_full.read());
}

void matrixAvg::thread_mat_in_V_data_V_0_sel() {
    mat_in_V_data_V_0_sel = mat_in_V_data_V_0_sel_rd.read();
}

void matrixAvg::thread_mat_in_V_data_V_0_state_cmp_full() {
    mat_in_V_data_V_0_state_cmp_full =  (sc_logic) ((!mat_in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mat_in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void matrixAvg::thread_mat_in_V_data_V_0_vld_in() {
    mat_in_V_data_V_0_vld_in = mat_in_TVALID.read();
}

void matrixAvg::thread_mat_in_V_data_V_0_vld_out() {
    mat_in_V_data_V_0_vld_out = mat_in_V_data_V_0_state.read()[0];
}

void matrixAvg::thread_mat_in_V_dest_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        mat_in_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        mat_in_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_in_V_dest_V_0_vld_in() {
    mat_in_V_dest_V_0_vld_in = mat_in_TVALID.read();
}

void matrixAvg::thread_mat_out_TDATA() {
    mat_out_TDATA = mat_out_V_data_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        mat_out_TDATA_blk_n = mat_out_V_data_V_1_state.read()[1];
    } else {
        mat_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void matrixAvg::thread_mat_out_TDEST() {
    mat_out_TDEST = mat_out_V_dest_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TID() {
    mat_out_TID = mat_out_V_id_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TKEEP() {
    mat_out_TKEEP = mat_out_V_keep_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TLAST() {
    mat_out_TLAST = mat_out_V_last_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TSTRB() {
    mat_out_TSTRB = mat_out_V_strb_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TUSER() {
    mat_out_TUSER = mat_out_V_user_V_1_data_out.read();
}

void matrixAvg::thread_mat_out_TVALID() {
    mat_out_TVALID = mat_out_V_dest_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_data_V_1_ack_in() {
    mat_out_V_data_V_1_ack_in = mat_out_V_data_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_data_V_1_ack_out() {
    mat_out_V_data_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_data_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        mat_out_V_data_V_1_data_in = cell_avg_blue_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        mat_out_V_data_V_1_data_in = cell_avg_green_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        mat_out_V_data_V_1_data_in = cell_avg_red_q0.read();
    } else {
        mat_out_V_data_V_1_data_in =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matrixAvg::thread_mat_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_data_V_1_sel.read())) {
        mat_out_V_data_V_1_data_out = mat_out_V_data_V_1_payload_B.read();
    } else {
        mat_out_V_data_V_1_data_out = mat_out_V_data_V_1_payload_A.read();
    }
}

void matrixAvg::thread_mat_out_V_data_V_1_load_A() {
    mat_out_V_data_V_1_load_A = (mat_out_V_data_V_1_state_cmp_full.read() & ~mat_out_V_data_V_1_sel_wr.read());
}

void matrixAvg::thread_mat_out_V_data_V_1_load_B() {
    mat_out_V_data_V_1_load_B = (mat_out_V_data_V_1_sel_wr.read() & mat_out_V_data_V_1_state_cmp_full.read());
}

void matrixAvg::thread_mat_out_V_data_V_1_sel() {
    mat_out_V_data_V_1_sel = mat_out_V_data_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_data_V_1_state_cmp_full() {
    mat_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!mat_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mat_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void matrixAvg::thread_mat_out_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_data_V_1_vld_out() {
    mat_out_V_data_V_1_vld_out = mat_out_V_data_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_dest_V_1_ack_in() {
    mat_out_V_dest_V_1_ack_in = mat_out_V_dest_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_dest_V_1_ack_out() {
    mat_out_V_dest_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_dest_V_1_data_out() {
    mat_out_V_dest_V_1_data_out = ap_const_lv1_0;
}

void matrixAvg::thread_mat_out_V_dest_V_1_sel() {
    mat_out_V_dest_V_1_sel = mat_out_V_dest_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_dest_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_dest_V_1_vld_out() {
    mat_out_V_dest_V_1_vld_out = mat_out_V_dest_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_id_V_1_ack_in() {
    mat_out_V_id_V_1_ack_in = mat_out_V_id_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_id_V_1_ack_out() {
    mat_out_V_id_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_id_V_1_data_out() {
    mat_out_V_id_V_1_data_out = ap_const_lv1_0;
}

void matrixAvg::thread_mat_out_V_id_V_1_sel() {
    mat_out_V_id_V_1_sel = mat_out_V_id_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_id_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_id_V_1_vld_out() {
    mat_out_V_id_V_1_vld_out = mat_out_V_id_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_keep_V_1_ack_in() {
    mat_out_V_keep_V_1_ack_in = mat_out_V_keep_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_keep_V_1_ack_out() {
    mat_out_V_keep_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_keep_V_1_data_out() {
    mat_out_V_keep_V_1_data_out = ap_const_lv4_F;
}

void matrixAvg::thread_mat_out_V_keep_V_1_sel() {
    mat_out_V_keep_V_1_sel = mat_out_V_keep_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_keep_V_1_vld_out() {
    mat_out_V_keep_V_1_vld_out = mat_out_V_keep_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_last_V_1_ack_in() {
    mat_out_V_last_V_1_ack_in = mat_out_V_last_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_last_V_1_ack_out() {
    mat_out_V_last_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_last_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        mat_out_V_last_V_1_data_in = tmp_last_V_reg_1231.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        mat_out_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        mat_out_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void matrixAvg::thread_mat_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mat_out_V_last_V_1_sel.read())) {
        mat_out_V_last_V_1_data_out = mat_out_V_last_V_1_payload_B.read();
    } else {
        mat_out_V_last_V_1_data_out = mat_out_V_last_V_1_payload_A.read();
    }
}

void matrixAvg::thread_mat_out_V_last_V_1_load_A() {
    mat_out_V_last_V_1_load_A = (mat_out_V_last_V_1_state_cmp_full.read() & ~mat_out_V_last_V_1_sel_wr.read());
}

void matrixAvg::thread_mat_out_V_last_V_1_load_B() {
    mat_out_V_last_V_1_load_B = (mat_out_V_last_V_1_sel_wr.read() & mat_out_V_last_V_1_state_cmp_full.read());
}

void matrixAvg::thread_mat_out_V_last_V_1_sel() {
    mat_out_V_last_V_1_sel = mat_out_V_last_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_last_V_1_state_cmp_full() {
    mat_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!mat_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mat_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void matrixAvg::thread_mat_out_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_last_V_1_vld_out() {
    mat_out_V_last_V_1_vld_out = mat_out_V_last_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_strb_V_1_ack_in() {
    mat_out_V_strb_V_1_ack_in = mat_out_V_strb_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_strb_V_1_ack_out() {
    mat_out_V_strb_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_strb_V_1_data_out() {
    mat_out_V_strb_V_1_data_out = ap_const_lv4_F;
}

void matrixAvg::thread_mat_out_V_strb_V_1_sel() {
    mat_out_V_strb_V_1_sel = mat_out_V_strb_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_strb_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_strb_V_1_vld_out() {
    mat_out_V_strb_V_1_vld_out = mat_out_V_strb_V_1_state.read()[0];
}

void matrixAvg::thread_mat_out_V_user_V_1_ack_in() {
    mat_out_V_user_V_1_ack_in = mat_out_V_user_V_1_state.read()[1];
}

void matrixAvg::thread_mat_out_V_user_V_1_ack_out() {
    mat_out_V_user_V_1_ack_out = mat_out_TREADY.read();
}

void matrixAvg::thread_mat_out_V_user_V_1_data_out() {
    mat_out_V_user_V_1_data_out = ap_const_lv1_0;
}

void matrixAvg::thread_mat_out_V_user_V_1_sel() {
    mat_out_V_user_V_1_sel = mat_out_V_user_V_1_sel_rd.read();
}

void matrixAvg::thread_mat_out_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1)))) {
        mat_out_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        mat_out_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void matrixAvg::thread_mat_out_V_user_V_1_vld_out() {
    mat_out_V_user_V_1_vld_out = mat_out_V_user_V_1_state.read()[0];
}

void matrixAvg::thread_neg_mul1_fu_762_p2() {
    neg_mul1_fu_762_p2 = (!ap_const_lv65_0.is_01() || !mul1_reg_1137.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul1_reg_1137.read()));
}

void matrixAvg::thread_neg_mul2_fu_804_p2() {
    neg_mul2_fu_804_p2 = (!ap_const_lv65_0.is_01() || !mul9_reg_1147.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul9_reg_1147.read()));
}

void matrixAvg::thread_neg_mul_fu_846_p2() {
    neg_mul_fu_846_p2 = (!ap_const_lv65_0.is_01() || !mul_reg_1157.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul_reg_1157.read()));
}

void matrixAvg::thread_neg_ti1_fu_791_p2() {
    neg_ti1_fu_791_p2 = (!ap_const_lv32_0.is_01() || !tmp_23_fu_784_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_23_fu_784_p3.read()));
}

void matrixAvg::thread_neg_ti2_fu_833_p2() {
    neg_ti2_fu_833_p2 = (!ap_const_lv32_0.is_01() || !tmp_26_fu_826_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_26_fu_826_p3.read()));
}

void matrixAvg::thread_neg_ti_fu_875_p2() {
    neg_ti_fu_875_p2 = (!ap_const_lv32_0.is_01() || !tmp_29_fu_868_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_29_fu_868_p3.read()));
}

void matrixAvg::thread_red_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        red_address0 =  (sc_lv<10>) (tmp_14_fu_630_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        red_address0 =  (sc_lv<10>) (tmp_2_fu_527_p1.read());
    } else {
        red_address0 = "XXXXXXXXXX";
    }
}

void matrixAvg::thread_red_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        red_ce0 = ap_const_logic_1;
    } else {
        red_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_red_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        red_we0 = ap_const_logic_1;
    } else {
        red_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_blue_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_blue_address0 =  (sc_lv<4>) (tmp_10_fu_674_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_blue_address0 = sum_blue_addr_1_reg_1049.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        sum_blue_address0 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_blue_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        sum_blue_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_sum_blue_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_blue_ce0 = ap_const_logic_1;
    } else {
        sum_blue_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_blue_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_blue_d0 = tmp_17_fu_655_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_blue_d0 = ap_const_lv32_0;
    } else {
        sum_blue_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matrixAvg::thread_sum_blue_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_566_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_blue_we0 = ap_const_logic_1;
    } else {
        sum_blue_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_green_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_green_address0 =  (sc_lv<4>) (tmp_10_fu_674_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_green_address0 = sum_green_addr_1_reg_1039.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        sum_green_address0 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_green_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        sum_green_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_sum_green_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_green_ce0 = ap_const_logic_1;
    } else {
        sum_green_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_green_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_green_d0 = tmp_16_fu_648_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_green_d0 = ap_const_lv32_0;
    } else {
        sum_green_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matrixAvg::thread_sum_green_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_566_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_green_we0 = ap_const_logic_1;
    } else {
        sum_green_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_red_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_red_address0 =  (sc_lv<4>) (tmp_10_fu_674_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_red_address0 = sum_red_addr_1_reg_1029.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        sum_red_address0 =  (sc_lv<4>) (tmp_5_mid2_fu_621_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_red_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        sum_red_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void matrixAvg::thread_sum_red_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_red_ce0 = ap_const_logic_1;
    } else {
        sum_red_ce0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_sum_red_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        sum_red_d0 = tmp_15_fu_641_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sum_red_d0 = ap_const_lv32_0;
    } else {
        sum_red_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void matrixAvg::thread_sum_red_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_566_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_1002.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        sum_red_we0 = ap_const_logic_1;
    } else {
        sum_red_we0 = ap_const_logic_0;
    }
}

void matrixAvg::thread_tmp_10_fu_674_p1() {
    tmp_10_fu_674_p1 = esl_zext<64,4>(i_5_reg_464.read());
}

void matrixAvg::thread_tmp_11_fu_797_p3() {
    tmp_11_fu_797_p3 = (!tmp_30_reg_1094.read()[0].is_01())? sc_lv<32>(): ((tmp_30_reg_1094.read()[0].to_bool())? neg_ti1_fu_791_p2.read(): tmp_22_fu_781_p1.read());
}

void matrixAvg::thread_tmp_12_fu_839_p3() {
    tmp_12_fu_839_p3 = (!tmp_33_reg_1105.read()[0].is_01())? sc_lv<32>(): ((tmp_33_reg_1105.read()[0].to_bool())? neg_ti2_fu_833_p2.read(): tmp_25_fu_823_p1.read());
}

void matrixAvg::thread_tmp_13_fu_881_p3() {
    tmp_13_fu_881_p3 = (!tmp_36_reg_1116.read()[0].is_01())? sc_lv<32>(): ((tmp_36_reg_1116.read()[0].to_bool())? neg_ti_fu_875_p2.read(): tmp_28_fu_865_p1.read());
}

void matrixAvg::thread_tmp_14_fu_630_p1() {
    tmp_14_fu_630_p1 = esl_zext<64,10>(grp_fu_945_p3.read());
}

void matrixAvg::thread_tmp_15_fu_641_p2() {
    tmp_15_fu_641_p2 = (!sum_red_q0.read().is_01() || !red_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_red_q0.read()) + sc_biguint<32>(red_q0.read()));
}

void matrixAvg::thread_tmp_16_fu_648_p2() {
    tmp_16_fu_648_p2 = (!sum_green_q0.read().is_01() || !green_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_green_q0.read()) + sc_biguint<32>(green_q0.read()));
}

void matrixAvg::thread_tmp_17_fu_655_p2() {
    tmp_17_fu_655_p2 = (!sum_blue_q0.read().is_01() || !blue_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_blue_q0.read()) + sc_biguint<32>(blue_q0.read()));
}

void matrixAvg::thread_tmp_18_fu_777_p1() {
    tmp_18_fu_777_p1 = esl_sext<32,26>(tmp_31_fu_767_p4.read());
}

void matrixAvg::thread_tmp_19_fu_900_p1() {
    tmp_19_fu_900_p1 = esl_zext<64,4>(i3_reg_475.read());
}

void matrixAvg::thread_tmp_1_fu_566_p2() {
    tmp_1_fu_566_p2 = (!i_3_reg_420.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_420.read() == ap_const_lv4_9);
}

void matrixAvg::thread_tmp_20_fu_917_p1() {
    tmp_20_fu_917_p1 = esl_zext<64,4>(i4_reg_486.read());
}

void matrixAvg::thread_tmp_21_fu_934_p1() {
    tmp_21_fu_934_p1 = esl_zext<64,4>(i6_reg_497.read());
}

void matrixAvg::thread_tmp_22_fu_781_p1() {
    tmp_22_fu_781_p1 = esl_sext<32,26>(tmp_32_reg_1142.read());
}

void matrixAvg::thread_tmp_23_fu_784_p3() {
    tmp_23_fu_784_p3 = (!tmp_30_reg_1094.read()[0].is_01())? sc_lv<32>(): ((tmp_30_reg_1094.read()[0].to_bool())? tmp_18_fu_777_p1.read(): tmp_22_fu_781_p1.read());
}

void matrixAvg::thread_tmp_24_fu_819_p1() {
    tmp_24_fu_819_p1 = esl_sext<32,26>(tmp_34_fu_809_p4.read());
}

void matrixAvg::thread_tmp_25_fu_823_p1() {
    tmp_25_fu_823_p1 = esl_sext<32,26>(tmp_35_reg_1152.read());
}

void matrixAvg::thread_tmp_26_fu_826_p3() {
    tmp_26_fu_826_p3 = (!tmp_33_reg_1105.read()[0].is_01())? sc_lv<32>(): ((tmp_33_reg_1105.read()[0].to_bool())? tmp_24_fu_819_p1.read(): tmp_25_fu_823_p1.read());
}

void matrixAvg::thread_tmp_27_fu_861_p1() {
    tmp_27_fu_861_p1 = esl_sext<32,26>(tmp_37_fu_851_p4.read());
}

void matrixAvg::thread_tmp_28_fu_865_p1() {
    tmp_28_fu_865_p1 = esl_sext<32,26>(tmp_38_reg_1162.read());
}

void matrixAvg::thread_tmp_29_fu_868_p3() {
    tmp_29_fu_868_p3 = (!tmp_36_reg_1116.read()[0].is_01())? sc_lv<32>(): ((tmp_36_reg_1116.read()[0].to_bool())? tmp_27_fu_861_p1.read(): tmp_28_fu_865_p1.read());
}

void matrixAvg::thread_tmp_2_fu_527_p1() {
    tmp_2_fu_527_p1 = esl_zext<64,10>(i_reg_384.read());
}

void matrixAvg::thread_tmp_31_fu_767_p4() {
    tmp_31_fu_767_p4 = neg_mul1_fu_762_p2.read().range(64, 39);
}

void matrixAvg::thread_tmp_34_fu_809_p4() {
    tmp_34_fu_809_p4 = neg_mul2_fu_804_p2.read().range(64, 39);
}

void matrixAvg::thread_tmp_37_fu_851_p4() {
    tmp_37_fu_851_p4 = neg_mul_fu_846_p2.read().range(64, 39);
}

void matrixAvg::thread_tmp_3_mid2_v_v_fu_610_p3() {
    tmp_3_mid2_v_v_fu_610_p3 = (!tmp_9_fu_590_p2.read()[0].is_01())? sc_lv<4>(): ((tmp_9_fu_590_p2.read()[0].to_bool())? j_s_fu_604_p2.read(): j_phi_fu_446_p4.read());
}

void matrixAvg::thread_tmp_4_fu_532_p2() {
    tmp_4_fu_532_p2 = (!i_1_reg_396.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_396.read() == ap_const_lv10_384);
}

void matrixAvg::thread_tmp_5_mid2_fu_621_p1() {
    tmp_5_mid2_fu_621_p1 = esl_zext<64,4>(tmp_3_mid2_v_v_reg_1017.read());
}

void matrixAvg::thread_tmp_6_fu_544_p1() {
    tmp_6_fu_544_p1 = esl_zext<64,10>(i_1_reg_396.read());
}

void matrixAvg::thread_tmp_7_fu_662_p2() {
    tmp_7_fu_662_p2 = (!i_5_reg_464.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i_5_reg_464.read() == ap_const_lv4_9);
}

void matrixAvg::thread_tmp_8_fu_549_p2() {
    tmp_8_fu_549_p2 = (!i_2_reg_408.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_408.read() == ap_const_lv10_384);
}

void matrixAvg::thread_tmp_9_fu_590_p2() {
    tmp_9_fu_590_p2 = (!i_4_phi_fu_457_p4.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(i_4_phi_fu_457_p4.read() == ap_const_lv7_64);
}

void matrixAvg::thread_tmp_fu_515_p2() {
    tmp_fu_515_p2 = (!i_reg_384.read().is_01() || !ap_const_lv10_384.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_384.read() == ap_const_lv10_384);
}

void matrixAvg::thread_tmp_last_V_fu_939_p2() {
    tmp_last_V_fu_939_p2 = (!i6_reg_497.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i6_reg_497.read() == ap_const_lv4_8);
}

void matrixAvg::thread_tmp_s_fu_561_p1() {
    tmp_s_fu_561_p1 = esl_zext<64,10>(i_2_reg_408.read());
}

void matrixAvg::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_515_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_532_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_549_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(mat_in_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_566_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_578_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_578_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_662_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_888_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_905_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_922_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mat_out_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_922_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(mat_out_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void matrixAvg::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TDATA\" :  \"" << mat_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TVALID\" :  \"" << mat_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"mat_in_TREADY\" :  \"" << mat_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TKEEP\" :  \"" << mat_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TSTRB\" :  \"" << mat_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TUSER\" :  \"" << mat_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TLAST\" :  \"" << mat_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TID\" :  \"" << mat_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_in_TDEST\" :  \"" << mat_in_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TDATA\" :  \"" << mat_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TVALID\" :  \"" << mat_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mat_out_TREADY\" :  \"" << mat_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TKEEP\" :  \"" << mat_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TSTRB\" :  \"" << mat_out_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TUSER\" :  \"" << mat_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TLAST\" :  \"" << mat_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TID\" :  \"" << mat_out_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mat_out_TDEST\" :  \"" << mat_out_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


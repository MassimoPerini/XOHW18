-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixAvg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_red_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_red_ce0 : OUT STD_LOGIC;
    agg_result_red_we0 : OUT STD_LOGIC;
    agg_result_red_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_red_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_red_ce1 : OUT STD_LOGIC;
    agg_result_red_we1 : OUT STD_LOGIC;
    agg_result_red_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_blue_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_blue_ce0 : OUT STD_LOGIC;
    agg_result_blue_we0 : OUT STD_LOGIC;
    agg_result_blue_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_blue_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_blue_ce1 : OUT STD_LOGIC;
    agg_result_blue_we1 : OUT STD_LOGIC;
    agg_result_blue_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_green_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_green_ce0 : OUT STD_LOGIC;
    agg_result_green_we0 : OUT STD_LOGIC;
    agg_result_green_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_green_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    agg_result_green_ce1 : OUT STD_LOGIC;
    agg_result_green_we1 : OUT STD_LOGIC;
    agg_result_green_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_red_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_red_ce0 : OUT STD_LOGIC;
    input_red_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_blue_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_blue_ce0 : OUT STD_LOGIC;
    input_blue_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_green_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_green_ce0 : OUT STD_LOGIC;
    input_green_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixAvg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixAvg,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.022000,HLS_SYN_LAT=74,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=1590,HLS_SYN_LUT=1243}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_1_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_790 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_349_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_409_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_reg_808 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_821 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_red_load_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_green_load_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_blue_load_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_600_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_859 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_606_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_864 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_618_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_7_reg_904 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_10_reg_909 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_12_reg_914 : STD_LOGIC_VECTOR (28 downto 0);
    signal cell_avg_red_1_1_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal cell_avg_red_1_2_fu_701_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_green_1_1_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_green_1_2_fu_718_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_blue_1_1_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_blue_1_2_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_193 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cell_avg_green_1_s_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_green_0_s_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_blue_1_s_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_blue_0_s_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_red_1_s_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_red_0_s_reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_293 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_red_1_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_0_1_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_1_2_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_1_3_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_1_1_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_1_1_6_fu_498_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_0_1_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_1_2_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_1_3_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_1_1_fu_369_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_1_1_8_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_0_1_fu_393_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_1_2_fu_531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_1_3_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_1_1_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_1_1_7_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_401_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_413_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_cast_fu_470_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_red_load_1_phi_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_red_0_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_load_1_phi_fu_512_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_green_0_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_load_1_phi_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_blue_0_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_637_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_655_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_646_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_655_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal cell_avg_red_0_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_green_0_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cell_avg_blue_0_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_637_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_646_p10 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_655_p10 : STD_LOGIC_VECTOR (64 downto 0);

    component matrixAvg_mul_34nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    matrixAvg_mul_34nbkb_U1 : component matrixAvg_mul_34nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_637_p0,
        din1 => grp_fu_637_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    matrixAvg_mul_34nbkb_U2 : component matrixAvg_mul_34nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_646_p0,
        din1 => grp_fu_646_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_646_p2);

    matrixAvg_mul_34nbkb_U3 : component matrixAvg_mul_34nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_655_p0,
        din1 => grp_fu_655_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_1))) then 
                i_1_reg_293 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_293 <= i_2_reg_859;
            end if; 
        end if;
    end process;

    i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_204 <= i_3_reg_821;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                i_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_453_p2 = ap_const_lv1_1))) then 
                j_reg_193 <= j_1_reg_790;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_193 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_blue_1_3_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_blue_1_3_fu_70 <= sum_blue_1_1_8_fu_550_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_blue_1_3_fu_70 <= sum_blue_1_1_fu_369_p3;
            end if; 
        end if;
    end process;

    sum_blue_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_blue_1_fu_66 <= sum_blue_1_2_fu_557_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_blue_1_fu_66 <= sum_blue_0_1_fu_377_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_blue_1_fu_66 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_green_1_3_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_green_1_3_fu_78 <= sum_green_1_1_7_fu_524_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_green_1_3_fu_78 <= sum_green_1_1_fu_385_p3;
            end if; 
        end if;
    end process;

    sum_green_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_green_1_fu_74 <= sum_green_1_2_fu_531_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_green_1_fu_74 <= sum_green_0_1_fu_393_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_green_1_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_red_1_3_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_red_1_3_fu_62 <= sum_red_1_1_6_fu_498_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_red_1_3_fu_62 <= sum_red_1_1_fu_353_p3;
            end if; 
        end if;
    end process;

    sum_red_1_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                sum_red_1_fu_58 <= sum_red_1_2_fu_505_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then 
                sum_red_1_fu_58 <= sum_red_0_1_fu_361_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                sum_red_1_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                cell_avg_blue_0_s_reg_254 <= cell_avg_blue_1_2_fu_735_p3;
                cell_avg_blue_1_s_reg_241 <= cell_avg_blue_1_1_fu_728_p3;
                cell_avg_green_0_s_reg_228 <= cell_avg_green_1_2_fu_718_p3;
                cell_avg_green_1_s_reg_215 <= cell_avg_green_1_1_fu_711_p3;
                cell_avg_red_0_s_reg_280 <= cell_avg_red_1_2_fu_701_p3;
                cell_avg_red_1_s_reg_267 <= cell_avg_red_1_1_fu_694_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_2_reg_859 <= i_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_3_reg_821 <= i_3_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_blue_load_reg_851 <= input_blue_q0;
                input_green_load_reg_846 <= input_green_q0;
                input_red_load_reg_841 <= input_red_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_1_reg_790 <= j_1_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_0))) then
                    p_shl1_cast_reg_813(1) <= p_shl1_cast_fu_419_p1(1);
                    p_shl_cast_reg_808(3) <= p_shl_cast_fu_409_p1(3);
                tmp_1_reg_795 <= tmp_1_fu_349_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_10_reg_909 <= grp_fu_646_p2(64 downto 36);
                tmp_12_reg_914 <= grp_fu_655_p2(64 downto 36);
                tmp_7_reg_904 <= grp_fu_637_p2(64 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_3_fu_594_p2))) then
                tmp_11_reg_884 <= tmp_11_fu_626_p3;
                tmp_5_reg_864 <= tmp_5_fu_606_p1;
                tmp_6_reg_874 <= tmp_6_fu_610_p3;
                tmp_8_reg_879 <= tmp_8_fu_618_p3;
            end if;
        end if;
    end process;
    p_shl_cast_reg_808(2 downto 0) <= "000";
    p_shl_cast_reg_808(4) <= '0';
    p_shl1_cast_reg_813(0) <= '0';
    p_shl1_cast_reg_813(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_337_p2, ap_CS_fsm_state3, tmp_4_fu_453_p2, ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_4_fu_453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    agg_result_blue_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    agg_result_blue_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    agg_result_blue_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_blue_ce0 <= ap_const_logic_1;
        else 
            agg_result_blue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_blue_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_blue_ce1 <= ap_const_logic_1;
        else 
            agg_result_blue_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_blue_d0 <= cell_avg_blue_0_s_reg_254;
    agg_result_blue_d1 <= cell_avg_blue_1_s_reg_241;

    agg_result_blue_we0_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_blue_we0 <= ap_const_logic_1;
        else 
            agg_result_blue_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_blue_we1_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_blue_we1 <= ap_const_logic_1;
        else 
            agg_result_blue_we1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_green_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    agg_result_green_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    agg_result_green_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_green_ce0 <= ap_const_logic_1;
        else 
            agg_result_green_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_green_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_green_ce1 <= ap_const_logic_1;
        else 
            agg_result_green_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_green_d0 <= cell_avg_green_0_s_reg_228;
    agg_result_green_d1 <= cell_avg_green_1_s_reg_215;

    agg_result_green_we0_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_green_we0 <= ap_const_logic_1;
        else 
            agg_result_green_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_green_we1_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_green_we1 <= ap_const_logic_1;
        else 
            agg_result_green_we1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_red_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    agg_result_red_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    agg_result_red_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_red_ce0 <= ap_const_logic_1;
        else 
            agg_result_red_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_red_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            agg_result_red_ce1 <= ap_const_logic_1;
        else 
            agg_result_red_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_red_d0 <= cell_avg_red_0_s_reg_280;
    agg_result_red_d1 <= cell_avg_red_1_s_reg_267;

    agg_result_red_we0_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_red_we0 <= ap_const_logic_1;
        else 
            agg_result_red_we0 <= ap_const_logic_0;
        end if; 
    end process;


    agg_result_red_we1_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            agg_result_red_we1 <= ap_const_logic_1;
        else 
            agg_result_red_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, tmp_3_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_3_fu_594_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cell_avg_blue_0_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_914),32));
    cell_avg_blue_1_1_fu_728_p3 <= 
        cell_avg_blue_0_fu_725_p1 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_blue_1_s_reg_241;
    cell_avg_blue_1_2_fu_735_p3 <= 
        cell_avg_blue_0_s_reg_254 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_blue_0_fu_725_p1;
    cell_avg_green_0_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_909),32));
    cell_avg_green_1_1_fu_711_p3 <= 
        cell_avg_green_0_fu_708_p1 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_green_1_s_reg_215;
    cell_avg_green_1_2_fu_718_p3 <= 
        cell_avg_green_0_s_reg_228 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_green_0_fu_708_p1;
    cell_avg_red_0_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_904),32));
    cell_avg_red_1_1_fu_694_p3 <= 
        cell_avg_red_0_fu_691_p1 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_red_1_s_reg_267;
    cell_avg_red_1_2_fu_701_p3 <= 
        cell_avg_red_0_s_reg_280 when (tmp_5_reg_864(0) = '1') else 
        cell_avg_red_0_fu_691_p1;
    grp_fu_637_p0 <= ap_const_lv65_19999999A(34 - 1 downto 0);
    grp_fu_637_p1 <= grp_fu_637_p10(32 - 1 downto 0);
    grp_fu_637_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_874),65));
    grp_fu_646_p0 <= ap_const_lv65_19999999A(34 - 1 downto 0);
    grp_fu_646_p1 <= grp_fu_646_p10(32 - 1 downto 0);
    grp_fu_646_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_879),65));
    grp_fu_655_p0 <= ap_const_lv65_19999999A(34 - 1 downto 0);
    grp_fu_655_p1 <= grp_fu_655_p10(32 - 1 downto 0);
    grp_fu_655_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_884),65));
    i_2_fu_600_p2 <= std_logic_vector(unsigned(i_1_reg_293) + unsigned(ap_const_lv2_1));
    i_3_fu_459_p2 <= std_logic_vector(unsigned(i_reg_204) + unsigned(ap_const_lv4_1));
    input_blue_address0 <= tmp_9_fu_479_p1(5 - 1 downto 0);

    input_blue_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_blue_ce0 <= ap_const_logic_1;
        else 
            input_blue_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_green_address0 <= tmp_9_fu_479_p1(5 - 1 downto 0);

    input_green_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_green_ce0 <= ap_const_logic_1;
        else 
            input_green_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_red_address0 <= tmp_9_fu_479_p1(5 - 1 downto 0);

    input_red_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_red_ce0 <= ap_const_logic_1;
        else 
            input_red_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_343_p2 <= std_logic_vector(unsigned(j_reg_193) + unsigned(ap_const_lv2_1));
    p_shl1_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_413_p2),4));
    p_shl_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_401_p3),5));
    p_shl_fu_401_p3 <= (tmp_1_fu_349_p1 & ap_const_lv3_0);
    sum_blue_0_1_fu_377_p3 <= 
        sum_blue_1_fu_66 when (tmp_1_fu_349_p1(0) = '1') else 
        ap_const_lv32_0;
    sum_blue_0_fu_545_p2 <= std_logic_vector(unsigned(input_blue_load_reg_851) + unsigned(sum_blue_load_1_phi_fu_538_p3));
    sum_blue_1_1_8_fu_550_p3 <= 
        sum_blue_0_fu_545_p2 when (tmp_1_reg_795(0) = '1') else 
        sum_blue_1_3_fu_70;
    sum_blue_1_1_fu_369_p3 <= 
        ap_const_lv32_0 when (tmp_1_fu_349_p1(0) = '1') else 
        sum_blue_1_3_fu_70;
    sum_blue_1_2_fu_557_p3 <= 
        sum_blue_1_fu_66 when (tmp_1_reg_795(0) = '1') else 
        sum_blue_0_fu_545_p2;
    sum_blue_load_1_phi_fu_538_p3 <= 
        sum_blue_1_3_fu_70 when (tmp_1_reg_795(0) = '1') else 
        sum_blue_1_fu_66;
    sum_green_0_1_fu_393_p3 <= 
        sum_green_1_fu_74 when (tmp_1_fu_349_p1(0) = '1') else 
        ap_const_lv32_0;
    sum_green_0_fu_519_p2 <= std_logic_vector(unsigned(input_green_load_reg_846) + unsigned(sum_green_load_1_phi_fu_512_p3));
    sum_green_1_1_7_fu_524_p3 <= 
        sum_green_0_fu_519_p2 when (tmp_1_reg_795(0) = '1') else 
        sum_green_1_3_fu_78;
    sum_green_1_1_fu_385_p3 <= 
        ap_const_lv32_0 when (tmp_1_fu_349_p1(0) = '1') else 
        sum_green_1_3_fu_78;
    sum_green_1_2_fu_531_p3 <= 
        sum_green_1_fu_74 when (tmp_1_reg_795(0) = '1') else 
        sum_green_0_fu_519_p2;
    sum_green_load_1_phi_fu_512_p3 <= 
        sum_green_1_3_fu_78 when (tmp_1_reg_795(0) = '1') else 
        sum_green_1_fu_74;
    sum_red_0_1_fu_361_p3 <= 
        sum_red_1_fu_58 when (tmp_1_fu_349_p1(0) = '1') else 
        ap_const_lv32_0;
    sum_red_0_fu_493_p2 <= std_logic_vector(unsigned(input_red_load_reg_841) + unsigned(sum_red_load_1_phi_fu_486_p3));
    sum_red_1_1_6_fu_498_p3 <= 
        sum_red_0_fu_493_p2 when (tmp_1_reg_795(0) = '1') else 
        sum_red_1_3_fu_62;
    sum_red_1_1_fu_353_p3 <= 
        ap_const_lv32_0 when (tmp_1_fu_349_p1(0) = '1') else 
        sum_red_1_3_fu_62;
    sum_red_1_2_fu_505_p3 <= 
        sum_red_1_fu_58 when (tmp_1_reg_795(0) = '1') else 
        sum_red_0_fu_493_p2;
    sum_red_load_1_phi_fu_486_p3 <= 
        sum_red_1_3_fu_62 when (tmp_1_reg_795(0) = '1') else 
        sum_red_1_fu_58;
    tmp1_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_465_p2),5));
    tmp1_fu_465_p2 <= std_logic_vector(unsigned(p_shl1_cast_reg_813) + unsigned(i_reg_204));
    tmp_11_fu_626_p3 <= 
        sum_blue_1_3_fu_70 when (tmp_5_fu_606_p1(0) = '1') else 
        sum_blue_1_fu_66;
    tmp_1_fu_349_p1 <= j_reg_193(1 - 1 downto 0);
    tmp_2_fu_413_p2 <= std_logic_vector(shift_left(unsigned(j_reg_193),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_3_fu_594_p2 <= "1" when (i_1_reg_293 = ap_const_lv2_2) else "0";
    tmp_4_fu_453_p2 <= "1" when (i_reg_204 = ap_const_lv4_A) else "0";
    tmp_5_fu_606_p1 <= i_1_reg_293(1 - 1 downto 0);
    tmp_6_fu_610_p3 <= 
        sum_red_1_3_fu_62 when (tmp_5_fu_606_p1(0) = '1') else 
        sum_red_1_fu_58;
    tmp_8_fu_618_p3 <= 
        sum_green_1_3_fu_78 when (tmp_5_fu_606_p1(0) = '1') else 
        sum_green_1_fu_74;
    tmp_9_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_474_p2),64));
    tmp_fu_337_p2 <= "1" when (j_reg_193 = ap_const_lv2_2) else "0";
    tmp_s_fu_474_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_470_p1) + unsigned(p_shl_cast_reg_808));
end behav;
